//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.83;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.83] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x5bbf40=_0x5048;(function(_0x2ad1be,_0x3d44bf){const _0x43a01e=_0x5048,_0x1b3e42=_0x2ad1be();while(!![]){try{const _0xd5b75e=parseInt(_0x43a01e(0x828))/0x1*(-parseInt(_0x43a01e(0x8fd))/0x2)+parseInt(_0x43a01e(0x523))/0x3*(parseInt(_0x43a01e(0x254))/0x4)+-parseInt(_0x43a01e(0xa07))/0x5+-parseInt(_0x43a01e(0xa49))/0x6*(-parseInt(_0x43a01e(0x4d5))/0x7)+-parseInt(_0x43a01e(0x6da))/0x8*(parseInt(_0x43a01e(0x2ab))/0x9)+parseInt(_0x43a01e(0x91f))/0xa+parseInt(_0x43a01e(0x543))/0xb;if(_0xd5b75e===_0x3d44bf)break;else _0x1b3e42['push'](_0x1b3e42['shift']());}catch(_0x1549ac){_0x1b3e42['push'](_0x1b3e42['shift']());}}}(_0x32df,0x98b25));var label='BattleCore',tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x5bbf40(0xafb)](function(_0x571060){const _0x2c5d1d=_0x5bbf40;return _0x571060[_0x2c5d1d(0x3fa)]&&_0x571060['description'][_0x2c5d1d(0x608)]('['+label+']');})[0x0];VisuMZ[label][_0x5bbf40(0x8be)]=VisuMZ[label][_0x5bbf40(0x8be)]||{},VisuMZ[_0x5bbf40(0x2c2)]=function(_0x20dd83,_0x1b96bb){const _0x1cb7ab=_0x5bbf40;for(const _0xce3827 in _0x1b96bb){if(_0xce3827[_0x1cb7ab(0x24d)](/(.*):(.*)/i)){const _0x2dd2af=String(RegExp['$1']),_0x150423=String(RegExp['$2'])[_0x1cb7ab(0x6ca)]()[_0x1cb7ab(0x86c)]();let _0x47c1fd,_0x1a2a1f,_0x351597;switch(_0x150423){case _0x1cb7ab(0x58d):_0x47c1fd=_0x1b96bb[_0xce3827]!==''?Number(_0x1b96bb[_0xce3827]):0x0;break;case'ARRAYNUM':_0x1a2a1f=_0x1b96bb[_0xce3827]!==''?JSON['parse'](_0x1b96bb[_0xce3827]):[],_0x47c1fd=_0x1a2a1f[_0x1cb7ab(0x6d6)](_0x295ad8=>Number(_0x295ad8));break;case'EVAL':_0x47c1fd=_0x1b96bb[_0xce3827]!==''?eval(_0x1b96bb[_0xce3827]):null;break;case _0x1cb7ab(0x6f1):_0x1a2a1f=_0x1b96bb[_0xce3827]!==''?JSON[_0x1cb7ab(0x8fb)](_0x1b96bb[_0xce3827]):[],_0x47c1fd=_0x1a2a1f['map'](_0x3a760e=>eval(_0x3a760e));break;case _0x1cb7ab(0x56f):_0x47c1fd=_0x1b96bb[_0xce3827]!==''?JSON[_0x1cb7ab(0x8fb)](_0x1b96bb[_0xce3827]):'';break;case _0x1cb7ab(0x95d):_0x1a2a1f=_0x1b96bb[_0xce3827]!==''?JSON[_0x1cb7ab(0x8fb)](_0x1b96bb[_0xce3827]):[],_0x47c1fd=_0x1a2a1f['map'](_0x22eaab=>JSON[_0x1cb7ab(0x8fb)](_0x22eaab));break;case'FUNC':_0x47c1fd=_0x1b96bb[_0xce3827]!==''?new Function(JSON[_0x1cb7ab(0x8fb)](_0x1b96bb[_0xce3827])):new Function(_0x1cb7ab(0x7e9));break;case'ARRAYFUNC':_0x1a2a1f=_0x1b96bb[_0xce3827]!==''?JSON[_0x1cb7ab(0x8fb)](_0x1b96bb[_0xce3827]):[],_0x47c1fd=_0x1a2a1f[_0x1cb7ab(0x6d6)](_0x40c59c=>new Function(JSON[_0x1cb7ab(0x8fb)](_0x40c59c)));break;case _0x1cb7ab(0x89e):_0x47c1fd=_0x1b96bb[_0xce3827]!==''?String(_0x1b96bb[_0xce3827]):'';break;case'ARRAYSTR':_0x1a2a1f=_0x1b96bb[_0xce3827]!==''?JSON[_0x1cb7ab(0x8fb)](_0x1b96bb[_0xce3827]):[],_0x47c1fd=_0x1a2a1f[_0x1cb7ab(0x6d6)](_0x3f38cc=>String(_0x3f38cc));break;case _0x1cb7ab(0x924):_0x351597=_0x1b96bb[_0xce3827]!==''?JSON[_0x1cb7ab(0x8fb)](_0x1b96bb[_0xce3827]):{},_0x20dd83[_0x2dd2af]={},VisuMZ[_0x1cb7ab(0x2c2)](_0x20dd83[_0x2dd2af],_0x351597);continue;case _0x1cb7ab(0x84f):_0x1a2a1f=_0x1b96bb[_0xce3827]!==''?JSON[_0x1cb7ab(0x8fb)](_0x1b96bb[_0xce3827]):[],_0x47c1fd=_0x1a2a1f[_0x1cb7ab(0x6d6)](_0x30ba27=>VisuMZ['ConvertParams']({},JSON['parse'](_0x30ba27)));break;default:continue;}_0x20dd83[_0x2dd2af]=_0x47c1fd;}}return _0x20dd83;},(_0x50a6a3=>{const _0x472aa8=_0x5bbf40,_0x1576d0=_0x50a6a3[_0x472aa8(0x4e5)];for(const _0xbebac3 of dependencies){if(!Imported[_0xbebac3]){alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'[_0x472aa8(0x7c2)](_0x1576d0,_0xbebac3)),SceneManager[_0x472aa8(0x593)]();break;}}const _0x1ebab6=_0x50a6a3[_0x472aa8(0x215)];if(_0x1ebab6['match'](/\[Version[ ](.*?)\]/i)){const _0x31b648=Number(RegExp['$1']);_0x31b648!==VisuMZ[label]['version']&&(alert(_0x472aa8(0x36b)[_0x472aa8(0x7c2)](_0x1576d0,_0x31b648)),SceneManager[_0x472aa8(0x593)]());}if(_0x1ebab6[_0x472aa8(0x24d)](/\[Tier[ ](\d+)\]/i)){const _0x59fdb8=Number(RegExp['$1']);_0x59fdb8<tier?(alert(_0x472aa8(0x8bf)[_0x472aa8(0x7c2)](_0x1576d0,_0x59fdb8,tier)),SceneManager[_0x472aa8(0x593)]()):tier=Math['max'](_0x59fdb8,tier);}VisuMZ[_0x472aa8(0x2c2)](VisuMZ[label][_0x472aa8(0x8be)],_0x50a6a3[_0x472aa8(0xa05)]);})(pluginData),VisuMZ[_0x5bbf40(0xae5)]=function(_0x275884){const _0x44f6b4=_0x5bbf40;let _0x576ece=[];for(const _0x1f589e of _0x275884){_0x576ece=_0x576ece[_0x44f6b4(0xa80)](VisuMZ[_0x44f6b4(0x704)](_0x1f589e));}return _0x576ece[_0x44f6b4(0xafb)](_0x34f200=>_0x34f200);},VisuMZ[_0x5bbf40(0x704)]=function(_0x48b1de){const _0x33a358=_0x5bbf40,_0x3c1010=BattleManager[_0x33a358(0x4fd)]()[_0x33a358(0xafb)](_0xaf6d24=>_0xaf6d24&&_0xaf6d24['isAppeared']()),_0x3af764=BattleManager[_0x33a358(0xb88)],_0x538ff9=BattleManager[_0x33a358(0x958)],_0x3c0614=BattleManager[_0x33a358(0x414)]?BattleManager[_0x33a358(0x414)][_0x33a358(0xa30)](0x0):_0x3c1010;_0x48b1de=_0x48b1de[_0x33a358(0x993)]()[_0x33a358(0x86c)]();if(_0x48b1de==='user')return[_0x3af764];else{if(_0x48b1de===_0x33a358(0x56b))return[_0x538ff9];else{if(_0x48b1de==='prev\x20target'){if(_0x538ff9){const _0x46d960=_0x3c0614['indexOf'](_0x538ff9);return _0x46d960>=0x0?[_0x3c0614[_0x46d960-0x1]||_0x538ff9]:[_0x538ff9];}}else{if(_0x48b1de===_0x33a358(0x53a)){if(_0x538ff9){const _0x402df6=_0x3c0614[_0x33a358(0x5c9)](_0x538ff9);return _0x402df6>=0x0?[_0x3c0614[_0x402df6+0x1]||_0x538ff9]:[_0x538ff9];}}else{if(_0x48b1de===_0x33a358(0x620))return _0x3c0614;else{if(_0x48b1de===_0x33a358(0xa84))return[_0x3af764][_0x33a358(0xa80)](_0x3c0614);else{if(_0x48b1de===_0x33a358(0xbb0))return _0x3c1010['filter'](_0x2076cd=>_0x2076cd!==_0x3af764&&!_0x3c0614[_0x33a358(0x608)](_0x2076cd)&&_0x2076cd[_0x33a358(0x44a)]());else{if(_0x48b1de===_0x33a358(0x8e1))return[VisuMZ[_0x33a358(0x60b)]()];else{if(_0x48b1de[_0x33a358(0x24d)](/SPECIAL (.*)>/i)){const _0xe3e39d=String(RegExp['$1'])[_0x33a358(0x728)](',')['map'](_0x377f81=>_0x377f81[_0x33a358(0x86c)]());return[VisuMZ[_0x33a358(0x901)](_0xe3e39d)];}}}}}}}}}if(_0x3af764){if(_0x48b1de===_0x33a358(0x6af))return _0x3af764[_0x33a358(0x24f)]()[_0x33a358(0xb48)]();else{if(_0x48b1de===_0x33a358(0xab0))return _0x3af764[_0x33a358(0x24f)]()[_0x33a358(0xb48)]()[_0x33a358(0xafb)](_0x494cfd=>_0x494cfd!==_0x3af764);else{if(_0x48b1de===_0x33a358(0x477))return _0x3af764[_0x33a358(0x24f)]()['aliveMembers']()[_0x33a358(0xafb)](_0x5d5170=>_0x5d5170!==_0x538ff9);else{if(_0x48b1de===_0x33a358(0xa27))return _0x3af764[_0x33a358(0x24f)]()[_0x33a358(0x402)]();else{if(_0x48b1de[_0x33a358(0x24d)](/FRIEND INDEX (\d+)/i)){const _0xeda76f=Number(RegExp['$1']);return[_0x3af764[_0x33a358(0x24f)]()['members']()[_0xeda76f]];}}}}}if(_0x48b1de===_0x33a358(0x326))return _0x3af764[_0x33a358(0x578)]()['aliveMembers']();else{if(_0x48b1de==='alive\x20opponents\x20not\x20target')return _0x3af764[_0x33a358(0x578)]()[_0x33a358(0xb48)]()[_0x33a358(0xafb)](_0xbfb480=>_0xbfb480!==_0x538ff9);else{if(_0x48b1de==='dead\x20opponents')return _0x3af764['opponentsUnit']()[_0x33a358(0x402)]();else{if(_0x48b1de[_0x33a358(0x24d)](/OPPONENT INDEX (\d+)/i)){const _0x23572e=Number(RegExp['$1']);return[_0x3af764[_0x33a358(0x578)]()['members']()[_0x23572e]];}}}}}if(_0x48b1de==='alive\x20actors')return $gameParty['aliveMembers']();else{if(_0x48b1de===_0x33a358(0x6ac))return $gameParty[_0x33a358(0xb48)]()[_0x33a358(0xafb)](_0x49c1ee=>_0x49c1ee!==_0x3af764);else{if(_0x48b1de===_0x33a358(0x3b0))return $gameParty[_0x33a358(0xb48)]()[_0x33a358(0xafb)](_0x5a6712=>_0x5a6712!==_0x538ff9);else{if(_0x48b1de==='dead\x20actors')return $gameParty['deadMembers']();else{if(_0x48b1de[_0x33a358(0x24d)](/ACTOR INDEX (\d+)/i)){const _0x121a4d=Number(RegExp['$1']);return[$gameParty['members']()[_0x121a4d]];}else{if(_0x48b1de[_0x33a358(0x24d)](/ACTOR ID (\d+)/i)){const _0x29558d=Number(RegExp['$1']);return[$gameActors[_0x33a358(0x297)](_0x29558d)];}}}}}}if(_0x48b1de==='alive\x20enemies')return $gameTroop[_0x33a358(0xb48)]();else{if(_0x48b1de===_0x33a358(0x9a8))return $gameTroop[_0x33a358(0xb48)]()[_0x33a358(0xafb)](_0x9065ba=>_0x9065ba!==_0x3af764);else{if(_0x48b1de==='alive\x20enemies\x20not\x20target')return $gameTroop['aliveMembers']()[_0x33a358(0xafb)](_0x1fddc9=>_0x1fddc9!==_0x538ff9);else{if(_0x48b1de===_0x33a358(0x4e1))return $gameTroop['deadMembers']();else{if(_0x48b1de[_0x33a358(0x24d)](/ENEMY INDEX (\d+)/i)){const _0x3c658=Number(RegExp['$1']);return[$gameTroop['members']()[_0x3c658]];}else{if(_0x48b1de['match'](/ENEMY ID (\d+)/i)){const _0x30bf73=Number(RegExp['$1']);return $gameTroop['aliveMembers']()[_0x33a358(0xafb)](_0x497e55=>_0x497e55[_0x33a358(0x7dc)]()===_0x30bf73);}}}}}}if(_0x48b1de===_0x33a358(0x4bb))return _0x3c1010[_0x33a358(0xafb)](_0x576da7=>_0x576da7[_0x33a358(0x706)]());else{if(_0x48b1de===_0x33a358(0x3c9))return _0x3c1010['filter'](_0x5a98ad=>_0x5a98ad[_0x33a358(0x706)]()&&_0x5a98ad!==_0x3af764);else{if(_0x48b1de==='alive\x20battlers\x20not\x20target')return _0x3c1010[_0x33a358(0xafb)](_0x28cc8a=>_0x28cc8a[_0x33a358(0x706)]()&&_0x28cc8a!==_0x538ff9);else{if(_0x48b1de===_0x33a358(0x26f))return _0x3c1010[_0x33a358(0xafb)](_0xefc0a7=>_0xefc0a7[_0x33a358(0x724)]());}}}return[];},VisuMZ['GetActionSequenceSpecialTarget']=function(){const _0x295754=_0x5bbf40;return BattleManager[_0x295754(0x958)];},VisuMZ[_0x5bbf40(0x901)]=function(_0xda0ae6){return BattleManager['_target'];},PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Set_SetupAction',_0x25651e=>{const _0x14a4b3=_0x5bbf40;if(!SceneManager[_0x14a4b3(0x277)]())return;VisuMZ[_0x14a4b3(0x2c2)](_0x25651e,_0x25651e);const _0x734338=$gameTemp['getLastPluginCommandInterpreter'](),_0x797c40=BattleManager[_0x14a4b3(0x866)],_0x12d585=BattleManager[_0x14a4b3(0xb88)],_0x43d059=BattleManager[_0x14a4b3(0x414)]?BattleManager[_0x14a4b3(0x414)][_0x14a4b3(0xa30)](0x0):[],_0x596ce6=BattleManager[_0x14a4b3(0x9e4)];if(!_0x734338||!_0x797c40||!_0x12d585)return;if(!_0x797c40[_0x14a4b3(0x92e)]())return;if(_0x25651e[_0x14a4b3(0xb9f)])_0x596ce6[_0x14a4b3(0x798)](_0x12d585,_0x797c40['item']());_0x25651e[_0x14a4b3(0x1fd)]&&_0x596ce6[_0x14a4b3(0x9cb)](_0x14a4b3(0x642),_0x12d585,_0x43d059,!![]);if(_0x25651e[_0x14a4b3(0x6bb)])_0x596ce6[_0x14a4b3(0x9cb)]('performActionStart',_0x12d585,_0x797c40);if(_0x25651e[_0x14a4b3(0x41f)])_0x596ce6[_0x14a4b3(0x9cb)](_0x14a4b3(0x37c));if(_0x25651e[_0x14a4b3(0x525)])_0x596ce6[_0x14a4b3(0x9cb)](_0x14a4b3(0x5b4),_0x12d585,_0x797c40);if(_0x25651e['WaitForAnimation'])_0x596ce6[_0x14a4b3(0x9cb)](_0x14a4b3(0x9ed));_0x734338['setWaitMode'](_0x14a4b3(0xb41));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x765),_0x5d3a4e=>{const _0x4a9b10=_0x5bbf40;if(!SceneManager[_0x4a9b10(0x277)]())return;VisuMZ['ConvertParams'](_0x5d3a4e,_0x5d3a4e);const _0x130531=$gameTemp[_0x4a9b10(0x9c4)](),_0x36b9d5=BattleManager[_0x4a9b10(0x866)],_0x38c184=BattleManager[_0x4a9b10(0xb88)],_0x11d3d7=BattleManager['_allTargets']?BattleManager[_0x4a9b10(0x414)][_0x4a9b10(0xa30)](0x0):[],_0x34f4c2=BattleManager[_0x4a9b10(0x9e4)],_0x57811d=_0x5d3a4e[_0x4a9b10(0x80f)]??![];if(!_0x130531||!_0x36b9d5||!_0x38c184)return;if(!_0x36b9d5[_0x4a9b10(0x92e)]())return;let _0x52b63e=_0x57811d?_0x34f4c2[_0x4a9b10(0x4d9)](_0x38c184):0x1;for(let _0x62ae1f=0x0;_0x62ae1f<_0x52b63e;_0x62ae1f++){_0x57811d&&_0x38c184[_0x4a9b10(0xa32)]()&&_0x34f4c2[_0x4a9b10(0x9cb)](_0x4a9b10(0xb86),_0x38c184,_0x62ae1f);if(_0x5d3a4e[_0x4a9b10(0xb0d)])_0x34f4c2[_0x4a9b10(0x9cb)](_0x4a9b10(0xa7a),_0x38c184,_0x36b9d5);if(_0x5d3a4e[_0x4a9b10(0x7c9)]>0x0)_0x34f4c2[_0x4a9b10(0x9cb)](_0x4a9b10(0x308),_0x5d3a4e['WaitCount']);if(_0x5d3a4e[_0x4a9b10(0x7cf)])_0x34f4c2[_0x4a9b10(0x9cb)](_0x4a9b10(0xad2),_0x38c184,_0x11d3d7,_0x36b9d5[_0x4a9b10(0x92e)]()[_0x4a9b10(0x471)]);if(_0x5d3a4e[_0x4a9b10(0x848)])_0x34f4c2[_0x4a9b10(0x9cb)](_0x4a9b10(0x9ed));for(const _0x4b1e8e of _0x11d3d7){if(!_0x4b1e8e)continue;if(_0x5d3a4e[_0x4a9b10(0x9c5)])_0x34f4c2['push']('actionEffect',_0x38c184,_0x4b1e8e);}}_0x57811d&&_0x38c184['isActor']()&&_0x34f4c2[_0x4a9b10(0x9cb)](_0x4a9b10(0xa4e),_0x38c184);if(_0x5d3a4e[_0x4a9b10(0x1fd)])_0x34f4c2[_0x4a9b10(0x9cb)](_0x4a9b10(0x642),_0x38c184,_0x11d3d7,![]);_0x130531[_0x4a9b10(0x61b)]('battlelog');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Set_TargetActionSet',_0x277b88=>{const _0x358e51=_0x5bbf40;if(!SceneManager[_0x358e51(0x277)]())return;VisuMZ['ConvertParams'](_0x277b88,_0x277b88);const _0x11470c=$gameTemp[_0x358e51(0x9c4)](),_0x4c1d18=BattleManager[_0x358e51(0x866)],_0x41e04d=BattleManager['_subject'],_0x342557=BattleManager[_0x358e51(0x414)]?BattleManager[_0x358e51(0x414)]['slice'](0x0):[],_0x3c7968=BattleManager[_0x358e51(0x9e4)],_0x33c91e=_0x277b88[_0x358e51(0x80f)]??![];if(!_0x11470c||!_0x4c1d18||!_0x41e04d)return;if(!_0x4c1d18[_0x358e51(0x92e)]())return;let _0x14ea40=_0x33c91e?_0x3c7968['getDualWieldTimes'](_0x41e04d):0x1;for(let _0x15b196=0x0;_0x15b196<_0x14ea40;_0x15b196++){for(const _0x6e5f7c of _0x342557){if(!_0x6e5f7c)continue;_0x33c91e&&_0x41e04d[_0x358e51(0xa32)]()&&_0x3c7968[_0x358e51(0x9cb)](_0x358e51(0xb86),_0x41e04d,_0x15b196);if(_0x277b88[_0x358e51(0xb0d)])_0x3c7968[_0x358e51(0x9cb)](_0x358e51(0xa7a),_0x41e04d,_0x4c1d18);if(_0x277b88[_0x358e51(0x3bc)]>0x0)_0x3c7968[_0x358e51(0x9cb)](_0x358e51(0x308),_0x277b88[_0x358e51(0x3bc)]);if(_0x277b88[_0x358e51(0x7cf)])_0x3c7968[_0x358e51(0x9cb)](_0x358e51(0xad2),_0x41e04d,[_0x6e5f7c],_0x4c1d18[_0x358e51(0x92e)]()[_0x358e51(0x471)]);if(_0x277b88['WaitCount2']>0x0)_0x3c7968['push'](_0x358e51(0x308),_0x277b88[_0x358e51(0x226)]);if(_0x277b88[_0x358e51(0x9c5)])_0x3c7968[_0x358e51(0x9cb)](_0x358e51(0xb87),_0x41e04d,_0x6e5f7c);}}_0x33c91e&&_0x41e04d[_0x358e51(0xa32)]()&&_0x3c7968['push']('clearActiveWeaponSet',_0x41e04d);if(_0x277b88['ApplyImmortal'])_0x3c7968[_0x358e51(0x9cb)]('applyImmortal',_0x41e04d,_0x342557,![]);_0x11470c[_0x358e51(0x61b)](_0x358e51(0xb41));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Set_FinishAction',_0x4d505e=>{const _0x385ba6=_0x5bbf40;if(!SceneManager[_0x385ba6(0x277)]())return;VisuMZ['ConvertParams'](_0x4d505e,_0x4d505e);const _0x4ec03f=$gameTemp['getLastPluginCommandInterpreter'](),_0x216b62=BattleManager[_0x385ba6(0x866)],_0x1f2f30=BattleManager[_0x385ba6(0xb88)],_0x27ee11=BattleManager[_0x385ba6(0x414)]?BattleManager[_0x385ba6(0x414)][_0x385ba6(0xa30)](0x0):[],_0x504e69=BattleManager['_logWindow'];if(!_0x4ec03f||!_0x216b62||!_0x1f2f30)return;if(!_0x216b62['item']())return;if(_0x4d505e[_0x385ba6(0x1fd)])_0x504e69[_0x385ba6(0x9cb)](_0x385ba6(0x642),_0x1f2f30,_0x27ee11,![]);if(_0x4d505e[_0x385ba6(0x806)])_0x504e69['push'](_0x385ba6(0x793));if(_0x4d505e[_0x385ba6(0x649)])_0x504e69[_0x385ba6(0x9cb)](_0x385ba6(0x2d9));if(_0x4d505e['ClearBattleLog'])_0x504e69['push'](_0x385ba6(0x8cb));if(_0x4d505e[_0x385ba6(0xc0e)])_0x504e69[_0x385ba6(0x9cb)](_0x385ba6(0x591),_0x1f2f30);if(_0x4d505e[_0x385ba6(0x41f)])_0x504e69['push'](_0x385ba6(0x37c));_0x4ec03f['setWaitMode'](_0x385ba6(0xb41));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_ChangeAngle',_0x90d1f5=>{const _0x452c68=_0x5bbf40;if(!SceneManager[_0x452c68(0x277)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x452c68(0x2c2)](_0x90d1f5,_0x90d1f5);const _0x4c65c9=$gameTemp[_0x452c68(0x9c4)](),_0x4e29e1=_0x90d1f5[_0x452c68(0x4a9)];if(!_0x4c65c9)return;$gameScreen['setBattleAngle'](_0x90d1f5[_0x452c68(0x7bd)],_0x90d1f5[_0x452c68(0x2f0)],_0x90d1f5[_0x452c68(0x5a4)]);if(_0x4e29e1)_0x4c65c9[_0x452c68(0x61b)](_0x452c68(0xb8f));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Angle_Reset',_0x3e1f38=>{const _0x25b3f4=_0x5bbf40;if(!SceneManager[_0x25b3f4(0x277)]())return;if(!Imported[_0x25b3f4(0x846)])return;VisuMZ[_0x25b3f4(0x2c2)](_0x3e1f38,_0x3e1f38);const _0x3a6d64=$gameTemp[_0x25b3f4(0x9c4)](),_0x5abdb9=_0x3e1f38[_0x25b3f4(0x4a9)];if(!_0x3a6d64)return;$gameScreen['setBattleAngle'](0x0,_0x3e1f38[_0x25b3f4(0x2f0)],_0x3e1f38[_0x25b3f4(0x5a4)]);if(_0x5abdb9)_0x3a6d64[_0x25b3f4(0x61b)](_0x25b3f4(0xb8f));}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x360),_0x1f140b=>{const _0x484423=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x484423(0x846)])return;const _0x3f51e7=$gameTemp[_0x484423(0x9c4)]();if(!_0x3f51e7)return;_0x3f51e7[_0x484423(0x61b)](_0x484423(0xb8f));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Animation_ActionAnimation',_0x19c8cb=>{const _0x5b4715=_0x5bbf40;if(!SceneManager[_0x5b4715(0x277)]())return;VisuMZ[_0x5b4715(0x2c2)](_0x19c8cb,_0x19c8cb);const _0x2af9ab=$gameTemp[_0x5b4715(0x9c4)](),_0x1a8b32=BattleManager['_action'],_0x69f85c=BattleManager['_subject'],_0x524b11=VisuMZ[_0x5b4715(0xae5)](_0x19c8cb[_0x5b4715(0x3f1)]),_0x318c72=_0x19c8cb['Mirror'],_0x4e97cd=BattleManager[_0x5b4715(0x9e4)];if(!_0x2af9ab||!_0x1a8b32||!_0x69f85c)return;if(!_0x1a8b32['item']())return;let _0x33014e=_0x1a8b32['item']()[_0x5b4715(0x471)];if(_0x33014e<0x0)_0x33014e=_0x69f85c[_0x5b4715(0x352)]();$gameTemp[_0x5b4715(0x7a4)](_0x524b11,_0x33014e,_0x318c72),_0x19c8cb[_0x5b4715(0x848)]&&_0x2af9ab['setWaitMode'](_0x5b4715(0x36d));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x696),_0x106c83=>{const _0xf95b3a=_0x5bbf40;if(!SceneManager[_0xf95b3a(0x277)]())return;VisuMZ['ConvertParams'](_0x106c83,_0x106c83);const _0x5f1c83=$gameTemp[_0xf95b3a(0x9c4)](),_0x498fcb=BattleManager[_0xf95b3a(0xb88)],_0x465b61=VisuMZ[_0xf95b3a(0xae5)](_0x106c83['Targets']),_0x193411=_0x106c83[_0xf95b3a(0x78c)],_0x1d13c8=BattleManager[_0xf95b3a(0x9e4)];if(!_0x5f1c83||!_0x498fcb)return;const _0x515a90=_0x498fcb[_0xf95b3a(0x352)]();$gameTemp[_0xf95b3a(0x7a4)](_0x465b61,_0x515a90,_0x193411),_0x106c83[_0xf95b3a(0x848)]&&_0x5f1c83[_0xf95b3a(0x61b)](_0xf95b3a(0x36d));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x361),_0x3ab3ae=>{const _0x19ec6d=_0x5bbf40;if(!SceneManager[_0x19ec6d(0x277)]())return;VisuMZ['ConvertParams'](_0x3ab3ae,_0x3ab3ae);const _0x50d49c=_0x88a10c[_0x19ec6d(0x910)](_0x3ab3ae[_0x19ec6d(0xa23)]);if(_0x50d49c<=0x0)return;const _0xb245a6=$gameTemp[_0x19ec6d(0x9c4)](),_0x88a10c=BattleManager['_subject'],_0x199950=VisuMZ[_0x19ec6d(0xae5)](_0x3ab3ae['Targets']),_0xa73900=_0x3ab3ae[_0x19ec6d(0x78c)],_0x5abcbb=BattleManager[_0x19ec6d(0x9e4)];if(!_0xb245a6||!_0x88a10c)return;$gameTemp['requestAnimation'](_0x199950,_0x50d49c,_0xa73900),_0x3ab3ae[_0x19ec6d(0x848)]&&_0xb245a6['setWaitMode'](_0x19ec6d(0x36d));}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x494),_0x153efc=>{const _0xaa5927=_0x5bbf40;if(!SceneManager[_0xaa5927(0x277)]())return;VisuMZ['ConvertParams'](_0x153efc,_0x153efc);const _0x526a57=$gameTemp[_0xaa5927(0x9c4)](),_0x4e0bdb=VisuMZ['CreateActionSequenceTargets'](_0x153efc['Targets']),_0x52b8ad=_0x153efc[_0xaa5927(0x1f5)];let _0x31d9dd=0x0;switch(_0x52b8ad[_0xaa5927(0x6ca)]()[_0xaa5927(0x86c)]()){case'!':case _0xaa5927(0x5a8):_0x31d9dd=0x1;break;case'?':case _0xaa5927(0x7a9):_0x31d9dd=0x2;break;case _0xaa5927(0x8b8):case _0xaa5927(0x492):case _0xaa5927(0x46f):case'MUSIC-NOTE':case _0xaa5927(0x9c0):_0x31d9dd=0x3;break;case _0xaa5927(0x742):case _0xaa5927(0x85c):_0x31d9dd=0x4;break;case'ANGLE':case _0xaa5927(0x5e9):_0x31d9dd=0x5;break;case _0xaa5927(0x7a0):_0x31d9dd=0x6;break;case'COBWEB':case'ANNOYED':case _0xaa5927(0x84d):_0x31d9dd=0x7;break;case'SILENCE':case _0xaa5927(0xad9):_0x31d9dd=0x8;break;case _0xaa5927(0x2ad):case _0xaa5927(0xb04):case _0xaa5927(0x373):case _0xaa5927(0x3b1):case'LIGHTBULB':_0x31d9dd=0x9;break;case'Z':case'ZZ':case _0xaa5927(0x691):case'SLEEP':_0x31d9dd=0xa;break;case _0xaa5927(0x272):_0x31d9dd=0xb;break;case'USER-DEFINED\x202':_0x31d9dd=0xc;break;case _0xaa5927(0x238):_0x31d9dd=0xd;break;case _0xaa5927(0x7be):_0x31d9dd=0xe;break;case _0xaa5927(0x5ee):_0x31d9dd=0xf;break;}for(const _0x2d20ee of _0x4e0bdb){if(!_0x2d20ee)continue;$gameTemp[_0xaa5927(0x8a1)](_0x2d20ee,_0x31d9dd);}_0x153efc['WaitComplete']&&_0x526a57&&(_0x526a57['wait'](0x1),_0x526a57['setWaitMode'](_0xaa5927(0x4db)));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xa81),_0x56f8bb=>{const _0xec2a0d=_0x5bbf40;if(!SceneManager[_0xec2a0d(0x277)]())return;if(!Imported[_0xec2a0d(0x58a)])return;VisuMZ[_0xec2a0d(0x2c2)](_0x56f8bb,_0x56f8bb);const _0x33ccb1=$gameTemp[_0xec2a0d(0x9c4)](),_0x39794f=VisuMZ[_0xec2a0d(0xae5)](_0x56f8bb[_0xec2a0d(0x3f1)]),_0x47fea7=_0x56f8bb[_0xec2a0d(0x8f1)];for(const _0x217075 of _0x39794f){if(!_0x217075)continue;$gameTemp['requestBattleBalloon'](_0x217075,[_0x47fea7]);}_0x56f8bb[_0xec2a0d(0x5ce)]&&_0x33ccb1&&(_0x33ccb1['wait'](0x1),_0x33ccb1[_0xec2a0d(0x61b)](_0xec2a0d(0x4db)));}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x4a1),_0x1a3045=>{const _0x2a4b61=_0x5bbf40;if(!SceneManager[_0x2a4b61(0x277)]())return;if(!Imported[_0x2a4b61(0x58a)])return;VisuMZ['ConvertParams'](_0x1a3045,_0x1a3045);const _0x3b9279=$gameTemp[_0x2a4b61(0x9c4)](),_0x2d02e2=VisuMZ[_0x2a4b61(0xae5)](_0x1a3045[_0x2a4b61(0x3f1)]),_0x25013e=Math['min'](Number(_0x1a3045[_0x2a4b61(0x245)]||0x0),Number(_0x1a3045[_0x2a4b61(0x945)]||0x0)),_0x448315=Math[_0x2a4b61(0xb10)](Number(_0x1a3045[_0x2a4b61(0x245)]||0x0),Number(_0x1a3045[_0x2a4b61(0x945)]||0x0)),_0x1e31f3=[];for(let _0x19a8ea=_0x25013e;_0x19a8ea<=_0x448315;_0x19a8ea++){_0x1e31f3[_0x2a4b61(0x9cb)](_0x19a8ea);}for(const _0x29fa93 of _0x2d02e2){if(!_0x29fa93)continue;$gameTemp[_0x2a4b61(0x8a1)](_0x29fa93,_0x1e31f3);}_0x1a3045[_0x2a4b61(0x5ce)]&&_0x3b9279&&(_0x3b9279['wait'](0x1),_0x3b9279[_0x2a4b61(0x61b)](_0x2a4b61(0x4db)));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x4aa),_0x3c55eb=>{const _0x1d8077=_0x5bbf40;if(!SceneManager[_0x1d8077(0x277)]())return;if(!Imported[_0x1d8077(0x58a)])return;VisuMZ[_0x1d8077(0x2c2)](_0x3c55eb,_0x3c55eb);const _0x3a6e67=$gameTemp['getLastPluginCommandInterpreter'](),_0x5c976b=VisuMZ[_0x1d8077(0xae5)](_0x3c55eb['Targets']),_0x34acd3=_0x3c55eb[_0x1d8077(0x398)];for(const _0x844806 of _0x5c976b){if(!_0x844806)continue;$gameTemp[_0x1d8077(0x8a1)](_0x844806,_0x34acd3);}_0x3c55eb[_0x1d8077(0x5ce)]&&_0x3a6e67&&(_0x3a6e67[_0x1d8077(0x7f0)](0x1),_0x3a6e67[_0x1d8077(0x61b)](_0x1d8077(0x4db)));}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x2fa),_0x4362c9=>{const _0x53d765=_0x5bbf40;if(!SceneManager[_0x53d765(0x277)]())return;VisuMZ[_0x53d765(0x2c2)](_0x4362c9,_0x4362c9);const _0x59b521=$gameTemp[_0x53d765(0x9c4)](),_0x24035e=BattleManager[_0x53d765(0x866)],_0x10bb56=_0x4362c9['Mirror'],_0xc8d1f5=VisuMZ[_0x53d765(0xae5)](_0x4362c9[_0x53d765(0x3f1)]);if(!_0x59b521||!_0x24035e)return;if(!_0x24035e[_0x53d765(0x92e)]())return;for(const _0x629a17 of _0xc8d1f5){if(!_0x629a17)continue;_0x629a17[_0x53d765(0x5b4)](_0x24035e,_0x10bb56);}if(_0x4362c9[_0x53d765(0x848)])_0x59b521[_0x53d765(0x61b)](_0x53d765(0x36d));}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xb56),_0x4f367d=>{const _0x29daed=_0x5bbf40;VisuMZ[_0x29daed(0x2c2)](_0x4f367d,_0x4f367d);const _0x1c676c=$gameTemp['getLastPluginCommandInterpreter'](),_0x5957e6=VisuMZ['CreateActionSequenceTargets'](_0x4f367d['Targets']),_0x9985d=_0x4f367d[_0x29daed(0xb9a)];if(!_0x9985d)return;for(const _0x570f64 of _0x5957e6){if(!_0x570f64)continue;if(!_0x570f64[_0x29daed(0xa32)]())continue;_0x570f64[_0x29daed(0xb6e)](_0x9985d);}}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x47b),_0x534ccf=>{const _0x36931e=_0x5bbf40;if(!SceneManager[_0x36931e(0x277)]())return;VisuMZ[_0x36931e(0x2c2)](_0x534ccf,_0x534ccf);const _0x5b18b6=$gameTemp[_0x36931e(0x9c4)](),_0x5242b5=BattleManager[_0x36931e(0xb88)],_0x368081=VisuMZ['CreateActionSequenceTargets'](_0x534ccf['Targets']),_0x584ca0=_0x534ccf[_0x36931e(0x78c)];if(!_0x5b18b6||!_0x5242b5)return;const _0x3c09a7=$dataSkilles[_0x5242b5[_0x36931e(0x3e2)]()],_0x5aa71e=_0x3c09a7['animationId'];$gameTemp[_0x36931e(0x7a4)](_0x368081,_0x5aa71e,_0x584ca0),_0x534ccf[_0x36931e(0x848)]&&_0x5b18b6[_0x36931e(0x61b)](_0x36931e(0x36d));}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x9b6),_0x257b6b=>{const _0x981e24=_0x5bbf40;if(!SceneManager[_0x981e24(0x277)]())return;VisuMZ[_0x981e24(0x2c2)](_0x257b6b,_0x257b6b);const _0x628e6b=$gameTemp['getLastPluginCommandInterpreter'](),_0x49a5f7=VisuMZ[_0x981e24(0xae5)](_0x257b6b[_0x981e24(0x3f1)]),_0x46b36e=Number(_0x257b6b['ItemID']||0x1),_0x300f3c=$dataItems[_0x46b36e],_0x24901e=_0x257b6b['Mirror'];if(!_0x628e6b)return;if(!_0x300f3c)return;let _0x1411a6=_0x300f3c[_0x981e24(0x471)];$gameTemp[_0x981e24(0x7a4)](_0x49a5f7,_0x1411a6,_0x24901e),_0x257b6b[_0x981e24(0x848)]&&_0x628e6b['setWaitMode'](_0x981e24(0x36d));}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x4c6),_0xb30c84=>{const _0x1cde9b=_0x5bbf40;if(!SceneManager[_0x1cde9b(0x2f2)])return;if(!SceneManager['_scene'][_0x1cde9b(0x3c3)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ[_0x1cde9b(0x2c2)](_0xb30c84,_0xb30c84);const _0x3c2957=$gameTemp[_0x1cde9b(0x9c4)](),_0x1ddacf=Math[_0x1cde9b(0x6ea)](_0xb30c84['pointX']),_0x4a9a83=Math[_0x1cde9b(0x6ea)](_0xb30c84[_0x1cde9b(0x229)]);$gameTemp[_0x1cde9b(0x3da)](_0x1ddacf,_0x4a9a83,_0xb30c84[_0x1cde9b(0x384)],_0xb30c84[_0x1cde9b(0x78c)],_0xb30c84[_0x1cde9b(0x746)]),_0xb30c84[_0x1cde9b(0x5ce)]&&_0x3c2957&&(SceneManager[_0x1cde9b(0x2f2)][_0x1cde9b(0x3c3)][_0x1cde9b(0x7ac)](),_0x3c2957[_0x1cde9b(0x61b)](_0x1cde9b(0x36d)));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x79d),_0x1ae4c8=>{const _0x3ceb5a=_0x5bbf40;if(!SceneManager[_0x3ceb5a(0x277)]())return;VisuMZ[_0x3ceb5a(0x2c2)](_0x1ae4c8,_0x1ae4c8);const _0x3603d4=$gameTemp[_0x3ceb5a(0x9c4)](),_0x401413=VisuMZ[_0x3ceb5a(0xae5)](_0x1ae4c8[_0x3ceb5a(0x3f1)]),_0x1f26ce=_0x1ae4c8[_0x3ceb5a(0x384)],_0x49a5cd=_0x1ae4c8[_0x3ceb5a(0x78c)];if(!_0x3603d4)return;$gameTemp[_0x3ceb5a(0x7a4)](_0x401413,_0x1f26ce,_0x49a5cd);if(_0x1ae4c8[_0x3ceb5a(0x848)])_0x3603d4[_0x3ceb5a(0x61b)]('battleAnimation');}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x78d),_0x22b5d9=>{const _0xb2f485=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xb2f485(0x2c2)](_0x22b5d9,_0x22b5d9);const _0x15f239=$gameTemp[_0xb2f485(0x9c4)](),_0x95782f=VisuMZ['CreateActionSequenceTargets'](_0x22b5d9[_0xb2f485(0x3f1)]),_0x514366=Number(_0x22b5d9[_0xb2f485(0x384)])||0x1,_0x10d65a=_0x22b5d9[_0xb2f485(0x78c)];if(!_0x15f239)return;$gameTemp[_0xb2f485(0x7a4)](_0x95782f,_0x514366,_0x10d65a);if(_0x22b5d9[_0xb2f485(0x848)])_0x15f239[_0xb2f485(0x61b)](_0xb2f485(0x36d));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x658),_0x12090c=>{const _0x217748=_0x5bbf40;if(!SceneManager[_0x217748(0x277)]())return;VisuMZ['ConvertParams'](_0x12090c,_0x12090c);const _0x2bace9=$gameTemp[_0x217748(0x9c4)](),_0x3fe5c8=VisuMZ[_0x217748(0xae5)](_0x12090c[_0x217748(0x3f1)]),_0x5cf9e8=Number(_0x12090c[_0x217748(0x992)]||0x1),_0x4e02c9=$dataSkills[_0x5cf9e8],_0x3d1d2f=_0x12090c[_0x217748(0x78c)];if(!_0x2bace9)return;if(!_0x4e02c9)return;let _0x53455c=_0x4e02c9[_0x217748(0x471)];$gameTemp['requestAnimation'](_0x3fe5c8,_0x53455c,_0x3d1d2f),_0x12090c[_0x217748(0x848)]&&_0x2bace9[_0x217748(0x61b)](_0x217748(0x36d));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Animation_WaitForAnimation',_0x5442f9=>{const _0x241718=_0x5bbf40;if(!SceneManager[_0x241718(0x277)]())return;const _0x479600=$gameTemp[_0x241718(0x9c4)]();if(!_0x479600)return;_0x479600[_0x241718(0x61b)](_0x241718(0x36d));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x720),_0xb2731f=>{const _0x44970a=_0x5bbf40;if(!SceneManager[_0x44970a(0x277)]())return;VisuMZ[_0x44970a(0x2c2)](_0xb2731f,_0xb2731f);const _0x4c05da=BattleManager[_0x44970a(0x9e4)],_0xeb5e01=_0xb2731f[_0x44970a(0xad6)]&&Imported[_0x44970a(0x5b5)];_0x4c05da[_0x44970a(0x770)](_0xb2731f['Text']),_0xeb5e01&&Imported[_0x44970a(0x5b5)]&&$gameSystem[_0x44970a(0x409)](_0xb2731f[_0x44970a(0x507)]||'',_0xb2731f[_0x44970a(0xbde)]||0x0);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x8e9),_0x4fa057=>{const _0x126d41=_0x5bbf40;if(!SceneManager[_0x126d41(0x277)]())return;const _0x2d6617=BattleManager[_0x126d41(0x9e4)];_0x2d6617[_0x126d41(0x8cb)]();}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_BattleLog_DisplayAction',_0x217c65=>{const _0x2d6d90=_0x5bbf40;if(!SceneManager[_0x2d6d90(0x277)]())return;const _0x4e1cec=$gameTemp[_0x2d6d90(0x9c4)](),_0x1ac3ad=BattleManager[_0x2d6d90(0x866)],_0x3a9613=BattleManager['_subject'],_0x135d41=BattleManager[_0x2d6d90(0x9e4)];if(!_0x4e1cec||!_0x1ac3ad||!_0x3a9613)return;if(!_0x1ac3ad['item']())return;_0x135d41[_0x2d6d90(0x798)](_0x3a9613,_0x1ac3ad[_0x2d6d90(0x92e)]()),_0x4e1cec[_0x2d6d90(0x61b)]('battlelog');}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x730),_0x528eaf=>{const _0x203446=_0x5bbf40;if(!SceneManager[_0x203446(0x277)]())return;const _0xe425c4=BattleManager[_0x203446(0x9e4)];_0xe425c4[_0x203446(0x480)]();}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],'ActSeq_BattleLog_PushBaseLine',_0x1e8ca2=>{const _0x1f8139=_0x5bbf40;if(!SceneManager[_0x1f8139(0x277)]())return;const _0x329b50=BattleManager[_0x1f8139(0x9e4)];_0x329b50[_0x1f8139(0xa45)]();}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x891),_0x4a6146=>{const _0x7438ac=_0x5bbf40;if(!SceneManager[_0x7438ac(0x277)]())return;const _0x5ba06b=BattleManager[_0x7438ac(0x9e4)];_0x5ba06b[_0x7438ac(0x82f)]();}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_BattleLog_UI',_0x4b6627=>{const _0x346eed=_0x5bbf40;if(!SceneManager[_0x346eed(0x277)]())return;VisuMZ['ConvertParams'](_0x4b6627,_0x4b6627),SceneManager[_0x346eed(0x2f2)][_0x346eed(0x30a)](_0x4b6627[_0x346eed(0x5c8)]);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xa7b),_0x759bc1=>{const _0x595377=_0x5bbf40;if(!SceneManager[_0x595377(0x277)]())return;const _0x3fd578=$gameTemp[_0x595377(0x9c4)]();_0x3fd578[_0x595377(0x61b)](_0x595377(0xb41));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_BattleLog_WaitForNewLine',_0x3c7b41=>{const _0x44a5d0=_0x5bbf40;if(!SceneManager[_0x44a5d0(0x277)]())return;const _0x1e9e75=$gameTemp[_0x44a5d0(0x9c4)](),_0x3c07b9=BattleManager[_0x44a5d0(0x9e4)];_0x3c07b9['waitForNewLine'](),_0x1e9e75['setWaitMode'](_0x44a5d0(0xb41));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Camera_Clamp',_0x1c0243=>{const _0x284bcb=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x284bcb(0x846)])return;VisuMZ[_0x284bcb(0x2c2)](_0x1c0243,_0x1c0243);const _0x593687=$gameScreen[_0x284bcb(0x66e)]();_0x593687[_0x284bcb(0x912)]=_0x1c0243[_0x284bcb(0x8c0)];}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Camera_FocusPoint',_0x868b5=>{const _0x1ec2bf=_0x5bbf40;if(!SceneManager[_0x1ec2bf(0x277)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x1ec2bf(0x2c2)](_0x868b5,_0x868b5);const _0x22a602=$gameTemp[_0x1ec2bf(0x9c4)](),_0x2a1615=_0x868b5[_0x1ec2bf(0x677)];$gameScreen[_0x1ec2bf(0xbcd)](_0x868b5['FocusX'],_0x868b5[_0x1ec2bf(0x943)],_0x868b5[_0x1ec2bf(0x2f0)],_0x868b5[_0x1ec2bf(0x5a4)]);if(_0x2a1615)_0x22a602['setWaitMode'](_0x1ec2bf(0x5b9));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x6cb),_0x381733=>{const _0x37a4ea=_0x5bbf40;if(!SceneManager[_0x37a4ea(0x277)]())return;if(!Imported[_0x37a4ea(0x846)])return;VisuMZ['ConvertParams'](_0x381733,_0x381733);const _0x445b9a=$gameTemp[_0x37a4ea(0x9c4)](),_0x15d892=VisuMZ[_0x37a4ea(0xae5)](_0x381733['Targets']),_0x57862d=_0x381733['WaitForCamera'];$gameScreen['setBattleCameraTargets'](_0x15d892,_0x381733[_0x37a4ea(0x2f0)],_0x381733[_0x37a4ea(0x5a4)]);if(_0x57862d)_0x445b9a['setWaitMode'](_0x37a4ea(0x5b9));}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Camera_Offset',_0x1f4a5a=>{const _0x145c4e=_0x5bbf40;if(!SceneManager[_0x145c4e(0x277)]())return;if(!Imported[_0x145c4e(0x846)])return;VisuMZ[_0x145c4e(0x2c2)](_0x1f4a5a,_0x1f4a5a);const _0xa855a=$gameTemp[_0x145c4e(0x9c4)](),_0x26f5a1=_0x1f4a5a[_0x145c4e(0x677)];$gameScreen[_0x145c4e(0x890)](_0x1f4a5a[_0x145c4e(0x294)],_0x1f4a5a[_0x145c4e(0x41b)],_0x1f4a5a[_0x145c4e(0x2f0)],_0x1f4a5a[_0x145c4e(0x5a4)]);if(_0x26f5a1)_0xa855a[_0x145c4e(0x61b)](_0x145c4e(0x5b9));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xa36),_0x1750f4=>{const _0x46f759=_0x5bbf40;if(!SceneManager[_0x46f759(0x277)]())return;if(!Imported[_0x46f759(0x846)])return;VisuMZ[_0x46f759(0x2c2)](_0x1750f4,_0x1750f4);const _0x490a32=$gameTemp[_0x46f759(0x9c4)](),_0x3ac0bc=_0x1750f4['ResetFocus'],_0x18b574=_0x1750f4[_0x46f759(0x304)],_0x170ea0=_0x1750f4['WaitForCamera'];if(_0x3ac0bc){const _0x20fe78=Math[_0x46f759(0x6ea)](Graphics['width']/0x2),_0x4a4b1=Math[_0x46f759(0x6ea)](Graphics[_0x46f759(0x570)]/0x2);$gameScreen[_0x46f759(0xbcd)](_0x20fe78,_0x4a4b1,_0x1750f4[_0x46f759(0x2f0)],_0x1750f4[_0x46f759(0x5a4)]);}_0x18b574&&$gameScreen[_0x46f759(0x890)](0x0,0x0,_0x1750f4['Duration'],_0x1750f4[_0x46f759(0x5a4)]);if(_0x170ea0)_0x490a32[_0x46f759(0x61b)]('battleCamera');}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Camera_WaitForCamera',_0x507a4b=>{const _0x30d259=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x17fc2a=$gameTemp[_0x30d259(0x9c4)]();if(!_0x17fc2a)return;_0x17fc2a[_0x30d259(0x61b)](_0x30d259(0x5b9));}),VisuMZ[_0x5bbf40(0x7d9)]['CreateCutinSettings']=function(_0x2879cb){const _0x4b1c87=_0x5bbf40;_0x2879cb['portraitFilename']='';const _0x20e517=VisuMZ['VisualCutinEffect']['CreateCutinSettings'](_0x2879cb),_0x512ef2=VisuMZ[_0x4b1c87(0xae5)](_0x2879cb[_0x4b1c87(0x3f1)])[0x0]||null;return _0x512ef2&&(_0x20e517['portraitFilename']=_0x512ef2[_0x4b1c87(0x601)](),_0x20e517[_0x4b1c87(0x432)]=_0x512ef2[_0x4b1c87(0x9ff)](),_0x20e517[_0x4b1c87(0x612)]=_0x512ef2[_0x4b1c87(0x8c5)](),_0x20e517['portraitType']=_0x512ef2[_0x4b1c87(0x93c)](),_0x512ef2[_0x4b1c87(0x37d)]()&&(_0x512ef2[_0x4b1c87(0x7d5)]()&&(_0x20e517[_0x4b1c87(0x40d)]=!_0x20e517[_0x4b1c87(0x40d)]),_0x512ef2[_0x4b1c87(0xa2d)]()&&(_0x20e517[_0x4b1c87(0x58c)]=!_0x20e517[_0x4b1c87(0x58c)]),_0x20e517['portraitType']===_0x4b1c87(0x8e2)&&(_0x20e517[_0x4b1c87(0x40d)]=!_0x20e517[_0x4b1c87(0x40d)]),_0x2879cb['ExtraSettings'][_0x4b1c87(0x412)]&&(_0x20e517[_0x4b1c87(0x536)]*=-0x1),_0x2879cb[_0x4b1c87(0xb8b)]['parallaxScrollYinvertEnemy']&&(_0x20e517[_0x4b1c87(0x59d)]*=-0x1),_0x20e517['parallaxHue']+=_0x2879cb[_0x4b1c87(0xb8b)]['parallaxHueEnemyModifier']??0x0)),_0x20e517;},PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x89f),_0x34206d=>{const _0x45c6d4=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x45c6d4(0x358)])return;VisuMZ['ConvertParams'](_0x34206d,_0x34206d);const _0x437bc1=VisuMZ[_0x45c6d4(0x7d9)]['CreateCutinSettings'](_0x34206d);SceneManager['_scene'][_0x45c6d4(0x81a)](_0x437bc1);const _0x5c9a32=$gameTemp['getLastPluginCommandInterpreter']();_0x5c9a32&&_0x34206d[_0x45c6d4(0x21a)]&&_0x5c9a32[_0x45c6d4(0x61b)](_0x45c6d4(0x721));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Cutin_EndVisualCutinEffectAll',_0x36cf89=>{const _0x25916b=_0x5bbf40;if(!SceneManager[_0x25916b(0x277)]())return;if(!Imported[_0x25916b(0x358)])return;VisuMZ[_0x25916b(0x2c2)](_0x36cf89,_0x36cf89),SceneManager['_scene']['clearAllVisualCutins']();const _0x460ed7=$gameTemp[_0x25916b(0x9c4)]();_0x460ed7&&_0x36cf89[_0x25916b(0x34e)]&&_0x460ed7[_0x25916b(0x61b)](_0x25916b(0xb60));}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],'ActSeq_Cutin_EndVisualCutinEffectType',_0x486687=>{const _0x4729b6=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ['ConvertParams'](_0x486687,_0x486687);const _0x1f9d37=_0x486687[_0x4729b6(0x769)]['toLowerCase']()[_0x4729b6(0x86c)]();SceneManager[_0x4729b6(0x2f2)][_0x4729b6(0x7d6)](_0x1f9d37);const _0x90928d=$gameTemp['getLastPluginCommandInterpreter']();_0x90928d&&_0x486687[_0x4729b6(0x34e)]&&_0x90928d[_0x4729b6(0x61b)]('cutinExit');}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x5ba),_0x3b39e5=>{const _0x4ef948=_0x5bbf40;if(!SceneManager[_0x4ef948(0x277)]())return;if(!Imported[_0x4ef948(0x358)])return;const _0x169856=$gameTemp[_0x4ef948(0x9c4)]();_0x169856[_0x4ef948(0x61b)](_0x4ef948(0x721));}),PluginManager['registerCommand'](pluginData['name'],_0x5bbf40(0x77d),_0x4f00d8=>{const _0x3795d6=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3795d6(0x358)])return;const _0xebcdeb=$gameTemp[_0x3795d6(0x9c4)]();_0xebcdeb['setWaitMode'](_0x3795d6(0xb60));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_DB_DragonbonesMotionAni',_0x56abc1=>{const _0x426445=_0x5bbf40;if(!SceneManager[_0x426445(0x277)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x426445(0x2c2)](_0x56abc1,_0x56abc1);const _0x17861e=VisuMZ[_0x426445(0xae5)](_0x56abc1['Targets']),_0x32a67c=_0x56abc1['MotionAni']['toLowerCase']()[_0x426445(0x86c)]();for(const _0x4f8f33 of _0x17861e){if(!_0x4f8f33)continue;_0x4f8f33[_0x426445(0x556)](_0x32a67c);}}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xbd7),_0x24dbf3=>{const _0x590f0e=_0x5bbf40;if(!SceneManager[_0x590f0e(0x277)]())return;if(!Imported[_0x590f0e(0xbaa)])return;VisuMZ[_0x590f0e(0x2c2)](_0x24dbf3,_0x24dbf3);const _0xbe4ae4=VisuMZ[_0x590f0e(0xae5)](_0x24dbf3[_0x590f0e(0x3f1)]),_0x71d7fe=_0x24dbf3[_0x590f0e(0x388)];for(const _0x2ca230 of _0xbe4ae4){if(!_0x2ca230)continue;_0x2ca230[_0x590f0e(0x755)]()['timeScale']=_0x71d7fe;}}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x771),_0x573fc5=>{const _0x3c82e2=_0x5bbf40;if(!SceneManager[_0x3c82e2(0x277)]())return;if(!Imported[_0x3c82e2(0x3cf)])return;VisuMZ['ConvertParams'](_0x573fc5,_0x573fc5);const _0x333c85=BattleManager['_action'],_0xf5de2b=_0x573fc5['Elements'];if(!_0x333c85)return;_0x333c85[_0x3c82e2(0x62e)]=_0xf5de2b;}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x6c8),_0x119103=>{const _0x1191ed=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1191ed(0x3cf)])return;const _0x4b0220=BattleManager[_0x1191ed(0x866)];if(!_0x4b0220)return;_0x4b0220['clearElementChanges']();}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x633),_0x2143b0=>{const _0xf1dbd7=_0x5bbf40;if(!SceneManager[_0xf1dbd7(0x277)]())return;if(!Imported[_0xf1dbd7(0x3cf)])return;VisuMZ['ConvertParams'](_0x2143b0,_0x2143b0);const _0x43ea0b=BattleManager[_0xf1dbd7(0x866)],_0x3ab1d2=_0x2143b0[_0xf1dbd7(0x8e6)];if(!_0x43ea0b)return;_0x43ea0b[_0xf1dbd7(0x65b)]=_0x3ab1d2;}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x5fe),_0x3edd75=>{const _0x4d477e=_0x5bbf40;if(!SceneManager[_0x4d477e(0x277)]())return;if(!Imported[_0x4d477e(0x3cf)])return;const _0x582289=BattleManager[_0x4d477e(0x866)];if(!_0x582289)return;_0x582289[_0x4d477e(0x9d5)]=!![];}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x379),_0x11959d=>{const _0x1b8af0=_0x5bbf40;VisuMZ[_0x1b8af0(0x597)][_0x1b8af0(0x379)](_0x11959d);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xbb7),_0x1a9415=>{const _0x1d257c=_0x5bbf40;VisuMZ[_0x1d257c(0x597)][_0x1d257c(0xbb7)](_0x1a9415);}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x273),_0x39140f=>{const _0x4b696d=_0x5bbf40;VisuMZ[_0x4b696d(0x597)]['ActSeq_Grid_AddTriggerToNode'](_0x39140f);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x65f),_0x27ea01=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_AddTriggerToNode'](_0x27ea01);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x5a6),_0x4def67=>{const _0x56dd93=_0x5bbf40;VisuMZ[_0x56dd93(0x597)]['ActSeq_Grid_AnimationIDAtNode'](_0x4def67);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Grid_AnimationJsAtNode',_0x53477b=>{const _0x363d07=_0x5bbf40;VisuMZ['BattleGridSystem'][_0x363d07(0x7a5)](_0x53477b);}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0xa1b),_0x45c8de=>{const _0x328b35=_0x5bbf40;VisuMZ[_0x328b35(0x597)][_0x328b35(0xa1b)](_0x45c8de);}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x32d),_0x468484=>{const _0x260b56=_0x5bbf40;VisuMZ[_0x260b56(0x597)][_0x260b56(0x32d)](_0x468484);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x2a6),_0x856c32=>{const _0x506335=_0x5bbf40;VisuMZ[_0x506335(0x597)][_0x506335(0x2a6)](_0x856c32);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Grid_PullToTargetNode',_0x26bee3=>{const _0x503c73=_0x5bbf40;VisuMZ[_0x503c73(0x597)][_0x503c73(0x784)](_0x26bee3);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x76e),_0x23a7e8=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_PushFromTargetNode'](_0x23a7e8);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xb06),_0x22dc22=>{const _0x185828=_0x5bbf40;VisuMZ[_0x185828(0x597)][_0x185828(0xb06)](_0x22dc22);}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x919),_0xb3d788=>{const _0x1532ce=_0x5bbf40;VisuMZ[_0x1532ce(0x597)][_0x1532ce(0x919)](_0xb3d788);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x5ab),_0x538f2c=>{const _0x45e038=_0x5bbf40;VisuMZ['BattleGridSystem'][_0x45e038(0x5ab)](_0x538f2c);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Grid_TraverseToNode',_0x163314=>{const _0xd1d97=_0x5bbf40;VisuMZ[_0xd1d97(0x597)]['ActSeq_Grid_TraverseToNode'](_0x163314);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x6d3),_0x34a9c8=>{const _0x2307d1=_0x5bbf40;if(!Imported[_0x2307d1(0x928)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2307d1(0x2c2)](_0x34a9c8,_0x34a9c8);const _0x70809c=VisuMZ[_0x2307d1(0xae5)](_0x34a9c8[_0x2307d1(0x3f1)]);for(const _0x29f9be of _0x70809c){if(!_0x29f9be)continue;_0x29f9be[_0x2307d1(0x8d0)](_0x2307d1(0x96e)),_0x29f9be['removeHorrorEffect'](_0x2307d1(0x63b)),_0x29f9be[_0x2307d1(0x8d0)]('tv'),_0x29f9be['clearHorrorEffects']();}$gamePlayer[_0x2307d1(0x82f)]();}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Horror_GlitchCreate',_0x265db0=>{const _0x11ed3b=_0x5bbf40;if(!Imported[_0x11ed3b(0x928)])return;if(!SceneManager[_0x11ed3b(0x277)]())return;VisuMZ[_0x11ed3b(0x2c2)](_0x265db0,_0x265db0);const _0x13f204=VisuMZ[_0x11ed3b(0xae5)](_0x265db0['Targets']),_0x502ba1=_0x11ed3b(0x63b);_0x265db0['sliceMin']=Math[_0x11ed3b(0x95e)](_0x265db0[_0x11ed3b(0xb0e)]/0x2),_0x265db0[_0x11ed3b(0x451)]=_0x265db0[_0x11ed3b(0xb0e)],_0x265db0[_0x11ed3b(0x257)]=!![];for(const _0x51f486 of _0x13f204){if(!_0x51f486)continue;_0x51f486[_0x11ed3b(0x48e)](_0x502ba1,_0x265db0);}$gamePlayer[_0x11ed3b(0x82f)]();}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Horror_GlitchRemove',_0x205d2f=>{const _0x3440a7=_0x5bbf40;if(!Imported[_0x3440a7(0x928)])return;if(!SceneManager[_0x3440a7(0x277)]())return;VisuMZ[_0x3440a7(0x2c2)](_0x205d2f,_0x205d2f);const _0xce4618=VisuMZ[_0x3440a7(0xae5)](_0x205d2f[_0x3440a7(0x3f1)]);for(const _0x3f819b of _0xce4618){if(!_0x3f819b)continue;_0x3f819b[_0x3440a7(0x8d0)]('glitch');}$gamePlayer[_0x3440a7(0x82f)]();}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Horror_NoiseCreate',_0x45c083=>{const _0x30e4f1=_0x5bbf40;if(!Imported[_0x30e4f1(0x928)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x45c083,_0x45c083);const _0xd421a9=VisuMZ[_0x30e4f1(0xae5)](_0x45c083[_0x30e4f1(0x3f1)]),_0x30f490='noise';for(const _0xb32740 of _0xd421a9){if(!_0xb32740)continue;_0xb32740[_0x30e4f1(0x48e)](_0x30f490,_0x45c083);}$gamePlayer[_0x30e4f1(0x82f)]();}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Horror_NoiseRemove',_0x4ec482=>{const _0x5a6151=_0x5bbf40;if(!Imported[_0x5a6151(0x928)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5a6151(0x2c2)](_0x4ec482,_0x4ec482);const _0x1ec2b8=VisuMZ[_0x5a6151(0xae5)](_0x4ec482[_0x5a6151(0x3f1)]);for(const _0x3d9816 of _0x1ec2b8){if(!_0x3d9816)continue;_0x3d9816[_0x5a6151(0x8d0)](_0x5a6151(0x96e));}$gamePlayer[_0x5a6151(0x82f)]();}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x5e0),_0x3ddd87=>{const _0x330d31=_0x5bbf40;if(!Imported[_0x330d31(0x928)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3ddd87,_0x3ddd87);const _0x4cdb2c=VisuMZ[_0x330d31(0xae5)](_0x3ddd87['Targets']),_0x5e31df='tv';for(const _0x571ef8 of _0x4cdb2c){if(!_0x571ef8)continue;_0x571ef8[_0x330d31(0x48e)](_0x5e31df,_0x3ddd87);}$gamePlayer[_0x330d31(0x82f)]();}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Horror_TVRemove',_0x3ca495=>{const _0x49aa0a=_0x5bbf40;if(!Imported[_0x49aa0a(0x928)])return;if(!SceneManager[_0x49aa0a(0x277)]())return;VisuMZ['ConvertParams'](_0x3ca495,_0x3ca495);const _0x1279be=VisuMZ[_0x49aa0a(0xae5)](_0x3ca495[_0x49aa0a(0x3f1)]);for(const _0x2865e1 of _0x1279be){if(!_0x2865e1)continue;_0x2865e1[_0x49aa0a(0x8d0)]('tv');}$gamePlayer['refresh']();}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0xa4a),_0x12d7c4=>{const _0x9f3866=_0x5bbf40;if(!Imported[_0x9f3866(0x8a8)])return;const _0x41ed3e=SceneManager[_0x9f3866(0x2f2)][_0x9f3866(0x3c3)];if(!_0x41ed3e)return;if(VisuMZ[_0x9f3866(0x200)][_0x9f3866(0x77e)]<=1.04){alert(_0x9f3866(0x508)),SceneManager[_0x9f3866(0x593)]();return;}VisuMZ[_0x9f3866(0x2c2)](_0x12d7c4,_0x12d7c4);const _0x36b1ac=_0x12d7c4[_0x9f3866(0x5a3)];_0x41ed3e[_0x9f3866(0x485)](_0x36b1ac);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x8ad),_0x1c6511=>{const _0x2dd2b3=_0x5bbf40;if(!SceneManager[_0x2dd2b3(0x277)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x47c55b=SceneManager[_0x2dd2b3(0x2f2)]['_spriteset'];if(!_0x47c55b)return;VisuMZ[_0x2dd2b3(0x2c2)](_0x1c6511,_0x1c6511);const _0x55756a=_0x1c6511[_0x2dd2b3(0xb84)]||0x1,_0x46f7d2=_0x1c6511[_0x2dd2b3(0x2f0)]||0x1,_0x2e7e0d=_0x1c6511[_0x2dd2b3(0x5a4)]||_0x2dd2b3(0x54c);_0x47c55b[_0x2dd2b3(0xb8a)](_0x55756a,_0x46f7d2,_0x2e7e0d);}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x7a1),_0x541bd5=>{const _0x48ff54=_0x5bbf40;if(!Imported[_0x48ff54(0x8a8)])return;const _0x21cf9b=SceneManager[_0x48ff54(0x2f2)][_0x48ff54(0x3c3)];if(!_0x21cf9b)return;if(VisuMZ[_0x48ff54(0x200)]['version']<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x48ff54(0x2c2)](_0x541bd5,_0x541bd5);const _0x15c440=_0x541bd5['Enable'];_0x21cf9b['setupDesaturateImpactFilter'](_0x15c440);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Impact_MotionBlurScreen',_0x53d89c=>{const _0x162c27=_0x5bbf40;if(!SceneManager[_0x162c27(0x277)]())return;if(!Imported[_0x162c27(0x8a8)])return;const _0x3513ac=SceneManager['_scene'][_0x162c27(0x3c3)];if(!_0x3513ac)return;VisuMZ[_0x162c27(0x2c2)](_0x53d89c,_0x53d89c);const _0x593cea=Number(_0x53d89c[_0x162c27(0x7bd)])||0x0,_0x207f8c=Number(_0x53d89c[_0x162c27(0x70d)]),_0x3709b3=_0x53d89c['Duration']||0x1,_0x320290=_0x53d89c[_0x162c27(0x5a4)]||'Linear';_0x3513ac[_0x162c27(0x622)](_0x593cea,_0x207f8c,_0x3709b3,_0x320290);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x9b3),_0x2ea39c=>{const _0x1243e0=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1243e0(0x8a8)])return;const _0x2c1577=SceneManager[_0x1243e0(0x2f2)][_0x1243e0(0x3c3)];if(!_0x2c1577)return;VisuMZ['ConvertParams'](_0x2ea39c,_0x2ea39c);const _0x4a5dbd=Number(_0x2ea39c[_0x1243e0(0x7bd)])||0x0,_0x42f330=Number(_0x2ea39c[_0x1243e0(0x70d)]),_0x1557c0=_0x2ea39c[_0x1243e0(0x2f0)]||0x1,_0x1ea2f6=_0x2ea39c[_0x1243e0(0x5a4)]||_0x1243e0(0x54c),_0x2bd836=VisuMZ['CreateActionSequenceTargets'](_0x2ea39c[_0x1243e0(0x3f1)]);for(const _0x48e65c of _0x2bd836){if(!_0x48e65c)continue;if(!_0x48e65c[_0x1243e0(0xb3a)]())continue;_0x48e65c[_0x1243e0(0xb3a)]()[_0x1243e0(0x622)](_0x4a5dbd,_0x42f330,_0x1557c0,_0x1ea2f6);}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xbab),_0xce68d8=>{const _0x633eb9=_0x5bbf40;if(!SceneManager[_0x633eb9(0x277)]())return;if(!Imported[_0x633eb9(0x8a8)])return;VisuMZ[_0x633eb9(0x2c2)](_0xce68d8,_0xce68d8);const _0x3427e3={'delay':_0xce68d8['delay'],'duration':_0xce68d8[_0x633eb9(0x2c5)],'hue':_0xce68d8[_0x633eb9(0x365)],'opacityStart':_0xce68d8['opacityStart'],'tone':_0xce68d8[_0x633eb9(0x5f4)],'visible':!![]},_0x3c095f=VisuMZ[_0x633eb9(0xae5)](_0xce68d8['Targets']);for(const _0x14cb93 of _0x3c095f){if(!_0x14cb93)continue;_0x14cb93[_0x633eb9(0x6c6)](_0x3427e3);}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x270),_0x48d1b2=>{const _0x4de1aa=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4de1aa(0x8a8)])return;VisuMZ[_0x4de1aa(0x2c2)](_0x48d1b2,_0x48d1b2);const _0x171343=VisuMZ[_0x4de1aa(0xae5)](_0x48d1b2[_0x4de1aa(0x3f1)]);for(const _0x50d860 of _0x171343){if(!_0x50d860)continue;_0x50d860[_0x4de1aa(0x95f)]();}}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x314),_0x62d267=>{const _0x1703f7=_0x5bbf40;if(!Imported[_0x1703f7(0x8a8)])return;const _0x2f7d99=SceneManager['_scene'][_0x1703f7(0x3c3)];if(!_0x2f7d99)return;if(VisuMZ[_0x1703f7(0x200)][_0x1703f7(0x77e)]<=1.04){alert(_0x1703f7(0x508)),SceneManager[_0x1703f7(0x593)]();return;}VisuMZ[_0x1703f7(0x2c2)](_0x62d267,_0x62d267);const _0x5974ae=_0x62d267['Enable'];_0x2f7d99[_0x1703f7(0xb69)](_0x5974ae);}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Impact_Oversaturate',_0x1af175=>{const _0x591a7a=_0x5bbf40;if(!Imported[_0x591a7a(0x8a8)])return;const _0x17fd58=SceneManager[_0x591a7a(0x2f2)][_0x591a7a(0x3c3)];if(!_0x17fd58)return;if(VisuMZ['ActSeqImpact'][_0x591a7a(0x77e)]<=1.04){alert(_0x591a7a(0x508)),SceneManager[_0x591a7a(0x593)]();return;}VisuMZ[_0x591a7a(0x2c2)](_0x1af175,_0x1af175);const _0xdf8107=_0x1af175[_0x591a7a(0x5a3)];_0x17fd58[_0x591a7a(0xb0b)](_0xdf8107);}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],'ActSeq_Impact_ShockwavePoint',_0x21d545=>{const _0x1cc8ca=_0x5bbf40;if(!Imported[_0x1cc8ca(0x8a8)])return;const _0x16349e=SceneManager[_0x1cc8ca(0x2f2)][_0x1cc8ca(0x3c3)];if(!_0x16349e)return;VisuMZ[_0x1cc8ca(0x2c2)](_0x21d545,_0x21d545);const _0x544a19=_0x21d545['X']||0x0,_0x271191=_0x21d545['Y']||0x0,_0x4f9d3f=_0x21d545['Amp']||0x0,_0xc5484=_0x21d545['Wave']||0x0,_0xc5c02c=_0x21d545[_0x1cc8ca(0x2f0)]||0x1;_0x16349e['setupShockwaveImpactFilter'](_0x544a19,_0x271191,_0x4f9d3f,_0xc5484,_0xc5c02c);}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Impact_ShockwaveEachTargets',_0x627816=>{const _0x4b129e=_0x5bbf40;if(!SceneManager[_0x4b129e(0x277)]())return;if(!Imported[_0x4b129e(0x8a8)])return;const _0x2bf047=SceneManager[_0x4b129e(0x2f2)][_0x4b129e(0x3c3)];if(!_0x2bf047)return;VisuMZ[_0x4b129e(0x2c2)](_0x627816,_0x627816);const _0xad3944=VisuMZ['CreateActionSequenceTargets'](_0x627816[_0x4b129e(0x3f1)]),_0x4ed19b=_0x627816[_0x4b129e(0x99e)],_0x137e09=_0x627816[_0x4b129e(0x294)]||0x0,_0x36e199=_0x627816[_0x4b129e(0x41b)]||0x0,_0x558aa4=_0x627816[_0x4b129e(0x9b2)]||0x0,_0x2d7d55=_0x627816[_0x4b129e(0x255)]||0x0,_0x5ce80e=_0x627816[_0x4b129e(0x2f0)]||0x1;for(const _0x51052b of _0xad3944){if(!_0x51052b)continue;if(!_0x51052b['battler']())continue;const _0x3d0df1=_0x51052b[_0x4b129e(0xb3a)]();let _0x1eab52=_0x3d0df1[_0x4b129e(0x72f)],_0x237119=_0x3d0df1['_baseY'];_0x1eab52+=(Graphics['width']-Graphics[_0x4b129e(0x99d)])/0x2,_0x237119+=(Graphics[_0x4b129e(0x570)]-Graphics[_0x4b129e(0xa4b)])/0x2;if(_0x4ed19b['match'](/front/i))_0x1eab52+=(_0x51052b[_0x4b129e(0x37d)]()?0x1:-0x1)*_0x3d0df1[_0x4b129e(0x344)]()/0x2;else _0x4ed19b[_0x4b129e(0x24d)](/back/i)&&(_0x1eab52+=(_0x51052b[_0x4b129e(0x37d)]()?-0x1:0x1)*_0x3d0df1['mainSpriteWidth']()/0x2);if(_0x4ed19b[_0x4b129e(0x24d)](/head/i))_0x237119-=_0x3d0df1[_0x4b129e(0x3db)]();else _0x4ed19b['match'](/center/i)&&(_0x237119-=_0x3d0df1[_0x4b129e(0x3db)]()/0x2);_0x1eab52+=_0x137e09,_0x237119+=_0x36e199,_0x2bf047['setupShockwaveImpactFilter'](_0x1eab52,_0x237119,_0x558aa4,_0x2d7d55,_0x5ce80e);}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xbb5),_0x503897=>{const _0xadbe8a=_0x5bbf40;if(!SceneManager[_0xadbe8a(0x277)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x50415a=SceneManager[_0xadbe8a(0x2f2)][_0xadbe8a(0x3c3)];if(!_0x50415a)return;VisuMZ[_0xadbe8a(0x2c2)](_0x503897,_0x503897);const _0x3a6909=VisuMZ['CreateActionSequenceTargets'](_0x503897[_0xadbe8a(0x3f1)]),_0x3591ec=_0x503897['TargetLocation'],_0x3b2419=_0x503897[_0xadbe8a(0x294)]||0x0,_0x152beb=_0x503897[_0xadbe8a(0x41b)]||0x0,_0x943c8=_0x503897[_0xadbe8a(0x9b2)]||0x0,_0x364c11=_0x503897[_0xadbe8a(0x255)]||0x0,_0x500758=_0x503897[_0xadbe8a(0x2f0)]||0x1,_0x1dbfb7=Math['min'](..._0x3a6909[_0xadbe8a(0x6d6)](_0x117ede=>_0x117ede[_0xadbe8a(0xb3a)]()[_0xadbe8a(0x72f)]-_0x117ede[_0xadbe8a(0xb3a)]()[_0xadbe8a(0x344)]()/0x2)),_0x1137fe=Math[_0xadbe8a(0xb10)](..._0x3a6909[_0xadbe8a(0x6d6)](_0x381bab=>_0x381bab['battler']()[_0xadbe8a(0x72f)]+_0x381bab['battler']()[_0xadbe8a(0x344)]()/0x2)),_0x2892a2=Math[_0xadbe8a(0xaf8)](..._0x3a6909['map'](_0x87455b=>_0x87455b[_0xadbe8a(0xb3a)]()['_baseY']-_0x87455b[_0xadbe8a(0xb3a)]()[_0xadbe8a(0x3db)]())),_0x1e9d31=Math['max'](..._0x3a6909[_0xadbe8a(0x6d6)](_0x3d7686=>_0x3d7686[_0xadbe8a(0xb3a)]()[_0xadbe8a(0x4f3)])),_0x33d51e=_0x3a6909[_0xadbe8a(0xafb)](_0x4a7f0d=>_0x4a7f0d[_0xadbe8a(0xa32)]())[_0xadbe8a(0x348)],_0x2ee403=_0x3a6909[_0xadbe8a(0xafb)](_0x398ba4=>_0x398ba4[_0xadbe8a(0x37d)]())[_0xadbe8a(0x348)];let _0x39ccfa=0x0,_0x1ff756=0x0;if(_0x3591ec[_0xadbe8a(0x24d)](/front/i))_0x39ccfa=_0x33d51e>=_0x2ee403?_0x1dbfb7:_0x1137fe;else{if(_0x3591ec[_0xadbe8a(0x24d)](/middle/i))_0x39ccfa=(_0x1dbfb7+_0x1137fe)/0x2,melee=-0x1;else _0x3591ec[_0xadbe8a(0x24d)](/back/i)&&(_0x39ccfa=_0x33d51e>=_0x2ee403?_0x1137fe:_0x1dbfb7);}if(_0x3591ec['match'](/head/i))_0x1ff756=_0x2892a2;else{if(_0x3591ec[_0xadbe8a(0x24d)](/center/i))_0x1ff756=(_0x2892a2+_0x1e9d31)/0x2;else _0x3591ec[_0xadbe8a(0x24d)](/base/i)&&(_0x1ff756=_0x1e9d31);}_0x39ccfa+=(Graphics['width']-Graphics[_0xadbe8a(0x99d)])/0x2,_0x1ff756+=(Graphics[_0xadbe8a(0x570)]-Graphics[_0xadbe8a(0xa4b)])/0x2,_0x39ccfa+=_0x3b2419,_0x1ff756+=_0x152beb,_0x50415a[_0xadbe8a(0x631)](_0x39ccfa,_0x1ff756,_0x943c8,_0x364c11,_0x500758);}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x403),_0x1d9d28=>{const _0x31c4=_0x5bbf40;if(!Imported[_0x31c4(0x8a8)])return;const _0x50750d=SceneManager[_0x31c4(0x2f2)][_0x31c4(0x3c3)];if(!_0x50750d)return;if(VisuMZ[_0x31c4(0x200)][_0x31c4(0x77e)]<=1.04){alert(_0x31c4(0x508)),SceneManager['exit']();return;}VisuMZ[_0x31c4(0x2c2)](_0x1d9d28,_0x1d9d28);const _0x57165c=$gameTemp[_0x31c4(0x9c4)](),_0x4e0b8f=Math[_0x31c4(0xb10)](0.01,_0x1d9d28[_0x31c4(0x756)]);$gameTemp[_0x31c4(0x8f2)](_0x4e0b8f,_0x57165c);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x4ce),_0x3b33b3=>{const _0x469e94=_0x5bbf40;if(!Imported[_0x469e94(0x8a8)])return;const _0x319a1f=SceneManager[_0x469e94(0x2f2)][_0x469e94(0x3c3)];if(!_0x319a1f)return;if(VisuMZ['ActSeqImpact'][_0x469e94(0x77e)]<=1.04){alert(_0x469e94(0x508)),SceneManager['exit']();return;}VisuMZ[_0x469e94(0x2c2)](_0x3b33b3,_0x3b33b3);const _0x38ed46=$gameTemp[_0x469e94(0x9c4)](),_0x48662c=_0x3b33b3['ms']||0x1;VisuMZ['ActSeqImpact'][_0x469e94(0x29a)](_0x48662c,_0x38ed46);}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Impact_ZoomBlurPoint',_0x507a85=>{const _0x2baea1=_0x5bbf40;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3c673b=SceneManager[_0x2baea1(0x2f2)][_0x2baea1(0x3c3)];if(!_0x3c673b)return;VisuMZ['ConvertParams'](_0x507a85,_0x507a85);const _0x27f693=_0x507a85['X']||0x0,_0x2674f1=_0x507a85['Y']||0x0,_0x4d95e9=_0x507a85[_0x2baea1(0x227)]||0x0,_0x10e9aa=_0x507a85[_0x2baea1(0xa35)]||0x0,_0x2a10c9=_0x507a85[_0x2baea1(0x2f0)]||0x1,_0x3a95a6=_0x507a85[_0x2baea1(0x5a4)]||'Linear';_0x3c673b['setupZoomBlurImpactFilter'](_0x4d95e9,_0x27f693,_0x2674f1,_0x10e9aa,_0x2a10c9,_0x3a95a6);}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x43d),_0x3dbd05=>{const _0x11341d=_0x5bbf40;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1a502d=SceneManager[_0x11341d(0x2f2)][_0x11341d(0x3c3)];if(!_0x1a502d)return;VisuMZ[_0x11341d(0x2c2)](_0x3dbd05,_0x3dbd05);const _0x327de8=VisuMZ[_0x11341d(0xae5)](_0x3dbd05[_0x11341d(0x3f1)]),_0x574242=_0x3dbd05['TargetLocation'],_0x33dade=_0x3dbd05[_0x11341d(0x294)]||0x0,_0x2b651d=_0x3dbd05['OffsetY']||0x0,_0x1a8124=_0x3dbd05[_0x11341d(0x227)]||0x0,_0x10792f=_0x3dbd05[_0x11341d(0xa35)]||0x0,_0x5cff11=_0x3dbd05[_0x11341d(0x2f0)]||0x1,_0x9c9057=_0x3dbd05['EasingType']||'Linear',_0x3bae1b=Math[_0x11341d(0xaf8)](..._0x327de8[_0x11341d(0x6d6)](_0x5d2d68=>_0x5d2d68[_0x11341d(0xb3a)]()[_0x11341d(0x72f)]-_0x5d2d68['battler']()[_0x11341d(0x344)]()/0x2)),_0x419cb1=Math[_0x11341d(0xb10)](..._0x327de8['map'](_0x79e956=>_0x79e956['battler']()[_0x11341d(0x72f)]+_0x79e956[_0x11341d(0xb3a)]()['mainSpriteWidth']()/0x2)),_0x384967=Math[_0x11341d(0xaf8)](..._0x327de8['map'](_0x586597=>_0x586597[_0x11341d(0xb3a)]()[_0x11341d(0x4f3)]-_0x586597[_0x11341d(0xb3a)]()[_0x11341d(0x3db)]())),_0x1eef63=Math['max'](..._0x327de8[_0x11341d(0x6d6)](_0x58a4d5=>_0x58a4d5[_0x11341d(0xb3a)]()[_0x11341d(0x4f3)])),_0x4e57d5=_0x327de8[_0x11341d(0xafb)](_0xea01d9=>_0xea01d9[_0x11341d(0xa32)]())[_0x11341d(0x348)],_0x1eff28=_0x327de8[_0x11341d(0xafb)](_0x30f407=>_0x30f407['isEnemy']())[_0x11341d(0x348)];let _0x5bb200=0x0,_0x4e481c=0x0;if(_0x574242['match'](/front/i))_0x5bb200=_0x4e57d5>=_0x1eff28?_0x3bae1b:_0x419cb1;else{if(_0x574242[_0x11341d(0x24d)](/middle/i))_0x5bb200=(_0x3bae1b+_0x419cb1)/0x2,melee=-0x1;else _0x574242[_0x11341d(0x24d)](/back/i)&&(_0x5bb200=_0x4e57d5>=_0x1eff28?_0x419cb1:_0x3bae1b);}if(_0x574242[_0x11341d(0x24d)](/head/i))_0x4e481c=_0x384967;else{if(_0x574242[_0x11341d(0x24d)](/center/i))_0x4e481c=(_0x384967+_0x1eef63)/0x2;else _0x574242[_0x11341d(0x24d)](/base/i)&&(_0x4e481c=_0x1eef63);}_0x5bb200+=(Graphics['width']-Graphics[_0x11341d(0x99d)])/0x2,_0x4e481c+=(Graphics[_0x11341d(0x570)]-Graphics[_0x11341d(0xa4b)])/0x2,_0x5bb200+=_0x33dade,_0x4e481c+=_0x2b651d,_0x1a502d[_0x11341d(0xaed)](_0x1a8124,_0x5bb200,_0x4e481c,_0x10792f,_0x5cff11,_0x9c9057);}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],'ActSeq_Inject_AnimationStart',_0x6fdb88=>{const _0x525224=_0x5bbf40;if(!Imported[_0x525224(0x8a8)])return;const _0x1c87a2=SceneManager[_0x525224(0x2f2)][_0x525224(0x3c3)];if(!_0x1c87a2)return;if(VisuMZ[_0x525224(0x200)]['version']<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x525224(0x593)]();return;}VisuMZ['ConvertParams'](_0x6fdb88,_0x6fdb88);const _0x2e27d9=VisuMZ[_0x525224(0xae5)](_0x6fdb88[_0x525224(0x3f1)]),_0x3f5833={'filename':_0x6fdb88[_0x525224(0xb9a)],'horzCells':_0x6fdb88['horzCells']||0x1,'vertCells':_0x6fdb88[_0x525224(0x74a)]||0x1,'frameDelay':_0x6fdb88['frameDelay']||0x1,'smooth':_0x6fdb88[_0x525224(0x827)]||![],'anchorX':_0x6fdb88[_0x525224(0x661)]||0x0,'anchorY':_0x6fdb88[_0x525224(0x38c)]||0x0,'offsetX':_0x6fdb88[_0x525224(0x599)]||0x0,'offsetY':_0x6fdb88[_0x525224(0xb22)]||0x0};for(const _0x289400 of _0x2e27d9){if(!_0x289400)continue;if(!_0x289400[_0x525224(0xb3a)]())continue;_0x289400['battler']()[_0x525224(0x25c)](_0x3f5833);}const _0x1c9c17=$gameTemp[_0x525224(0x9c4)]();_0x1c9c17&&_0x1c9c17['setWaitMode'](_0x525224(0x505));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xc1a),_0x1e738b=>{const _0x1269b3=_0x5bbf40;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x58eae1=SceneManager[_0x1269b3(0x2f2)][_0x1269b3(0x3c3)];if(!_0x58eae1)return;if(VisuMZ['ActSeqImpact'][_0x1269b3(0x77e)]<=1.05){alert(_0x1269b3(0x508)),SceneManager[_0x1269b3(0x593)]();return;}VisuMZ[_0x1269b3(0x2c2)](_0x1e738b,_0x1e738b);const _0x50c79f=VisuMZ[_0x1269b3(0xae5)](_0x1e738b[_0x1269b3(0x3f1)]);for(const _0x349800 of _0x50c79f){if(!_0x349800)continue;if(!_0x349800['battler']())continue;_0x349800[_0x1269b3(0xb3a)]()[_0x1269b3(0x750)]();}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Inject_AnimationPauseResume',_0x45e0a0=>{const _0x1ec187=_0x5bbf40;if(!Imported[_0x1ec187(0x8a8)])return;const _0x182342=SceneManager['_scene'][_0x1ec187(0x3c3)];if(!_0x182342)return;if(VisuMZ[_0x1ec187(0x200)][_0x1ec187(0x77e)]<=1.05){alert(_0x1ec187(0x508)),SceneManager[_0x1ec187(0x593)]();return;}VisuMZ[_0x1ec187(0x2c2)](_0x45e0a0,_0x45e0a0);const _0x488d3a=VisuMZ[_0x1ec187(0xae5)](_0x45e0a0[_0x1ec187(0x3f1)]),_0x5edacc=_0x45e0a0['pause'];for(const _0x5cce0d of _0x488d3a){if(!_0x5cce0d)continue;if(!_0x5cce0d[_0x1ec187(0xb3a)]())continue;_0x5cce0d[_0x1ec187(0xb3a)]()['pauseInjectAnimation'](_0x5edacc);}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x419),_0x466310=>{const _0x42c34f=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;const _0x47ca60=$gameTemp[_0x42c34f(0x9c4)]();if(!_0x47ca60)return;_0x47ca60[_0x42c34f(0x61b)](_0x42c34f(0x683));}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x2f5),_0x396938=>{const _0x57392e=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x57392e(0x2c2)](_0x396938,_0x396938);const _0x2ec419=$gameTemp[_0x57392e(0x9c4)](),_0x59c079=BattleManager[_0x57392e(0x866)],_0x41f130=BattleManager[_0x57392e(0xb88)],_0x52ecb7=BattleManager[_0x57392e(0x9e4)];if(!_0x2ec419||!_0x59c079||!_0x41f130)return;if(!_0x59c079[_0x57392e(0x92e)]())return;const _0x2e84e7=VisuMZ['CreateActionSequenceTargets'](_0x396938['Targets']);for(const _0x11103d of _0x2e84e7){if(!_0x11103d)continue;_0x52ecb7[_0x57392e(0x9cb)](_0x57392e(0xb87),_0x41f130,_0x11103d);}_0x2ec419['setWaitMode'](_0x57392e(0xb41));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x3d7),_0x4623aa=>{const _0x3ce9ed=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActiveChainSkills'])return;$gameTemp[_0x3ce9ed(0x2c6)]=!![];}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x2bd),_0x4ba303=>{const _0x5c6149=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5c6149(0x2c2)](_0x4ba303,_0x4ba303);const _0x5f5479=[_0x5c6149(0x2b4),'MAXMP',_0x5c6149(0x59c),_0x5c6149(0x8c9),_0x5c6149(0x7c5),_0x5c6149(0x4f2),'AGI',_0x5c6149(0xaa2)],_0x18e112=_0x4ba303['Buffs'],_0x2e7e12=_0x4ba303[_0x5c6149(0x64b)],_0x3656d5=_0x4ba303[_0x5c6149(0x660)],_0x591b7b=VisuMZ[_0x5c6149(0xae5)](_0x4ba303['Targets']);for(const _0x441e9c of _0x591b7b){if(!_0x441e9c)continue;for(const _0x3d6c55 of _0x18e112){const _0x3d84af=_0x5f5479[_0x5c6149(0x5c9)](_0x3d6c55['toUpperCase']()[_0x5c6149(0x86c)]());_0x3d84af>=0x0&&_0x3d84af<=0x7&&_0x441e9c[_0x5c6149(0x949)](_0x3d84af,_0x3656d5);}for(const _0xbae078 of _0x2e7e12){const _0x36a073=_0x5f5479[_0x5c6149(0x5c9)](_0xbae078[_0x5c6149(0x6ca)]()['trim']());_0x36a073>=0x0&&_0x36a073<=0x7&&_0x441e9c['addDebuff'](_0x36a073,_0x3656d5);}}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x75a),_0x44abfe=>{const _0x3b0756=_0x5bbf40;if(!SceneManager[_0x3b0756(0x277)]())return;VisuMZ[_0x3b0756(0x2c2)](_0x44abfe,_0x44abfe);const _0x2aae92=_0x44abfe['States'],_0x4d4d18=VisuMZ[_0x3b0756(0xae5)](_0x44abfe[_0x3b0756(0x3f1)]);for(const _0x2a703c of _0x4d4d18){if(!_0x2a703c)continue;for(const _0x4d58a9 of _0x2aae92){_0x2a703c[_0x3b0756(0x7cb)](_0x4d58a9);}}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_ArmorPenetration',_0x533e40=>{const _0x391ce9=_0x5bbf40;if(!SceneManager[_0x391ce9(0x277)]())return;VisuMZ[_0x391ce9(0x2c2)](_0x533e40,_0x533e40);const _0x4c06db=BattleManager[_0x391ce9(0x866)],_0x57e302={'arPenRate':_0x533e40[_0x391ce9(0x3e3)],'arPenFlat':_0x533e40['ArPenFlat'],'arRedRate':_0x533e40['ArRedRate'],'arRedFlat':_0x533e40['ArRedFlat']};_0x4c06db[_0x391ce9(0x2ee)]=_0x57e302;}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Mechanics_AnalyzeWeakness',_0x42d8be=>{const _0x10525a=_0x5bbf40;if(!SceneManager[_0x10525a(0x277)]())return;if(!Imported[_0x10525a(0x929)])return;VisuMZ[_0x10525a(0x2c2)](_0x42d8be,_0x42d8be);const _0x14556c=VisuMZ[_0x10525a(0xae5)](_0x42d8be[_0x10525a(0x3f1)]),_0x2bf631=_0x42d8be[_0x10525a(0x2b1)]||0x1;for(const _0x403ef2 of _0x14556c){if(!_0x403ef2)continue;if(!_0x403ef2['isEnemy']())continue;_0x403ef2[_0x10525a(0x52c)](_0x2bf631);}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Mechanics_AtbGauge',_0x24e34d=>{const _0xc69897=_0x5bbf40;if(!SceneManager[_0xc69897(0x277)]())return;if(!Imported[_0xc69897(0xb51)])return;if(!BattleManager[_0xc69897(0x9e9)]())return;VisuMZ[_0xc69897(0x2c2)](_0x24e34d,_0x24e34d);const _0x5ecb8f=VisuMZ[_0xc69897(0xae5)](_0x24e34d[_0xc69897(0x3f1)]),_0x49ed2d=_0x24e34d[_0xc69897(0x2a2)],_0x15891e=_0x24e34d[_0xc69897(0x2a2)],_0x5cf08e=_0x24e34d[_0xc69897(0x342)];for(const _0x28c5a4 of _0x5ecb8f){if(!_0x28c5a4)continue;if(_0x28c5a4[_0xc69897(0x877)]())_0x28c5a4[_0xc69897(0x5cc)](_0x49ed2d);else{if(_0x28c5a4[_0xc69897(0x8dd)]()){_0x28c5a4[_0xc69897(0x7e6)](_0x15891e);if(_0x5cf08e)_0x28c5a4[_0xc69897(0x671)]();}}}}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xa12),_0x2e37d3=>{const _0x5ef761=_0x5bbf40;if(!SceneManager[_0x5ef761(0x277)]())return;if(!Imported[_0x5ef761(0x40c)])return;VisuMZ[_0x5ef761(0x2c2)](_0x2e37d3,_0x2e37d3);const _0x2b8a46=VisuMZ[_0x5ef761(0xae5)](_0x2e37d3[_0x5ef761(0x3f1)]),_0x156d94=_0x2e37d3[_0x5ef761(0x86f)];for(const _0x5d9a8f of _0x2b8a46){if(!_0x5d9a8f)continue;_0x5d9a8f[_0x5ef761(0x23e)](_0x156d94);}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x547),_0x32bf79=>{const _0x33342b=_0x5bbf40;if(!SceneManager[_0x33342b(0x277)]())return;if(!Imported[_0x33342b(0x40c)])return;if(!BattleManager[_0x33342b(0xb88)])return;VisuMZ[_0x33342b(0x2c2)](_0x32bf79,_0x32bf79);const _0x3ef8df=_0x32bf79[_0x33342b(0x30d)];$gameVariables[_0x33342b(0x3ad)](_0x3ef8df,BattleManager[_0x33342b(0xb88)][_0x33342b(0xacf)]());}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],'ActSeq_Mechanics_BreakShieldChange',_0x432b38=>{const _0x1b991b=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1b991b(0x2da)])return;VisuMZ['ConvertParams'](_0x432b38,_0x432b38);const _0x51fc38=VisuMZ['CreateActionSequenceTargets'](_0x432b38[_0x1b991b(0x3f1)]),_0x6b94b8=_0x432b38['BreakShields'];for(const _0x229bc7 of _0x51fc38){if(!_0x229bc7)continue;if(_0x229bc7[_0x1b991b(0x6fe)]())continue;if(!_0x229bc7['isAffectedByBreakShield']())continue;_0x229bc7[_0x1b991b(0x55f)](_0x6b94b8);}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x1f9),_0x504083=>{const _0x4f1216=_0x5bbf40;if(!SceneManager[_0x4f1216(0x277)]())return;if(!Imported[_0x4f1216(0x2da)])return;VisuMZ[_0x4f1216(0x2c2)](_0x504083,_0x504083);const _0x4e289e=VisuMZ['CreateActionSequenceTargets'](_0x504083['Targets']);for(const _0x2517bb of _0x4e289e){if(!_0x2517bb)continue;if(_0x2517bb[_0x4f1216(0x6fe)]())continue;if(!_0x2517bb[_0x4f1216(0x2b6)]())continue;_0x2517bb[_0x4f1216(0x36a)]();}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x77c),_0x122534=>{const _0x3f321f=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3f321f(0x7f1)])return;if(!BattleManager[_0x3f321f(0x99f)]())return;VisuMZ[_0x3f321f(0x2c2)](_0x122534,_0x122534);const _0x222313=VisuMZ[_0x3f321f(0xae5)](_0x122534['Targets']),_0x10d1a4=_0x122534[_0x3f321f(0xaa3)];for(const _0x522011 of _0x222313){if(!_0x522011)continue;_0x522011['gainBravePoints'](_0x10d1a4);}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_Collapse',_0x5c6b7f=>{const _0x67b7e0=_0x5bbf40;if(!SceneManager[_0x67b7e0(0x277)]())return;VisuMZ[_0x67b7e0(0x2c2)](_0x5c6b7f,_0x5c6b7f);const _0x427d44=$gameTemp[_0x67b7e0(0x9c4)](),_0x34dbb5=BattleManager[_0x67b7e0(0x866)],_0x223737=BattleManager[_0x67b7e0(0xb88)];if(!_0x427d44||!_0x34dbb5||!_0x223737)return;if(!_0x34dbb5[_0x67b7e0(0x92e)]())return;const _0x24e1f0=VisuMZ[_0x67b7e0(0xae5)](_0x5c6b7f[_0x67b7e0(0x3f1)]);for(const _0x23c273 of _0x24e1f0){if(!_0x23c273)continue;_0x5c6b7f[_0x67b7e0(0xab6)]&&(_0x23c273['removeImmortal'](),_0x23c273[_0x67b7e0(0x7cb)](_0x23c273[_0x67b7e0(0x646)]())),_0x23c273[_0x67b7e0(0x431)]()&&_0x23c273[_0x67b7e0(0x346)]();}_0x427d44[_0x67b7e0(0x61b)](_0x67b7e0(0xad4));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x7a6),_0x1e6a4a=>{const _0xdd0cf4=_0x5bbf40;if(!SceneManager[_0xdd0cf4(0x277)]())return;if(!Imported[_0xdd0cf4(0x65e)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0xdd0cf4(0x2c2)](_0x1e6a4a,_0x1e6a4a);const _0x3e97c1=VisuMZ[_0xdd0cf4(0xae5)](_0x1e6a4a['Targets']),_0x1c372b=_0x1e6a4a[_0xdd0cf4(0x7fc)];for(const _0x3c1719 of _0x3e97c1){if(!_0x3c1719)continue;_0x3c1719[_0xdd0cf4(0xbdf)](_0x1c372b);}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x6f2),_0x453ea9=>{const _0x33432d=_0x5bbf40;if(!SceneManager[_0x33432d(0x277)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x33432d(0x2c2)](_0x453ea9,_0x453ea9);const _0x95bc1f=VisuMZ['CreateActionSequenceTargets'](_0x453ea9[_0x33432d(0x3f1)]),_0x2015ac=_0x453ea9['ChargeRate'],_0x26565a=_0x453ea9[_0x33432d(0x2a2)];for(const _0x291d4d of _0x95bc1f){if(!_0x291d4d)continue;if(_0x291d4d[_0x33432d(0x8bd)]===_0x33432d(0x616))_0x291d4d[_0x33432d(0x464)](_0x2015ac);else _0x291d4d['_tpbState']===_0x33432d(0x3a1)&&_0x291d4d[_0x33432d(0x2d1)](_0x26565a);}}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x709),_0x2f95fa=>{const _0x214541=_0x5bbf40;if(!SceneManager[_0x214541(0x277)]())return;VisuMZ[_0x214541(0x2c2)](_0x2f95fa,_0x2f95fa);const _0x3fe533=BattleManager[_0x214541(0x866)];if(!_0x3fe533)return;let _0x3164ab=_0x2f95fa['Formula'];_0x3fe533[_0x214541(0x55b)](_0x3164ab);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Mechanics_DamagePopup',_0x199d90=>{const _0x18e6b2=_0x5bbf40;if(!SceneManager[_0x18e6b2(0x277)]())return;VisuMZ[_0x18e6b2(0x2c2)](_0x199d90,_0x199d90);const _0x124077=VisuMZ['CreateActionSequenceTargets'](_0x199d90['Targets']);for(const _0xcaca08 of _0x124077){if(!_0xcaca08)continue;if(_0xcaca08[_0x18e6b2(0x67c)]())_0xcaca08[_0x18e6b2(0x965)]();}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Mechanics_DeathBreak',_0x530a11=>{const _0x21584a=_0x5bbf40;if(!SceneManager[_0x21584a(0x277)]())return;VisuMZ[_0x21584a(0x2c2)](_0x530a11,_0x530a11);const _0x444a2d=$gameTemp['getLastPluginCommandInterpreter'](),_0x520b7d=BattleManager[_0x21584a(0xb88)],_0x21dd90=_0x530a11[_0x21584a(0xb32)];if(!_0x444a2d)return;if(!_0x520b7d)return;_0x520b7d&&_0x520b7d[_0x21584a(0x724)]()&&_0x21dd90[_0x21584a(0x6ca)]()['trim']()!==_0x21584a(0x917)&&_0x444a2d[_0x21584a(0x805)]([_0x21dd90]);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x632),_0x47c962=>{const _0x3d161d=_0x5bbf40;if(!SceneManager[_0x3d161d(0x277)]())return;VisuMZ[_0x3d161d(0x2c2)](_0x47c962,_0x47c962);const _0x2ae9fa=$gameTemp[_0x3d161d(0x9c4)](),_0x379ca2=BattleManager['_logWindow'];if(!_0x2ae9fa)return;const _0xaf4fd9=VisuMZ[_0x3d161d(0xae5)](_0x47c962[_0x3d161d(0xa54)]),_0x4cf916=VisuMZ[_0x3d161d(0xae5)](_0x47c962[_0x3d161d(0x3f1)]);for(const _0x43c047 of _0xaf4fd9){for(const _0x3189e1 of _0x4cf916){if(!_0x3189e1)continue;const _0x208df8=$dataSkills[_0x43c047[_0x3d161d(0xb4e)]()];_0x379ca2[_0x3d161d(0x9cb)](_0x3d161d(0x546),_0x43c047,_0x3189e1,_0x208df8);}}_0x2ae9fa[_0x3d161d(0x61b)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x43b),_0x1d70c0=>{const _0x3705b5=_0x5bbf40;if(!SceneManager[_0x3705b5(0x277)]())return;VisuMZ[_0x3705b5(0x2c2)](_0x1d70c0,_0x1d70c0);const _0x2a0c28=$gameTemp[_0x3705b5(0x9c4)](),_0xf221a6=BattleManager[_0x3705b5(0x9e4)];if(!_0x2a0c28)return;const _0x5daf22=VisuMZ[_0x3705b5(0xae5)](_0x1d70c0[_0x3705b5(0xa54)]),_0x1993c8=VisuMZ[_0x3705b5(0xae5)](_0x1d70c0[_0x3705b5(0x3f1)]);for(const _0x3ad5ae of _0x5daf22){for(const _0x321172 of _0x1993c8){if(!_0x321172)continue;const _0x5cfcb7=$dataSkills[_0x3ad5ae[_0x3705b5(0x3e2)]()];_0xf221a6[_0x3705b5(0x9cb)](_0x3705b5(0x546),_0x3ad5ae,_0x321172,_0x5cfcb7);}}_0x2a0c28[_0x3705b5(0x61b)]('battlelog');}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x621),_0x1dbef8=>{const _0x571e80=_0x5bbf40;if(!SceneManager[_0x571e80(0x277)]())return;VisuMZ[_0x571e80(0x2c2)](_0x1dbef8,_0x1dbef8);const _0x19ee8e=$gameTemp[_0x571e80(0x9c4)](),_0x34f8cd=BattleManager[_0x571e80(0x9e4)],_0x5b5f4a=Number(_0x1dbef8['ItemID']||0x1),_0x3ec409=$dataItems[_0x5b5f4a];if(!_0x19ee8e)return;if(!_0x3ec409)return;const _0x4477a7=VisuMZ[_0x571e80(0xae5)](_0x1dbef8[_0x571e80(0xa54)]),_0x3de36a=VisuMZ[_0x571e80(0xae5)](_0x1dbef8[_0x571e80(0x3f1)]);for(const _0x37ccc7 of _0x4477a7){for(const _0x2eae0d of _0x3de36a){if(!_0x2eae0d)continue;_0x34f8cd['push'](_0x571e80(0x546),_0x37ccc7,_0x2eae0d,_0x3ec409);}}_0x19ee8e[_0x571e80(0x61b)](_0x571e80(0xb41));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x37a),_0x27ac0d=>{const _0x110c16=_0x5bbf40;if(!SceneManager[_0x110c16(0x277)]())return;VisuMZ['ConvertParams'](_0x27ac0d,_0x27ac0d);let _0x40ede8=Number(_0x27ac0d[_0x110c16(0x992)]||0x0);if(_0x40ede8<=0x0){const _0x5e7e02=BattleManager[_0x110c16(0x866)];if(_0x5e7e02&&_0x5e7e02[_0x110c16(0x812)]())_0x40ede8=_0x5e7e02[_0x110c16(0x92e)]()['id'];else return;}const _0x28f75c=$dataSkills[_0x40ede8];if(!_0x28f75c)return;const _0x51ab45=VisuMZ['CreateActionSequenceTargets'](_0x27ac0d[_0x110c16(0xa54)]);for(const _0x13b4cb of _0x51ab45){_0x13b4cb[_0x110c16(0x565)](_0x28f75c);}}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x8ec),_0x5362ee=>{const _0x5a2a98=_0x5bbf40;if(!SceneManager[_0x5a2a98(0x277)]())return;VisuMZ[_0x5a2a98(0x2c2)](_0x5362ee,_0x5362ee);const _0xaf74cf=$gameTemp['getLastPluginCommandInterpreter'](),_0x47093e=BattleManager['_logWindow'],_0x56af5e=Number(_0x5362ee[_0x5a2a98(0x992)]||0x1),_0x43fb39=$dataSkills[_0x56af5e];if(!_0xaf74cf)return;if(!_0x43fb39)return;const _0x5703db=VisuMZ[_0x5a2a98(0xae5)](_0x5362ee[_0x5a2a98(0xa54)]),_0x573d64=VisuMZ[_0x5a2a98(0xae5)](_0x5362ee[_0x5a2a98(0x3f1)]);for(const _0x327e6d of _0x5703db){for(const _0x1ddf4d of _0x573d64){if(!_0x1ddf4d)continue;_0x47093e[_0x5a2a98(0x9cb)](_0x5a2a98(0x546),_0x327e6d,_0x1ddf4d,_0x43fb39);}}_0xaf74cf[_0x5a2a98(0x61b)](_0x5a2a98(0xb41));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Mechanics_EnemyEscape',_0x304848=>{const _0x227ca9=_0x5bbf40;if(!SceneManager[_0x227ca9(0x277)]())return;VisuMZ[_0x227ca9(0x2c2)](_0x304848,_0x304848);const _0x28f7f8=VisuMZ[_0x227ca9(0xae5)](_0x304848[_0x227ca9(0x3f1)]);for(const _0x4bac7f of _0x28f7f8){if(!_0x4bac7f)continue;if(!_0x4bac7f[_0x227ca9(0x37d)]())continue;_0x4bac7f['escape']();}}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Mechanics_EtbAction',_0x53d71a=>{const _0x34c742=_0x5bbf40;if(!SceneManager[_0x34c742(0x277)]())return;if(!Imported['VisuMZ_2_BattleSystemETB'])return;if(!BattleManager[_0x34c742(0x7ad)]())return;VisuMZ[_0x34c742(0x2c2)](_0x53d71a,_0x53d71a);const _0x5dddaf=_0x53d71a[_0x34c742(0x764)];BattleManager[_0x34c742(0xb88)]&&BattleManager['_subject'][_0x34c742(0x24f)]()[_0x34c742(0x918)](_0x5dddaf);}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x86e),_0x488775=>{const _0x1dd29f=_0x5bbf40;if(!SceneManager[_0x1dd29f(0x277)]())return;if(!Imported[_0x1dd29f(0xb9c)])return;if(!BattleManager['isFTB']())return;VisuMZ[_0x1dd29f(0x2c2)](_0x488775,_0x488775);const _0x2eeb92=_0x488775[_0x1dd29f(0x764)];BattleManager['_subject']&&BattleManager[_0x1dd29f(0xb88)][_0x1dd29f(0x24f)]()[_0x1dd29f(0x26a)](_0x2eeb92);}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x3c8),_0x409fec=>{const _0x31dfee=_0x5bbf40;if(!SceneManager[_0x31dfee(0x277)]())return;VisuMZ[_0x31dfee(0x2c2)](_0x409fec,_0x409fec);const _0x30dd0d=VisuMZ[_0x31dfee(0xae5)](_0x409fec[_0x31dfee(0x3f1)]),_0x129a36=_0x409fec[_0x31dfee(0x3e4)],_0x19e204=_0x409fec[_0x31dfee(0xa29)],_0x3f4a8a=_0x409fec[_0x31dfee(0x3a3)],_0x56e356=_0x409fec[_0x31dfee(0xa7d)],_0x2587cc=_0x409fec[_0x31dfee(0x61f)],_0x5acea8=_0x409fec[_0x31dfee(0x4f0)],_0x12198d=_0x409fec[_0x31dfee(0xb55)];for(const _0x47a6d0 of _0x30dd0d){if(!_0x47a6d0)continue;const _0x4eee6f=_0x47a6d0[_0x31dfee(0x706)](),_0x58d271=Math[_0x31dfee(0x6ea)](_0x129a36*_0x47a6d0[_0x31dfee(0x719)]+_0x19e204),_0x13b55a=Math['round'](_0x3f4a8a*_0x47a6d0[_0x31dfee(0x21d)]+_0x56e356),_0x5791ad=Math[_0x31dfee(0x6ea)](_0x2587cc*_0x47a6d0[_0x31dfee(0x449)]()+_0x5acea8);if(_0x58d271!==0x0)_0x47a6d0[_0x31dfee(0xb64)](_0x58d271);if(_0x13b55a!==0x0)_0x47a6d0['gainMp'](_0x13b55a);if(_0x5791ad!==0x0)_0x47a6d0[_0x31dfee(0xa43)](_0x5791ad);if(_0x12198d)_0x47a6d0[_0x31dfee(0x965)]();_0x4eee6f&&_0x47a6d0[_0x31dfee(0x724)]()&&_0x47a6d0[_0x31dfee(0x346)]();}}),PluginManager['registerCommand'](pluginData['name'],_0x5bbf40(0x906),_0x25670b=>{const _0x4ef63d=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4ef63d(0x2c2)](_0x25670b,_0x25670b);const _0x4786cc=VisuMZ[_0x4ef63d(0xae5)](_0x25670b[_0x4ef63d(0x3f1)]);for(const _0x16e91a of _0x4786cc){if(!_0x16e91a)continue;_0x16e91a[_0x4ef63d(0xc19)](_0x25670b[_0x4ef63d(0x4b0)]);}}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x391),_0x542554=>{const _0x4cd7db=_0x5bbf40;if(!SceneManager[_0x4cd7db(0x277)]())return;VisuMZ[_0x4cd7db(0x2c2)](_0x542554,_0x542554);const _0x208801=BattleManager['_action'],_0x4df8b7={'criticalHitRate':_0x542554['CriticalHitRate'],'criticalHitFlat':_0x542554[_0x4cd7db(0x534)],'criticalDmgRate':_0x542554[_0x4cd7db(0x2df)],'criticalDmgFlat':_0x542554[_0x4cd7db(0x85e)],'damageRate':_0x542554['DamageRate'],'damageFlat':_0x542554[_0x4cd7db(0x4f8)],'hitRate':_0x542554[_0x4cd7db(0xa9a)],'hitFlat':_0x542554[_0x4cd7db(0x33b)]};_0x208801[_0x4cd7db(0x413)]=_0x4df8b7;}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],'ActSeq_Mechanics_OnceParallel',_0x32448c=>{const _0x35ef46=_0x5bbf40;if(!SceneManager[_0x35ef46(0x277)]())return;VisuMZ[_0x35ef46(0x2c2)](_0x32448c,_0x32448c);const _0x284161=_0x32448c['CommonEventID'];SceneManager[_0x35ef46(0x2f2)][_0x35ef46(0x8ae)](_0x284161);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x4e4),_0x20dabf=>{const _0x521059=_0x5bbf40;if(!SceneManager[_0x521059(0x277)]())return;if(!Imported[_0x521059(0x2b2)])return;if(!BattleManager['isOTB']())return;VisuMZ['ConvertParams'](_0x20dabf,_0x20dabf);const _0x5c5695=VisuMZ[_0x521059(0xae5)](_0x20dabf[_0x521059(0x3f1)]);for(const _0x1f232d of _0x5c5695){if(!_0x1f232d)continue;let _0x418466=_0x20dabf[_0x521059(0x647)],_0x1c73cc=_0x20dabf[_0x521059(0x2cb)],_0x540e69=_0x20dabf['FollowTurn'];BattleManager['_actionBattlers'][_0x521059(0x608)](_0x1f232d)?_0x418466+=_0x540e69:_0x1c73cc+=_0x540e69,BattleManager['turnOrderChangeOTB'](_0x1f232d,-_0x418466,![]),BattleManager[_0x521059(0xa55)](_0x1f232d,-_0x1c73cc,!![]);}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x31a),_0x5beeaf=>{const _0x367e8b=_0x5bbf40;if(!SceneManager[_0x367e8b(0x277)]())return;if(!Imported[_0x367e8b(0xa75)])return;if(!BattleManager[_0x367e8b(0x864)]())return;VisuMZ[_0x367e8b(0x2c2)](_0x5beeaf,_0x5beeaf);const _0x5630bf=BattleManager[_0x367e8b(0xb88)]['friendsUnit'](),_0x1e5c34=_0x5beeaf[_0x367e8b(0xb47)],_0x167df6=_0x5beeaf[_0x367e8b(0x738)]||_0x367e8b(0x7e7),_0x3fdc2f=_0x5beeaf[_0x367e8b(0xa69)]||_0x367e8b(0x7e7),_0x21a34f=_0x5beeaf['alterCost']||0x0,_0xed4715=_0x5beeaf[_0x367e8b(0x737)]||0x0;(_0x5630bf[_0x367e8b(0xba3)]()||_0x1e5c34)&&(_0x1e5c34&&(_0x5630bf[_0x367e8b(0x66a)]=_0x5630bf[_0x367e8b(0x66a)]||{},_0x5630bf[_0x367e8b(0x66a)]['priority']=0x0),_0x5630bf[_0x367e8b(0xb21)](_0x167df6,_0x3fdc2f,_0x21a34f,_0xed4715));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Mechanics_PtbConvert',_0x532cef=>{const _0x5a9bf7=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5a9bf7(0xa75)])return;if(!BattleManager[_0x5a9bf7(0x864)]())return;VisuMZ[_0x5a9bf7(0x2c2)](_0x532cef,_0x532cef);const _0x395c79=BattleManager[_0x5a9bf7(0xb88)]['friendsUnit']();let _0x438ffa=Math[_0x5a9bf7(0xb10)](_0x532cef[_0x5a9bf7(0x3a4)],0x0),_0x28ce51=_0x395c79[_0x5a9bf7(0x4c4)](),_0x1ce8e2=_0x395c79[_0x5a9bf7(0x4e0)]();while(_0x438ffa--){if(_0x28ce51<=0x0&&_0x1ce8e2<=0x0)break;else _0x28ce51>0x0?(_0x28ce51--,_0x1ce8e2++):_0x1ce8e2--;}_0x395c79[_0x5a9bf7(0x217)](_0x28ce51),_0x395c79[_0x5a9bf7(0x838)](_0x1ce8e2);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x97f),_0xeae13f=>{const _0x188fca=_0x5bbf40;if(!SceneManager[_0x188fca(0x277)]())return;if(!Imported[_0x188fca(0xa75)])return;if(!BattleManager[_0x188fca(0x864)]())return;VisuMZ[_0x188fca(0x2c2)](_0xeae13f,_0xeae13f);const _0x55a928=BattleManager[_0x188fca(0xb88)][_0x188fca(0x24f)]();let _0x5f40b2=_0xeae13f[_0x188fca(0xa2b)],_0x582d24=_0xeae13f[_0x188fca(0x30b)];_0x55a928['gainFullActionsPTB'](_0x5f40b2),_0x55a928[_0x188fca(0xb09)](_0x582d24);}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x389),_0x57db8d=>{const _0x371b2e=_0x5bbf40;if(!SceneManager[_0x371b2e(0x277)]())return;VisuMZ['ConvertParams'](_0x57db8d,_0x57db8d);const _0x42b7b9=[_0x371b2e(0x2b4),_0x371b2e(0x70b),_0x371b2e(0x59c),_0x371b2e(0x8c9),_0x371b2e(0x7c5),'MDF','AGI','LUK'],_0x234416=_0x57db8d[_0x371b2e(0x380)],_0x400928=_0x57db8d[_0x371b2e(0x64b)],_0x15f467=VisuMZ[_0x371b2e(0xae5)](_0x57db8d[_0x371b2e(0x3f1)]);for(const _0x4fe166 of _0x15f467){if(!_0x4fe166)continue;for(const _0x2c4578 of _0x234416){const _0xc949d6=_0x42b7b9[_0x371b2e(0x5c9)](_0x2c4578['toUpperCase']()[_0x371b2e(0x86c)]());_0xc949d6>=0x0&&_0xc949d6<=0x7&&_0x4fe166[_0x371b2e(0x33e)](_0xc949d6)&&_0x4fe166[_0x371b2e(0x8b3)](_0xc949d6);}for(const _0x2a63fd of _0x400928){const _0x3f1c61=_0x42b7b9[_0x371b2e(0x5c9)](_0x2a63fd[_0x371b2e(0x6ca)]()['trim']());_0x3f1c61>=0x0&&_0x3f1c61<=0x7&&_0x4fe166['isDebuffAffected'](_0x3f1c61)&&_0x4fe166['removeBuff'](_0x3f1c61);}}}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x289),_0x6ef53f=>{const _0x4f7e50=_0x5bbf40;if(!SceneManager[_0x4f7e50(0x277)]())return;VisuMZ[_0x4f7e50(0x2c2)](_0x6ef53f,_0x6ef53f);const _0x808b82=_0x6ef53f[_0x4f7e50(0x86d)],_0x378fd6=VisuMZ[_0x4f7e50(0xae5)](_0x6ef53f[_0x4f7e50(0x3f1)]);for(const _0x1d8e09 of _0x378fd6){if(!_0x1d8e09)continue;for(const _0x2d97dd of _0x808b82){_0x1d8e09['removeState'](_0x2d97dd);}}}),PluginManager['registerCommand'](pluginData['name'],_0x5bbf40(0x7f9),_0x27c35f=>{const _0x53fe4c=_0x5bbf40;if(!SceneManager[_0x53fe4c(0x277)]())return;if(!Imported[_0x53fe4c(0x881)])return;VisuMZ[_0x53fe4c(0x2c2)](_0x27c35f,_0x27c35f);const _0x58fba9=VisuMZ[_0x53fe4c(0xae5)](_0x27c35f[_0x53fe4c(0x3f1)]),_0x30f3da=Number(_0x27c35f[_0x53fe4c(0x7d4)]),_0x9558b2=Number(_0x27c35f[_0x53fe4c(0x660)]),_0x24a6a7=_0x27c35f[_0x53fe4c(0x2ea)];for(const _0x11ed14 of _0x58fba9){if(!_0x11ed14)continue;_0x24a6a7&&!_0x11ed14['isStateAffected'](_0x30f3da)?(_0x11ed14[_0x53fe4c(0x7cb)](_0x30f3da),_0x11ed14[_0x53fe4c(0x417)](_0x30f3da,_0x9558b2)):_0x11ed14[_0x53fe4c(0x88d)](_0x30f3da,_0x9558b2);}}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Mechanics_StateTurnsChangeTo',_0xe66c0c=>{const _0x6d643c=_0x5bbf40;if(!SceneManager[_0x6d643c(0x277)]())return;if(!Imported[_0x6d643c(0x881)])return;VisuMZ['ConvertParams'](_0xe66c0c,_0xe66c0c);const _0x407948=VisuMZ['CreateActionSequenceTargets'](_0xe66c0c[_0x6d643c(0x3f1)]),_0x501b9f=Number(_0xe66c0c[_0x6d643c(0x7d4)]),_0x5bfb7b=Math[_0x6d643c(0xb10)](Number(_0xe66c0c['Turns']),0x0),_0x2ff112=_0xe66c0c['AutoAddState'];for(const _0xfcca28 of _0x407948){if(!_0xfcca28)continue;_0x2ff112&&!_0xfcca28['isStateAffected'](_0x501b9f)&&_0xfcca28[_0x6d643c(0x7cb)](_0x501b9f),_0xfcca28[_0x6d643c(0x417)](_0x501b9f,_0x5bfb7b);}}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xbf7),_0x13bc0b=>{const _0x12e1fc=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x12e1fc(0x4dc)])return;if(!BattleManager[_0x12e1fc(0x60a)]())return;VisuMZ[_0x12e1fc(0x2c2)](_0x13bc0b,_0x13bc0b);const _0x429cc9=_0x13bc0b[_0x12e1fc(0x72b)],_0x4bca33=VisuMZ[_0x12e1fc(0xae5)](_0x13bc0b[_0x12e1fc(0x3f1)]),_0x12a775=_0x13bc0b[_0x12e1fc(0xa51)],_0x98041c=_0x13bc0b[_0x12e1fc(0x845)],_0x26dcc2=_0x13bc0b[_0x12e1fc(0x49b)],_0x42d41f=BattleManager[_0x12e1fc(0x866)];if(_0x429cc9)for(const _0x39aa22 of _0x4bca33){if(!_0x39aa22)continue;if(_0x39aa22===user)continue;if(_0x12a775)_0x39aa22['setSTBExploited'](![]);_0x39aa22[_0x12e1fc(0x5b6)](BattleManager['_subject'],_0x42d41f);}if(_0x98041c&&BattleManager[_0x12e1fc(0xb88)]){if(_0x26dcc2)BattleManager[_0x12e1fc(0xb88)][_0x12e1fc(0x5eb)](![]);const _0x46daba=_0x4bca33[0x0];BattleManager['performSTBExploiter'](_0x46daba,_0x42d41f);}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x28d),_0x343c5a=>{const _0x4ae5a9=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4ae5a9(0x4dc)])return;if(!BattleManager[_0x4ae5a9(0x60a)]())return;VisuMZ['ConvertParams'](_0x343c5a,_0x343c5a);const _0x31da6d=_0x343c5a[_0x4ae5a9(0x6d0)];BattleManager[_0x4ae5a9(0xb88)]&&BattleManager[_0x4ae5a9(0xb88)]['stbGainInstant'](_0x31da6d);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x6f9),_0x5b16ad=>{const _0x542600=_0x5bbf40;if(!SceneManager[_0x542600(0x277)]())return;if(!Imported[_0x542600(0x4dc)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x542600(0x2c2)](_0x5b16ad,_0x5b16ad);let _0x31c72d=_0x5b16ad['Actions'];if(BattleManager['_subject']){BattleManager[_0x542600(0xb88)][_0x542600(0x566)]=BattleManager[_0x542600(0xb88)]['_actions']||[];while(_0x31c72d--){if(BattleManager[_0x542600(0xb88)][_0x542600(0x566)][_0x542600(0x348)]<=0x0)break;BattleManager[_0x542600(0xb88)][_0x542600(0x566)]['shift']();}}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x418),_0x27f9df=>{const _0x2c9d4e=_0x5bbf40;if(!SceneManager[_0x2c9d4e(0x277)]())return;if(!Imported[_0x2c9d4e(0x321)])return;VisuMZ[_0x2c9d4e(0x2c2)](_0x27f9df,_0x27f9df);const _0x3599ba=VisuMZ[_0x2c9d4e(0xae5)](_0x27f9df['Targets']),_0x773e01=_0x27f9df[_0x2c9d4e(0x7e1)];for(const _0x374cde of _0x3599ba){if(!_0x374cde)continue;if(!_0x374cde['isActor']())continue;_0x374cde[_0x2c9d4e(0x6e3)](_0x773e01);}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Mechanics_TextPopup',_0x14af32=>{const _0x5b14d7=_0x5bbf40;if(!SceneManager[_0x5b14d7(0x277)]())return;VisuMZ['ConvertParams'](_0x14af32,_0x14af32);const _0x48a89b=VisuMZ[_0x5b14d7(0xae5)](_0x14af32[_0x5b14d7(0x3f1)]),_0x7e2c1f=_0x14af32['Text'],_0x2d272e={'textColor':ColorManager[_0x5b14d7(0xbc1)](_0x14af32[_0x5b14d7(0x400)]),'flashColor':_0x14af32['FlashColor'],'flashDuration':_0x14af32[_0x5b14d7(0x7b3)]};for(const _0x15a127 of _0x48a89b){if(!_0x15a127)continue;_0x15a127[_0x5b14d7(0x7b2)](_0x7e2c1f,_0x2d272e);}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x7e3),_0x35f0d0=>{const _0x3a9234=_0x5bbf40;if(!SceneManager[_0x3a9234(0x277)]())return;VisuMZ['ConvertParams'](_0x35f0d0,_0x35f0d0);const _0x3df3f6=VisuMZ[_0x3a9234(0xae5)](_0x35f0d0[_0x3a9234(0x3f1)]);let _0xe4847f=$gameVariables[_0x3a9234(0x371)](_0x35f0d0[_0x3a9234(0x460)]);Imported[_0x3a9234(0x25a)]&&_0x35f0d0[_0x3a9234(0x6bf)]&&(_0xe4847f=VisuMZ[_0x3a9234(0x41d)](_0xe4847f));const _0x482caa=String(_0xe4847f),_0x392de4={'textColor':ColorManager[_0x3a9234(0xbc1)](_0x35f0d0[_0x3a9234(0x400)]),'flashColor':_0x35f0d0[_0x3a9234(0xac2)],'flashDuration':_0x35f0d0[_0x3a9234(0x7b3)]};for(const _0x2bfb38 of _0x3df3f6){if(!_0x2bfb38)continue;_0x2bfb38[_0x3a9234(0x7b2)](_0x482caa,_0x392de4);}}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x2e6),_0xa8cf7=>{const _0x4a487e=_0x5bbf40;if(!SceneManager[_0x4a487e(0x277)]())return;const _0x345453=$gameTemp[_0x4a487e(0x9c4)]();if(!_0x345453)return;_0x345453[_0x4a487e(0x61b)](_0x4a487e(0xad4));}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Motion_ClearFreezeFrame',_0x19f04d=>{const _0x14ea9e=_0x5bbf40;if(!SceneManager[_0x14ea9e(0x277)]())return;VisuMZ[_0x14ea9e(0x2c2)](_0x19f04d,_0x19f04d);const _0x131083=VisuMZ['CreateActionSequenceTargets'](_0x19f04d[_0x14ea9e(0x3f1)]);for(const _0x56e451 of _0x131083){if(!_0x56e451)continue;_0x56e451[_0x14ea9e(0x9c7)]();}}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Motion_FreezeMotionFrame',_0x17584c=>{const _0x2aae59=_0x5bbf40;if(!SceneManager[_0x2aae59(0x277)]())return;VisuMZ[_0x2aae59(0x2c2)](_0x17584c,_0x17584c);const _0x31552c=VisuMZ['CreateActionSequenceTargets'](_0x17584c['Targets']),_0x41fd51=_0x17584c[_0x2aae59(0x640)][_0x2aae59(0x993)]()['trim']();let _0x4142fd=_0x17584c['ShowWeapon'];const _0x3e8a15=_0x17584c[_0x2aae59(0xae9)];![_0x2aae59(0x3d5),_0x2aae59(0x4a0),_0x2aae59(0x539),'missile']['includes'](_0x41fd51)&&(_0x4142fd=![]);for(const _0xcc7444 of _0x31552c){if(!_0xcc7444)continue;_0xcc7444['freezeMotion'](_0x41fd51,_0x4142fd,_0x3e8a15);}}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x315),_0x47b620=>{const _0x5e500f=_0x5bbf40;if(!SceneManager[_0x5e500f(0x277)]())return;VisuMZ['ConvertParams'](_0x47b620,_0x47b620);const _0x288fb4=VisuMZ['CreateActionSequenceTargets'](_0x47b620[_0x5e500f(0x3f1)]),_0x510a8a=_0x47b620[_0x5e500f(0x640)][_0x5e500f(0x993)]()[_0x5e500f(0x86c)](),_0x431f79=_0x47b620['ShowWeapon'];for(const _0x4142d7 of _0x288fb4){if(!_0x4142d7)continue;_0x4142d7[_0x5e500f(0x2e9)]=_0x431f79;if(_0x510a8a['match'](/ATTACK[ ](\d+)/i))_0x4142d7[_0x5e500f(0xb85)](Number(RegExp['$1']));else _0x510a8a===_0x5e500f(0x3d5)?_0x4142d7['performAttack']():_0x4142d7['requestMotion'](_0x510a8a);if(!_0x431f79)_0x4142d7[_0x5e500f(0x9ea)](0x0);else{if(_0x431f79&&[_0x5e500f(0x4a0),_0x5e500f(0x539),_0x5e500f(0x386)][_0x5e500f(0x608)](_0x510a8a)){}}_0x4142d7[_0x5e500f(0x2e9)]=undefined;}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x4cb),_0x3f149e=>{const _0x426b5d=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x426b5d(0x2c2)](_0x3f149e,_0x3f149e);const _0xbd5ad7=BattleManager[_0x426b5d(0x866)];if(!_0xbd5ad7)return;if(!_0xbd5ad7[_0x426b5d(0x92e)]())return;const _0x1fbc9d=VisuMZ[_0x426b5d(0xae5)](_0x3f149e[_0x426b5d(0x3f1)]);for(const _0x151426 of _0x1fbc9d){if(!_0x151426)continue;_0x151426[_0x426b5d(0xa7a)](_0xbd5ad7);}}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x6b2),_0x519973=>{const _0x228236=_0x5bbf40;if(!SceneManager[_0x228236(0x277)]())return;VisuMZ[_0x228236(0x2c2)](_0x519973,_0x519973);const _0x52ed16=VisuMZ[_0x228236(0xae5)](_0x519973[_0x228236(0x3f1)]);for(const _0x1c6e44 of _0x52ed16){if(!_0x1c6e44)continue;if(!_0x1c6e44[_0x228236(0xb3a)]())continue;_0x1c6e44['battler']()[_0x228236(0xb74)]();}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Motion_WaitMotionFrame',_0x25af54=>{const _0x29e608=_0x5bbf40;if(!SceneManager[_0x29e608(0x277)]())return;VisuMZ[_0x29e608(0x2c2)](_0x25af54,_0x25af54);const _0x2ab662=$gameTemp[_0x29e608(0x9c4)](),_0x21264e=_0x25af54['MotionFrameWait']*Sprite_Battler[_0x29e608(0x58f)];_0x2ab662[_0x29e608(0x7f0)](_0x21264e);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xb3d),_0x8f9930=>{const _0x20506a=_0x5bbf40;if(!SceneManager[_0x20506a(0x277)]())return;VisuMZ[_0x20506a(0x2c2)](_0x8f9930,_0x8f9930);const _0x419600=$gameTemp['getLastPluginCommandInterpreter'](),_0x34fee7=BattleManager['_action'];if(!_0x419600||!_0x34fee7)return;if(!_0x34fee7[_0x20506a(0x92e)]())return;const _0x1e80e7=VisuMZ['CreateActionSequenceTargets'](_0x8f9930[_0x20506a(0x3f1)]);for(const _0x349760 of _0x1e80e7){if(!_0x349760)continue;_0x349760[_0x20506a(0x7c0)](_0x34fee7);}if(_0x8f9930[_0x20506a(0x41f)])_0x419600[_0x20506a(0x61b)](_0x20506a(0x905));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xafd),_0x3f139c=>{const _0x48f4f5=_0x5bbf40;if(!SceneManager[_0x48f4f5(0x277)]())return;if(!$gameSystem[_0x48f4f5(0xb7a)]())return;VisuMZ[_0x48f4f5(0x2c2)](_0x3f139c,_0x3f139c);const _0x2e3213=$gameTemp[_0x48f4f5(0x9c4)](),_0x1aa30c=VisuMZ[_0x48f4f5(0xae5)](_0x3f139c[_0x48f4f5(0x3f1)]),_0x25f0b0=_0x3f139c[_0x48f4f5(0x558)],_0xe2be0b=_0x3f139c[_0x48f4f5(0x3eb)],_0x326b38=_0x3f139c[_0x48f4f5(0x4da)],_0x1f78c9=_0x3f139c['Duration'],_0x528ca8=_0x3f139c[_0x48f4f5(0xb58)],_0xbec647=_0x3f139c['EasingType'],_0x61eb2a=_0x3f139c['MotionType'],_0x34962b=_0x3f139c['WaitForMovement'];if(!_0x2e3213)return;const _0x3a534f=VisuMZ[_0x48f4f5(0x7d9)][_0x48f4f5(0x8be)];for(const _0x66af49 of _0x1aa30c){if(!_0x66af49)continue;let _0x406736=_0xe2be0b,_0x2d726c=_0x326b38;if(_0x25f0b0[_0x48f4f5(0x24d)](/horz/i))_0x406736*=_0x66af49['isActor']()?-0x1:0x1;if(_0x25f0b0['match'](/vert/i))_0x2d726c*=_0x66af49[_0x48f4f5(0xa32)]()?-0x1:0x1;if(_0x66af49['isActor']())_0x406736-=_0x3a534f[_0x48f4f5(0x9a5)][_0x48f4f5(0x294)],_0x2d726c-=_0x3a534f[_0x48f4f5(0x9a5)][_0x48f4f5(0x41b)];else _0x66af49[_0x48f4f5(0x37d)]()&&(_0x406736-=_0x3a534f['Enemy']['OffsetX'],_0x2d726c-=_0x3a534f['Enemy'][_0x48f4f5(0x41b)]);const _0x54072d=_0x406736;_0x66af49[_0x48f4f5(0x3b4)](_0x406736,_0x2d726c,_0x1f78c9,_0x528ca8,_0xbec647),_0x66af49[_0x48f4f5(0x5e6)](_0x61eb2a);}if(_0x34962b)_0x2e3213[_0x48f4f5(0x61b)](_0x48f4f5(0x905));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x71b),_0x50264a=>{const _0x2b805a=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x2b805a(0xb7a)]())return;VisuMZ['ConvertParams'](_0x50264a,_0x50264a);const _0x2d2bb6=$gameTemp[_0x2b805a(0x9c4)](),_0x221ce3=VisuMZ[_0x2b805a(0xae5)](_0x50264a[_0x2b805a(0x3f1)]),_0x323ac0=_0x50264a['OffsetAdjust'],_0x31c7d4=_0x50264a[_0x2b805a(0x294)],_0x3bc4b1=_0x50264a['OffsetY'],_0x174edf=_0x50264a['Duration'],_0x5c0076=_0x50264a[_0x2b805a(0xb58)],_0x1db15a=_0x50264a[_0x2b805a(0x5a4)],_0x34daaf=_0x50264a[_0x2b805a(0x640)],_0x31e134=_0x50264a[_0x2b805a(0x41f)];if(!_0x2d2bb6)return;for(const _0x47edc5 of _0x221ce3){if(!_0x47edc5)continue;const _0x26f10a=_0x50264a[_0x2b805a(0x867)](_0x47edc5)||{'x':0x0,'y':0x0};let _0x29cd33=_0x26f10a['x'],_0x4af76f=_0x26f10a['y'];if(_0x323ac0['match'](/none/i))_0x29cd33+=_0x31c7d4,_0x4af76f+=_0x3bc4b1;else{if(_0x323ac0[_0x2b805a(0x24d)](/horz/i)&&_0x323ac0[_0x2b805a(0x24d)](/vert/i))_0x29cd33+=_0x47edc5['isActor']()?-_0x31c7d4:_0x31c7d4,_0x4af76f+=_0x47edc5[_0x2b805a(0xa32)]()?-_0x3bc4b1:_0x3bc4b1;else{if(_0x323ac0[_0x2b805a(0x24d)](/horz/i))_0x29cd33+=_0x47edc5[_0x2b805a(0xa32)]()?-_0x31c7d4:_0x31c7d4,_0x4af76f+=_0x3bc4b1;else _0x323ac0[_0x2b805a(0x24d)](/vert/i)&&(_0x29cd33+=_0x31c7d4,_0x4af76f+=_0x47edc5['isActor']()?-_0x3bc4b1:_0x3bc4b1);}}_0x47edc5[_0x2b805a(0x93e)](_0x29cd33,_0x4af76f,_0x174edf,_0x5c0076,_0x1db15a,-0x1),_0x47edc5['requestMotion'](_0x34daaf);}if(_0x31e134)_0x2d2bb6[_0x2b805a(0x61b)](_0x2b805a(0x905));}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x24e),_0x11e903=>{const _0x1c6df9=_0x5bbf40;if(!SceneManager[_0x1c6df9(0x277)]())return;if(!$gameSystem[_0x1c6df9(0xb7a)]())return;VisuMZ[_0x1c6df9(0x2c2)](_0x11e903,_0x11e903);const _0x33e539=$gameTemp[_0x1c6df9(0x9c4)](),_0x6478e9=VisuMZ[_0x1c6df9(0xae5)](_0x11e903[_0x1c6df9(0x3f1)]),_0x2f22b4=_0x11e903[_0x1c6df9(0x876)],_0x570266=_0x11e903['OffsetAdjust'],_0x5d590f=_0x11e903[_0x1c6df9(0x294)],_0x404fc1=_0x11e903[_0x1c6df9(0x41b)],_0xb6df86=_0x11e903[_0x1c6df9(0x2f0)],_0x28dd3a=_0x11e903['FaceDirection'],_0x1f1e5c=_0x11e903['EasingType'],_0x5d03eb=_0x11e903[_0x1c6df9(0x640)],_0x1f9411=_0x11e903[_0x1c6df9(0x41f)];if(!_0x33e539)return;for(const _0x56a21a of _0x6478e9){if(!_0x56a21a)continue;let _0x297f7a=_0x56a21a['battler']()[_0x1c6df9(0x72f)],_0x4f4c9c=_0x56a21a['battler']()[_0x1c6df9(0x4f3)];if(_0x2f22b4['match'](/home/i))_0x297f7a=_0x56a21a[_0x1c6df9(0xb3a)]()['_homeX'],_0x4f4c9c=_0x56a21a['battler']()[_0x1c6df9(0x54e)];else{if(_0x2f22b4[_0x1c6df9(0x24d)](/center/i))_0x297f7a=Graphics['boxWidth']/0x2,_0x4f4c9c=Graphics[_0x1c6df9(0xa4b)]/0x2;else _0x2f22b4['match'](/point (\d+), (\d+)/i)&&(_0x297f7a=Number(RegExp['$1']),_0x4f4c9c=Number(RegExp['$2']));}if(_0x570266[_0x1c6df9(0x24d)](/none/i))_0x297f7a+=_0x5d590f,_0x4f4c9c+=_0x404fc1;else{if(_0x570266[_0x1c6df9(0x24d)](/horz/i)&&_0x570266['match'](/vert/i))_0x297f7a+=_0x56a21a[_0x1c6df9(0xa32)]()?-_0x5d590f:_0x5d590f,_0x4f4c9c+=_0x56a21a['isActor']()?-_0x404fc1:_0x404fc1;else{if(_0x570266[_0x1c6df9(0x24d)](/horz/i))_0x297f7a+=_0x56a21a[_0x1c6df9(0xa32)]()?-_0x5d590f:_0x5d590f,_0x4f4c9c+=_0x404fc1;else _0x570266[_0x1c6df9(0x24d)](/vert/i)&&(_0x297f7a+=_0x5d590f,_0x4f4c9c+=_0x56a21a['isActor']()?-_0x404fc1:_0x404fc1);}}_0x56a21a['moveBattlerHomeToPoint'](_0x297f7a,_0x4f4c9c,_0xb6df86,_0x28dd3a,_0x1f1e5c,-0x1),_0x56a21a[_0x1c6df9(0x5e6)](_0x5d03eb);}if(_0x1f9411)_0x33e539['setWaitMode'](_0x1c6df9(0x905));}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x233),_0x18e550=>{const _0x2fc03f=_0x5bbf40;if(!SceneManager[_0x2fc03f(0x277)]())return;if(!$gameSystem[_0x2fc03f(0xb7a)]())return;VisuMZ['ConvertParams'](_0x18e550,_0x18e550);const _0x54e739=$gameTemp[_0x2fc03f(0x9c4)](),_0x3e8ccd=VisuMZ[_0x2fc03f(0xae5)](_0x18e550[_0x2fc03f(0xb61)]),_0x353686=VisuMZ[_0x2fc03f(0xae5)](_0x18e550['Targets2']),_0x46175d=_0x18e550['TargetLocation'];let _0x1c664e=_0x18e550[_0x2fc03f(0x9bc)];const _0x1b6878=_0x18e550[_0x2fc03f(0x89b)],_0x1711b4=_0x18e550[_0x2fc03f(0x294)],_0x2a125a=_0x18e550[_0x2fc03f(0x41b)],_0x5112e1=_0x18e550[_0x2fc03f(0x2f0)],_0x172056=_0x18e550[_0x2fc03f(0xb58)],_0x3ecfb9=_0x18e550[_0x2fc03f(0x5a4)],_0x57f281=_0x18e550[_0x2fc03f(0x640)],_0x210607=_0x18e550[_0x2fc03f(0x41f)],_0x4d7e05=Math[_0x2fc03f(0xaf8)](..._0x353686[_0x2fc03f(0x6d6)](_0x4aee6b=>_0x4aee6b[_0x2fc03f(0xb3a)]()['_baseX']-_0x4aee6b[_0x2fc03f(0xb3a)]()[_0x2fc03f(0x344)]()/0x2)),_0x223cf9=Math[_0x2fc03f(0xb10)](..._0x353686[_0x2fc03f(0x6d6)](_0x30f939=>_0x30f939['battler']()[_0x2fc03f(0x72f)]+_0x30f939['battler']()['mainSpriteWidth']()/0x2)),_0x593a56=Math[_0x2fc03f(0xaf8)](..._0x353686[_0x2fc03f(0x6d6)](_0x372888=>_0x372888[_0x2fc03f(0xb3a)]()[_0x2fc03f(0x4f3)]-_0x372888[_0x2fc03f(0xb3a)]()[_0x2fc03f(0x3db)]())),_0x1fc32b=Math[_0x2fc03f(0xb10)](..._0x353686[_0x2fc03f(0x6d6)](_0xfe36e5=>_0xfe36e5[_0x2fc03f(0xb3a)]()[_0x2fc03f(0x4f3)])),_0x11d5e2=_0x353686[_0x2fc03f(0xafb)](_0x370508=>_0x370508[_0x2fc03f(0xa32)]())[_0x2fc03f(0x348)],_0x283965=_0x353686['filter'](_0x3fed92=>_0x3fed92['isEnemy']())['length'];let _0x520fee=0x0,_0x2b8df9=0x0;if(_0x46175d['match'](/front/i))_0x520fee=_0x11d5e2>=_0x283965?_0x4d7e05:_0x223cf9;else{if(_0x46175d[_0x2fc03f(0x24d)](/middle/i))_0x520fee=(_0x4d7e05+_0x223cf9)/0x2,_0x1c664e=-0x1;else _0x46175d[_0x2fc03f(0x24d)](/back/i)&&(_0x520fee=_0x11d5e2>=_0x283965?_0x223cf9:_0x4d7e05);}if(_0x46175d['match'](/head/i))_0x2b8df9=_0x593a56;else{if(_0x46175d['match'](/center/i))_0x2b8df9=(_0x593a56+_0x1fc32b)/0x2;else _0x46175d['match'](/base/i)&&(_0x2b8df9=_0x1fc32b);}if(!_0x54e739)return;for(const _0x1d1214 of _0x3e8ccd){if(!_0x1d1214)continue;let _0x460203=_0x520fee,_0x504066=_0x2b8df9;if(_0x1b6878['match'](/none/i))_0x460203+=_0x1711b4,_0x504066+=_0x2a125a;else{if(_0x1b6878['match'](/horz/i)&&_0x1b6878['match'](/vert/i))_0x460203+=_0x1d1214['isActor']()?-_0x1711b4:_0x1711b4,_0x504066+=_0x1d1214[_0x2fc03f(0xa32)]()?-_0x2a125a:_0x2a125a;else{if(_0x1b6878['match'](/horz/i))_0x460203+=_0x1d1214[_0x2fc03f(0xa32)]()?-_0x1711b4:_0x1711b4,_0x504066+=_0x2a125a;else _0x1b6878['match'](/vert/i)&&(_0x460203+=_0x1711b4,_0x504066+=_0x1d1214[_0x2fc03f(0xa32)]()?-_0x2a125a:_0x2a125a);}}_0x1d1214[_0x2fc03f(0x93e)](_0x460203,_0x504066,_0x5112e1,_0x172056,_0x3ecfb9,_0x1c664e),_0x1d1214[_0x2fc03f(0x5e6)](_0x57f281);}if(_0x210607)_0x54e739[_0x2fc03f(0x61b)](_0x2fc03f(0x905));}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x5b7),_0x420f8e=>{const _0x5f3425=_0x5bbf40;if(!SceneManager[_0x5f3425(0x277)]())return;if(!$gameSystem[_0x5f3425(0xb7a)]())return;VisuMZ[_0x5f3425(0x2c2)](_0x420f8e,_0x420f8e);const _0x23f17c=VisuMZ[_0x5f3425(0xae5)](_0x420f8e[_0x5f3425(0x3f1)]);let _0xdf9106=_0x420f8e[_0x5f3425(0x2a3)][_0x5f3425(0x24d)](/back/i);for(const _0x4cee52 of _0x23f17c){if(!_0x4cee52)continue;if(_0x420f8e[_0x5f3425(0x2a3)]['match'](/rand/i))_0xdf9106=Math[_0x5f3425(0xac8)](0x2);_0x4cee52[_0x5f3425(0x369)](!!_0xdf9106);}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x6f3),_0x1ed94a=>{const _0x58c1ec=_0x5bbf40;if(!SceneManager[_0x58c1ec(0x277)]())return;if(!$gameSystem[_0x58c1ec(0xb7a)]())return;VisuMZ['ConvertParams'](_0x1ed94a,_0x1ed94a);const _0x1d3f74=VisuMZ['CreateActionSequenceTargets'](_0x1ed94a[_0x58c1ec(0x3f1)]),_0x560492=_0x1ed94a[_0x58c1ec(0x7fb)];for(const _0x2c8da9 of _0x1d3f74){if(!_0x2c8da9)continue;const _0x139f95=_0x1ed94a[_0x58c1ec(0x562)](_0x2c8da9)||{'x':0x0,'y':0x0};let _0x5c8d09=_0x139f95['x'],_0x182c13=_0x139f95['y'];_0x2c8da9['setBattlerFacePoint'](Math['round'](_0x5c8d09),Math[_0x58c1ec(0x6ea)](_0x182c13),!!_0x560492);}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x218),_0x93ba89=>{const _0x4746a3=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x4746a3(0xb7a)]())return;VisuMZ[_0x4746a3(0x2c2)](_0x93ba89,_0x93ba89);const _0x1cdf94=VisuMZ[_0x4746a3(0xae5)](_0x93ba89[_0x4746a3(0x3f1)]);let _0x8a3893=_0x93ba89[_0x4746a3(0x310)];const _0x4d53d1=_0x93ba89[_0x4746a3(0x7fb)];for(const _0x20c0be of _0x1cdf94){if(!_0x20c0be)continue;let _0x2dbfe1=_0x20c0be['battler']()['_baseX'],_0x27f23f=_0x20c0be[_0x4746a3(0xb3a)]()[_0x4746a3(0x4f3)];if(_0x8a3893[_0x4746a3(0x24d)](/home/i))_0x2dbfe1=_0x20c0be[_0x4746a3(0xb3a)]()[_0x4746a3(0x8f6)],_0x27f23f=_0x20c0be[_0x4746a3(0xb3a)]()[_0x4746a3(0x54e)];else{if(_0x8a3893[_0x4746a3(0x24d)](/center/i))_0x2dbfe1=Graphics[_0x4746a3(0x99d)]/0x2,_0x27f23f=Graphics['boxHeight']/0x2;else _0x8a3893[_0x4746a3(0x24d)](/point (\d+), (\d+)/i)&&(_0x2dbfe1=Number(RegExp['$1']),_0x27f23f=Number(RegExp['$2']));}_0x20c0be['setBattlerFacePoint'](Math[_0x4746a3(0x6ea)](_0x2dbfe1),Math[_0x4746a3(0x6ea)](_0x27f23f),!!_0x4d53d1);}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x6e7),_0x5d17de=>{const _0x271bfc=_0x5bbf40;if(!SceneManager[_0x271bfc(0x277)]())return;if(!$gameSystem[_0x271bfc(0xb7a)]())return;VisuMZ['ConvertParams'](_0x5d17de,_0x5d17de);const _0x26c9c4=VisuMZ[_0x271bfc(0xae5)](_0x5d17de[_0x271bfc(0xb61)]),_0x2fcb64=VisuMZ[_0x271bfc(0xae5)](_0x5d17de['Targets2']),_0x32f384=_0x2fcb64['map'](_0x3a4443=>_0x3a4443&&_0x3a4443[_0x271bfc(0xb3a)]()?_0x3a4443[_0x271bfc(0xb3a)]()[_0x271bfc(0x72f)]:0x0)/(_0x2fcb64[_0x271bfc(0x348)]||0x1),_0x2028d7=_0x2fcb64[_0x271bfc(0x6d6)](_0x54cd9a=>_0x54cd9a&&_0x54cd9a[_0x271bfc(0xb3a)]()?_0x54cd9a[_0x271bfc(0xb3a)]()['_baseY']:0x0)/(_0x2fcb64[_0x271bfc(0x348)]||0x1),_0x3278f8=_0x5d17de[_0x271bfc(0x7fb)];for(const _0x418c64 of _0x26c9c4){if(!_0x418c64)continue;_0x418c64['setBattlerFacePoint'](Math[_0x271bfc(0x6ea)](_0x32f384),Math['round'](_0x2028d7),!!_0x3278f8);}}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x4ae),_0xb7ecb0=>{const _0xbab638=_0x5bbf40;if(!SceneManager[_0xbab638(0x277)]())return;VisuMZ[_0xbab638(0x2c2)](_0xb7ecb0,_0xb7ecb0);const _0x1ec045=$gameTemp['getLastPluginCommandInterpreter'](),_0x435e3f=VisuMZ[_0xbab638(0xae5)](_0xb7ecb0[_0xbab638(0x3f1)]),_0x3b2f49=_0xb7ecb0[_0xbab638(0xa9b)],_0xa1d41=_0xb7ecb0[_0xbab638(0x2f0)],_0x3b700f=_0xb7ecb0[_0xbab638(0x5a4)],_0x41a508=_0xb7ecb0[_0xbab638(0x684)];if(!_0x1ec045)return;for(const _0x29a667 of _0x435e3f){if(!_0x29a667)continue;_0x29a667[_0xbab638(0x2dc)](_0x3b2f49,_0xa1d41,_0x3b700f);}if(_0x41a508)_0x1ec045[_0xbab638(0x61b)](_0xbab638(0x5a9));}),PluginManager['registerCommand'](pluginData['name'],_0x5bbf40(0x879),_0x122ba5=>{const _0x5998c4=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5998c4(0x2c2)](_0x122ba5,_0x122ba5);const _0x532b3a=$gameTemp[_0x5998c4(0x9c4)]();if(!_0x532b3a)return;const _0x49835e=VisuMZ['CreateActionSequenceTargets'](_0x122ba5[_0x5998c4(0x3f1)]);for(const _0x2fc22d of _0x49835e){if(!_0x2fc22d)continue;_0x2fc22d['performActionEndMembers']();}BattleManager['_subject']&&BattleManager[_0x5998c4(0xb88)]['performActionEnd']();if(_0x122ba5[_0x5998c4(0x41f)])_0x532b3a[_0x5998c4(0x61b)](_0x5998c4(0x905));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x584),_0x235abf=>{const _0x526db4=_0x5bbf40;if(!SceneManager[_0x526db4(0x277)]())return;VisuMZ['ConvertParams'](_0x235abf,_0x235abf);const _0x4dba33=$gameTemp[_0x526db4(0x9c4)](),_0x27c0cf=VisuMZ[_0x526db4(0xae5)](_0x235abf[_0x526db4(0x3f1)]),_0x3f12cf=_0x235abf[_0x526db4(0xa9b)],_0xede054=_0x235abf[_0x526db4(0x2f0)],_0x21aaac=_0x235abf[_0x526db4(0xb46)];if(!_0x4dba33)return;for(const _0xab6889 of _0x27c0cf){if(!_0xab6889)continue;_0xab6889[_0x526db4(0x4ca)](_0x3f12cf,_0xede054);}if(_0x21aaac)_0x4dba33[_0x526db4(0x61b)]('battleJump');}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xb3e),_0x2f2440=>{const _0x167759=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x167759(0xb7a)]())return;VisuMZ[_0x167759(0x2c2)](_0x2f2440,_0x2f2440);const _0x10590c=$gameTemp['getLastPluginCommandInterpreter'](),_0x396b9d=VisuMZ['CreateActionSequenceTargets'](_0x2f2440['Targets']),_0x27296a=_0x2f2440[_0x167759(0x558)],_0x30d2a3=_0x2f2440[_0x167759(0x3eb)],_0x100136=_0x2f2440[_0x167759(0x4da)],_0x2e52a1=_0x2f2440[_0x167759(0x2f0)],_0x486879=_0x2f2440[_0x167759(0xb58)],_0x5bf3a2=_0x2f2440[_0x167759(0x5a4)],_0x51d2e8=_0x2f2440[_0x167759(0x640)],_0x1084e8=_0x2f2440[_0x167759(0x41f)];if(!_0x10590c)return;for(const _0x2e7881 of _0x396b9d){if(!_0x2e7881)continue;let _0x26ad3b=_0x30d2a3,_0x404ae3=_0x100136;if(_0x27296a[_0x167759(0x24d)](/horz/i))_0x26ad3b*=_0x2e7881[_0x167759(0xa32)]()?-0x1:0x1;if(_0x27296a[_0x167759(0x24d)](/vert/i))_0x404ae3*=_0x2e7881[_0x167759(0xa32)]()?-0x1:0x1;_0x2e7881[_0x167759(0xbc4)](_0x26ad3b,_0x404ae3,_0x2e52a1,_0x486879,_0x5bf3a2),_0x2e7881[_0x167759(0x5e6)](_0x51d2e8);}if(_0x1084e8)_0x10590c[_0x167759(0x61b)](_0x167759(0x905));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x3e5),_0x444e81=>{const _0x48d395=_0x5bbf40;if(!SceneManager[_0x48d395(0x277)]())return;if(!$gameSystem[_0x48d395(0xb7a)]())return;VisuMZ[_0x48d395(0x2c2)](_0x444e81,_0x444e81);const _0x290dfb=$gameTemp[_0x48d395(0x9c4)](),_0x15810f=VisuMZ[_0x48d395(0xae5)](_0x444e81['Targets']),_0x4ce706=_0x444e81[_0x48d395(0x89b)],_0x557c04=_0x444e81[_0x48d395(0x294)],_0x1683cf=_0x444e81[_0x48d395(0x41b)],_0x11c33f=_0x444e81['Duration'],_0x2c4919=_0x444e81['FaceDirection'],_0xa193ce=_0x444e81['EasingType'],_0x5f133a=_0x444e81[_0x48d395(0x640)],_0x326001=_0x444e81[_0x48d395(0x41f)];if(!_0x290dfb)return;for(const _0x6c24f0 of _0x15810f){if(!_0x6c24f0)continue;const _0x1c06e2=_0x444e81[_0x48d395(0x867)](_0x6c24f0)||{'x':0x0,'y':0x0};let _0x5228ed=_0x1c06e2['x'],_0x5f5a6f=_0x1c06e2['y'];if(_0x4ce706[_0x48d395(0x24d)](/none/i))_0x5228ed+=_0x557c04,_0x5f5a6f+=_0x1683cf;else{if(_0x4ce706[_0x48d395(0x24d)](/horz/i)&&_0x4ce706[_0x48d395(0x24d)](/vert/i))_0x5228ed+=_0x6c24f0['isActor']()?-_0x557c04:_0x557c04,_0x5f5a6f+=_0x6c24f0[_0x48d395(0xa32)]()?-_0x1683cf:_0x1683cf;else{if(_0x4ce706[_0x48d395(0x24d)](/horz/i))_0x5228ed+=_0x6c24f0[_0x48d395(0xa32)]()?-_0x557c04:_0x557c04,_0x5f5a6f+=_0x1683cf;else _0x4ce706[_0x48d395(0x24d)](/vert/i)&&(_0x5228ed+=_0x557c04,_0x5f5a6f+=_0x6c24f0[_0x48d395(0xa32)]()?-_0x1683cf:_0x1683cf);}}_0x6c24f0['moveBattlerToPoint'](_0x5228ed,_0x5f5a6f,_0x11c33f,_0x2c4919,_0xa193ce,-0x1),_0x6c24f0[_0x48d395(0x5e6)](_0x5f133a);}if(_0x326001)_0x290dfb[_0x48d395(0x61b)](_0x48d395(0x905));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x8ab),_0x59ce56=>{const _0x33eaa3=_0x5bbf40;if(!SceneManager[_0x33eaa3(0x277)]())return;if(!$gameSystem[_0x33eaa3(0xb7a)]())return;VisuMZ[_0x33eaa3(0x2c2)](_0x59ce56,_0x59ce56);const _0x187acd=$gameTemp['getLastPluginCommandInterpreter'](),_0x1e05ae=VisuMZ[_0x33eaa3(0xae5)](_0x59ce56[_0x33eaa3(0x3f1)]),_0x507146=_0x59ce56[_0x33eaa3(0x876)],_0x2d2b2b=_0x59ce56[_0x33eaa3(0x89b)],_0x186042=_0x59ce56['OffsetX'],_0x1357e3=_0x59ce56['OffsetY'],_0x4ce9b3=_0x59ce56[_0x33eaa3(0x2f0)],_0x5d98d6=_0x59ce56[_0x33eaa3(0xb58)],_0x266334=_0x59ce56[_0x33eaa3(0x5a4)],_0x16b965=_0x59ce56[_0x33eaa3(0x640)],_0x44b63a=_0x59ce56[_0x33eaa3(0x41f)];if(!_0x187acd)return;for(const _0x471df6 of _0x1e05ae){if(!_0x471df6)continue;let _0x5d1bdc=_0x471df6[_0x33eaa3(0xb3a)]()['_baseX'],_0x2fd7fe=_0x471df6[_0x33eaa3(0xb3a)]()['_baseY'];if(_0x507146[_0x33eaa3(0x24d)](/home/i))_0x5d1bdc=_0x471df6[_0x33eaa3(0xb3a)]()[_0x33eaa3(0x8f6)],_0x2fd7fe=_0x471df6[_0x33eaa3(0xb3a)]()[_0x33eaa3(0x54e)];else{if(_0x507146['match'](/center/i))_0x5d1bdc=Graphics[_0x33eaa3(0x99d)]/0x2,_0x2fd7fe=Graphics[_0x33eaa3(0xa4b)]/0x2;else _0x507146[_0x33eaa3(0x24d)](/point (\d+), (\d+)/i)&&(_0x5d1bdc=Number(RegExp['$1']),_0x2fd7fe=Number(RegExp['$2']));}if(_0x2d2b2b['match'](/none/i))_0x5d1bdc+=_0x186042,_0x2fd7fe+=_0x1357e3;else{if(_0x2d2b2b['match'](/horz/i)&&_0x2d2b2b['match'](/vert/i))_0x5d1bdc+=_0x471df6[_0x33eaa3(0xa32)]()?-_0x186042:_0x186042,_0x2fd7fe+=_0x471df6[_0x33eaa3(0xa32)]()?-_0x1357e3:_0x1357e3;else{if(_0x2d2b2b[_0x33eaa3(0x24d)](/horz/i))_0x5d1bdc+=_0x471df6[_0x33eaa3(0xa32)]()?-_0x186042:_0x186042,_0x2fd7fe+=_0x1357e3;else _0x2d2b2b[_0x33eaa3(0x24d)](/vert/i)&&(_0x5d1bdc+=_0x186042,_0x2fd7fe+=_0x471df6['isActor']()?-_0x1357e3:_0x1357e3);}}_0x471df6[_0x33eaa3(0xb0c)](_0x5d1bdc,_0x2fd7fe,_0x4ce9b3,_0x5d98d6,_0x266334,-0x1),_0x471df6[_0x33eaa3(0x5e6)](_0x16b965);}if(_0x44b63a)_0x187acd[_0x33eaa3(0x61b)](_0x33eaa3(0x905));}),PluginManager['registerCommand'](pluginData['name'],_0x5bbf40(0x637),_0x46c603=>{const _0x52165f=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x52165f(0x2c2)](_0x46c603,_0x46c603);const _0x8bd6fa=$gameTemp[_0x52165f(0x9c4)](),_0x3d56aa=VisuMZ['CreateActionSequenceTargets'](_0x46c603['Targets1']),_0x29cfb8=VisuMZ[_0x52165f(0xae5)](_0x46c603[_0x52165f(0x6f7)]),_0xa1b0b1=_0x46c603[_0x52165f(0x99e)];let _0x306ef7=_0x46c603[_0x52165f(0x9bc)];const _0x38deab=_0x46c603[_0x52165f(0x89b)],_0x82b86a=_0x46c603[_0x52165f(0x294)],_0xa65dc7=_0x46c603[_0x52165f(0x41b)],_0x3a65dd=_0x46c603[_0x52165f(0x2f0)],_0x1a6c5b=_0x46c603[_0x52165f(0xb58)],_0x1acd4a=_0x46c603['EasingType'],_0xcfdaf7=_0x46c603[_0x52165f(0x640)],_0x280890=_0x46c603[_0x52165f(0x41f)],_0x43876a=Math[_0x52165f(0xaf8)](..._0x29cfb8[_0x52165f(0x6d6)](_0x45302b=>_0x45302b[_0x52165f(0xb3a)]()[_0x52165f(0x72f)]-_0x45302b[_0x52165f(0xb3a)]()[_0x52165f(0x344)]()/0x2)),_0x149afd=Math[_0x52165f(0xb10)](..._0x29cfb8[_0x52165f(0x6d6)](_0x33ca05=>_0x33ca05[_0x52165f(0xb3a)]()[_0x52165f(0x72f)]+_0x33ca05[_0x52165f(0xb3a)]()['mainSpriteWidth']()/0x2)),_0xd836cd=Math[_0x52165f(0xaf8)](..._0x29cfb8[_0x52165f(0x6d6)](_0x14ba7c=>_0x14ba7c[_0x52165f(0xb3a)]()[_0x52165f(0x4f3)]-_0x14ba7c['battler']()['mainSpriteHeight']())),_0x19f7dc=Math[_0x52165f(0xb10)](..._0x29cfb8[_0x52165f(0x6d6)](_0x4d9238=>_0x4d9238[_0x52165f(0xb3a)]()[_0x52165f(0x4f3)])),_0x21031a=_0x29cfb8[_0x52165f(0xafb)](_0x1efb7b=>_0x1efb7b[_0x52165f(0xa32)]())['length'],_0x5c2bd5=_0x29cfb8['filter'](_0x33bc83=>_0x33bc83[_0x52165f(0x37d)]())['length'];let _0x36a942=0x0,_0x32d15c=0x0;if(_0xa1b0b1[_0x52165f(0x24d)](/front/i))_0x36a942=_0x21031a>=_0x5c2bd5?_0x43876a:_0x149afd;else{if(_0xa1b0b1[_0x52165f(0x24d)](/middle/i))_0x36a942=(_0x43876a+_0x149afd)/0x2,_0x306ef7=-0x1;else _0xa1b0b1['match'](/back/i)&&(_0x36a942=_0x21031a>=_0x5c2bd5?_0x149afd:_0x43876a);}if(_0xa1b0b1[_0x52165f(0x24d)](/head/i))_0x32d15c=_0xd836cd;else{if(_0xa1b0b1[_0x52165f(0x24d)](/center/i))_0x32d15c=(_0xd836cd+_0x19f7dc)/0x2;else _0xa1b0b1[_0x52165f(0x24d)](/base/i)&&(_0x32d15c=_0x19f7dc);}if(!_0x8bd6fa)return;for(const _0x329ffa of _0x3d56aa){if(!_0x329ffa)continue;let _0x4f083d=_0x36a942,_0xcb73ee=_0x32d15c;if(_0x38deab[_0x52165f(0x24d)](/none/i))_0x4f083d+=_0x82b86a,_0xcb73ee+=_0xa65dc7;else{if(_0x38deab[_0x52165f(0x24d)](/horz/i)&&_0x38deab[_0x52165f(0x24d)](/vert/i))_0x4f083d+=_0x329ffa[_0x52165f(0xa32)]()?-_0x82b86a:_0x82b86a,_0xcb73ee+=_0x329ffa[_0x52165f(0xa32)]()?-_0xa65dc7:_0xa65dc7;else{if(_0x38deab[_0x52165f(0x24d)](/horz/i))_0x4f083d+=_0x329ffa[_0x52165f(0xa32)]()?-_0x82b86a:_0x82b86a,_0xcb73ee+=_0xa65dc7;else _0x38deab[_0x52165f(0x24d)](/vert/i)&&(_0x4f083d+=_0x82b86a,_0xcb73ee+=_0x329ffa[_0x52165f(0xa32)]()?-_0xa65dc7:_0xa65dc7);}}_0x329ffa[_0x52165f(0xb0c)](_0x4f083d,_0xcb73ee,_0x3a65dd,_0x1a6c5b,_0x1acd4a,_0x306ef7),_0x329ffa[_0x52165f(0x5e6)](_0xcfdaf7);}if(_0x280890)_0x8bd6fa[_0x52165f(0x61b)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x71a),_0x17acc7=>{const _0x12c911=_0x5bbf40;if(!SceneManager[_0x12c911(0x277)]())return;VisuMZ[_0x12c911(0x2c2)](_0x17acc7,_0x17acc7);const _0x4bab78=$gameTemp[_0x12c911(0x9c4)](),_0x17ea57=VisuMZ['CreateActionSequenceTargets'](_0x17acc7['Targets']),_0x2be5b6=_0x17acc7[_0x12c911(0x897)],_0x5a8621=_0x17acc7[_0x12c911(0x2f0)],_0x561686=_0x17acc7['EasingType'],_0x3942c3=_0x17acc7[_0x12c911(0x415)];if(!_0x4bab78)return;for(const _0x2d0fee of _0x17ea57){if(!_0x2d0fee)continue;_0x2d0fee[_0x12c911(0x59a)](_0x2be5b6,_0x5a8621,_0x561686);}if(_0x3942c3)_0x4bab78[_0x12c911(0x61b)](_0x12c911(0x51c));}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x355),_0x10e67f=>{const _0x30bb5=_0x5bbf40;if(!SceneManager[_0x30bb5(0x277)]())return;VisuMZ[_0x30bb5(0x2c2)](_0x10e67f,_0x10e67f);const _0x36c05b=$gameTemp[_0x30bb5(0x9c4)](),_0x574542=VisuMZ[_0x30bb5(0xae5)](_0x10e67f[_0x30bb5(0x3f1)]),_0x1ec01d=_0x10e67f[_0x30bb5(0xb1f)],_0x37d67d=_0x10e67f[_0x30bb5(0x948)],_0x425931=_0x10e67f[_0x30bb5(0x2f0)],_0x80de70=_0x10e67f[_0x30bb5(0x5a4)],_0x4918f6=_0x10e67f[_0x30bb5(0x61a)];if(!_0x36c05b)return;for(const _0x33dd6b of _0x574542){if(!_0x33dd6b)continue;_0x33dd6b[_0x30bb5(0x299)](_0x1ec01d,_0x37d67d,_0x425931,_0x80de70);}if(_0x4918f6)_0x36c05b[_0x30bb5(0x61b)](_0x30bb5(0x263));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xa59),_0x2c0306=>{const _0x3f4168=_0x5bbf40;if(!SceneManager[_0x3f4168(0x277)]())return;VisuMZ[_0x3f4168(0x2c2)](_0x2c0306,_0x2c0306);const _0x189851=$gameTemp['getLastPluginCommandInterpreter'](),_0x1e0e61=VisuMZ[_0x3f4168(0xae5)](_0x2c0306[_0x3f4168(0x3f1)]),_0x2dfcba=_0x2c0306[_0x3f4168(0x3b5)],_0x187c31=_0x2c0306[_0x3f4168(0x964)],_0xfde89=_0x2c0306['Duration'],_0x6f46ee=_0x2c0306[_0x3f4168(0x5a4)],_0x1e7125=_0x2c0306['WaitForSkew'];if(!_0x189851)return;for(const _0x9927c3 of _0x1e0e61){if(!_0x9927c3)continue;_0x9927c3[_0x3f4168(0x82c)](_0x2dfcba,_0x187c31,_0xfde89,_0x6f46ee);}if(_0x1e7125)_0x189851[_0x3f4168(0x61b)](_0x3f4168(0xa38));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x72d),_0x1d3633=>{const _0x21c075=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x21c075(0x2c2)](_0x1d3633,_0x1d3633);const _0x27d1ac=$gameTemp['getLastPluginCommandInterpreter'](),_0x39bcbc=VisuMZ['CreateActionSequenceTargets'](_0x1d3633[_0x21c075(0x3f1)]),_0x2a3938=_0x1d3633[_0x21c075(0x7bd)],_0x3ee17b=_0x1d3633[_0x21c075(0x2f0)],_0x4b0347=_0x1d3633[_0x21c075(0x5a4)],_0x535df6=_0x1d3633[_0x21c075(0x761)],_0xbb3278=_0x1d3633['WaitForSpin'];if(!_0x27d1ac)return;for(const _0x5a017c of _0x39bcbc){if(!_0x5a017c)continue;_0x5a017c['spinBattler'](_0x2a3938,_0x3ee17b,_0x4b0347,_0x535df6);}if(_0xbb3278)_0x27d1ac[_0x21c075(0x61b)](_0x21c075(0x24c));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xbe1),_0xc236e6=>{const _0x329a0a=_0x5bbf40;if(!SceneManager[_0x329a0a(0x277)]())return;const _0x52ac0a=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x52ac0a)return;_0x52ac0a[_0x329a0a(0x61b)](_0x329a0a(0x5a9));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Movement_WaitForJump',_0x42a556=>{const _0x49614a=_0x5bbf40;if(!SceneManager[_0x49614a(0x277)]())return;const _0x567f2a=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x567f2a)return;_0x567f2a['setWaitMode'](_0x49614a(0x6db));}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Movement_WaitForMovement',_0x53be90=>{const _0x4f506a=_0x5bbf40;if(!SceneManager[_0x4f506a(0x277)]())return;const _0x5d11d2=$gameTemp[_0x4f506a(0x9c4)]();if(!_0x5d11d2)return;_0x5d11d2[_0x4f506a(0x61b)](_0x4f506a(0x905));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x9cc),_0x4103c0=>{const _0x557234=_0x5bbf40;if(!SceneManager[_0x557234(0x277)]())return;const _0x2817a5=$gameTemp[_0x557234(0x9c4)]();if(!_0x2817a5)return;_0x2817a5[_0x557234(0x61b)]('battleOpacity');}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x3fc),_0x5eae2e=>{const _0x1e070b=_0x5bbf40;if(!SceneManager[_0x1e070b(0x277)]())return;const _0x42b8a4=$gameTemp[_0x1e070b(0x9c4)]();if(!_0x42b8a4)return;_0x42b8a4[_0x1e070b(0x61b)](_0x1e070b(0x263));}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x7c6),_0x1af417=>{const _0x1d6a45=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;const _0x117a4f=$gameTemp[_0x1d6a45(0x9c4)]();if(!_0x117a4f)return;_0x117a4f[_0x1d6a45(0x61b)]('battleSpriteSkew');}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x260),_0x401bf0=>{const _0x2b1cad=_0x5bbf40;if(!SceneManager[_0x2b1cad(0x277)]())return;const _0x13d69f=$gameTemp[_0x2b1cad(0x9c4)]();if(!_0x13d69f)return;_0x13d69f['setWaitMode'](_0x2b1cad(0x24c));}),VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x53e)]=function(){const _0x17adcc=_0x5bbf40;if(!Imported[_0x17adcc(0x350)])return;if(VisuMZ[_0x17adcc(0x669)][_0x17adcc(0x77e)]<1.08){let _0x5db50d='';_0x5db50d+=_0x17adcc(0xae2),_0x5db50d+='in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.',alert(_0x5db50d),SceneManager[_0x17adcc(0x593)]();}},PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x9ca),_0xbf6173=>{const _0x3af7a6=_0x5bbf40;if(!SceneManager[_0x3af7a6(0x277)]())return;if(!Imported[_0x3af7a6(0x350)])return;VisuMZ[_0x3af7a6(0x2c2)](_0xbf6173,_0xbf6173),VisuMZ['BattleCore'][_0x3af7a6(0x53e)]();const _0x499901=$gameTemp['getLastPluginCommandInterpreter'](),_0x23c20d=_0xbf6173[_0x3af7a6(0xaf9)];if(!_0x499901)return;const _0x5f35fa=BattleManager[_0x3af7a6(0x3c3)];if(!_0x5f35fa)return;_0x5f35fa[_0x3af7a6(0x42b)](_0xbf6173);if(_0x23c20d)_0x499901[_0x3af7a6(0x61b)](_0x3af7a6(0x542));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x366),_0x2338dc=>{const _0x258941=_0x5bbf40;if(!SceneManager[_0x258941(0x277)]())return;if(!Imported[_0x258941(0x350)])return;VisuMZ[_0x258941(0x2c2)](_0x2338dc,_0x2338dc),VisuMZ[_0x258941(0x7d9)][_0x258941(0x53e)]();const _0x82619c=$gameTemp[_0x258941(0x9c4)](),_0x5e47ec=_0x2338dc[_0x258941(0xaf9)];if(!_0x82619c)return;const _0x1d3c78=BattleManager[_0x258941(0x3c3)];if(!_0x1d3c78)return;_0x1d3c78['createActionSequenceProjectile'](_0x2338dc);if(_0x5e47ec)_0x82619c[_0x258941(0x61b)](_0x258941(0x542));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Projectile_Picture',_0x2aed79=>{const _0x22793a=_0x5bbf40;if(!SceneManager[_0x22793a(0x277)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x22793a(0x2c2)](_0x2aed79,_0x2aed79),VisuMZ[_0x22793a(0x7d9)][_0x22793a(0x53e)]();const _0x403d28=$gameTemp[_0x22793a(0x9c4)](),_0x5e0745=_0x2aed79[_0x22793a(0xaf9)];if(!_0x403d28)return;const _0x33ceb5=BattleManager[_0x22793a(0x3c3)];if(!_0x33ceb5)return;_0x33ceb5['createActionSequenceProjectile'](_0x2aed79);if(_0x5e0745)_0x403d28['setWaitMode'](_0x22793a(0x542));}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xa83),_0x58fb6c=>{const _0x2fd00d=_0x5bbf40;if(!SceneManager[_0x2fd00d(0x277)]())return;if(!Imported[_0x2fd00d(0x846)])return;VisuMZ[_0x2fd00d(0x2c2)](_0x58fb6c,_0x58fb6c);const _0x524e99=$gameTemp['getLastPluginCommandInterpreter'](),_0x540061=_0x58fb6c[_0x2fd00d(0xacb)];if(!_0x524e99)return;$gameScreen['setBattleSkew'](_0x58fb6c[_0x2fd00d(0x3b5)],_0x58fb6c['SkewY'],_0x58fb6c[_0x2fd00d(0x2f0)],_0x58fb6c[_0x2fd00d(0x5a4)]);if(_0x540061)_0x524e99[_0x2fd00d(0x61b)](_0x2fd00d(0x35b));}),PluginManager['registerCommand'](pluginData['name'],_0x5bbf40(0x6cc),_0x47c0c3=>{const _0x42d13f=_0x5bbf40;if(!SceneManager[_0x42d13f(0x277)]())return;if(!Imported[_0x42d13f(0x846)])return;VisuMZ[_0x42d13f(0x2c2)](_0x47c0c3,_0x47c0c3);const _0x320d69=$gameTemp['getLastPluginCommandInterpreter'](),_0x562bb4=_0x47c0c3[_0x42d13f(0xacb)];if(!_0x320d69)return;$gameScreen[_0x42d13f(0xb34)](0x0,0x0,_0x47c0c3[_0x42d13f(0x2f0)],_0x47c0c3['EasingType']);if(_0x562bb4)_0x320d69[_0x42d13f(0x61b)]('battleSkew');}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x5cd),_0x18b246=>{const _0x5d520f=_0x5bbf40;if(!SceneManager[_0x5d520f(0x277)]())return;if(!Imported[_0x5d520f(0x846)])return;const _0x89ca4d=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x89ca4d)return;_0x89ca4d[_0x5d520f(0x61b)](_0x5d520f(0x35b));}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x688),_0xe1a74a=>{const _0x12c453=_0x5bbf40;if(!SceneManager[_0x12c453(0x277)]())return;VisuMZ['ConvertParams'](_0xe1a74a,_0xe1a74a);const _0x5a0816=$gameTemp[_0x12c453(0x9c4)](),_0x359600=_0xe1a74a[_0x12c453(0x9b8)],_0x52d76d=_0xe1a74a['JumpToLabel'];if(!_0x5a0816)return;BattleManager['_targetIndex']=_0x359600,BattleManager[_0x12c453(0x958)]=BattleManager[_0x12c453(0x414)]?BattleManager[_0x12c453(0x414)][BattleManager[_0x12c453(0xb11)]]||null:null,BattleManager[_0x12c453(0x958)]&&_0x52d76d[_0x12c453(0x6ca)]()[_0x12c453(0x86c)]()!==_0x12c453(0x917)&&_0x5a0816[_0x12c453(0x805)]([_0x52d76d]);}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],'ActSeq_Target_NextTarget',_0x51dd45=>{const _0x4cef47=_0x5bbf40;if(!SceneManager[_0x4cef47(0x277)]())return;VisuMZ[_0x4cef47(0x2c2)](_0x51dd45,_0x51dd45);const _0x4545b8=$gameTemp['getLastPluginCommandInterpreter'](),_0x4b0625=_0x51dd45['JumpToLabel'];if(!_0x4545b8)return;BattleManager[_0x4cef47(0xb11)]++,BattleManager[_0x4cef47(0x958)]=BattleManager[_0x4cef47(0x414)][BattleManager[_0x4cef47(0xb11)]]||null,BattleManager['_target']&&_0x4b0625[_0x4cef47(0x6ca)]()[_0x4cef47(0x86c)]()!==_0x4cef47(0x917)&&_0x4545b8[_0x4cef47(0x805)]([_0x4b0625]);}),PluginManager['registerCommand'](pluginData['name'],_0x5bbf40(0x8aa),_0x1ce3e3=>{const _0x4aa792=_0x5bbf40;if(!SceneManager[_0x4aa792(0x277)]())return;VisuMZ['ConvertParams'](_0x1ce3e3,_0x1ce3e3);const _0xaffa5=$gameTemp[_0x4aa792(0x9c4)](),_0x3de75a=_0x1ce3e3[_0x4aa792(0xb32)];if(!_0xaffa5)return;BattleManager['_targetIndex']--,BattleManager[_0x4aa792(0x958)]=BattleManager[_0x4aa792(0x414)][BattleManager[_0x4aa792(0xb11)]]||null,BattleManager[_0x4aa792(0x958)]&&_0x3de75a['toUpperCase']()[_0x4aa792(0x86c)]()!==_0x4aa792(0x917)&&_0xaffa5[_0x4aa792(0x805)]([_0x3de75a]);}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x6b3),_0x66b815=>{const _0x2bc79b=_0x5bbf40;if(!SceneManager[_0x2bc79b(0x277)]())return;VisuMZ[_0x2bc79b(0x2c2)](_0x66b815,_0x66b815);const _0x2d9c3b=$gameTemp['getLastPluginCommandInterpreter'](),_0x179f60=_0x66b815[_0x2bc79b(0x8c4)],_0x34086b=_0x66b815[_0x2bc79b(0xb32)];if(!_0x2d9c3b)return;const _0x28b6f6=BattleManager['_targetIndex'];for(;;){BattleManager['_targetIndex']=Math[_0x2bc79b(0xac8)](BattleManager[_0x2bc79b(0x414)][_0x2bc79b(0x348)]);if(!_0x179f60)break;if(BattleManager[_0x2bc79b(0xb11)]!==_0x28b6f6)break;if(BattleManager[_0x2bc79b(0x414)][_0x2bc79b(0x348)]<=0x1){BattleManager[_0x2bc79b(0xb11)]=0x0;break;}}BattleManager['_target']=BattleManager['_allTargets'][BattleManager[_0x2bc79b(0xb11)]]||null,BattleManager[_0x2bc79b(0x958)]&&_0x34086b[_0x2bc79b(0x6ca)]()['trim']()!==_0x2bc79b(0x917)&&_0x2d9c3b['command119']([_0x34086b]);}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x8af),_0x11e5a9=>{const _0x5052ab=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5052ab(0x6b7)])return;if(!ConfigManager['battleVoices'])return;VisuMZ['ConvertParams'](_0x11e5a9,_0x11e5a9);const _0x3f8353=VisuMZ[_0x5052ab(0xae5)](_0x11e5a9[_0x5052ab(0x3f1)]);let _0x25dda1=_0x11e5a9[_0x5052ab(0x9c8)]||'';for(const _0x48027e of _0x3f8353){if(!_0x48027e)continue;_0x48027e[_0x5052ab(0x6a1)](_0x25dda1);}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0x7fd),_0x273b62=>{const _0x31cb3c=_0x5bbf40;if(!SceneManager[_0x31cb3c(0x277)]())return;if(!Imported['VisuMZ_3_BattleVoices'])return;if(!ConfigManager[_0x31cb3c(0x22a)])return;VisuMZ[_0x31cb3c(0x2c2)](_0x273b62,_0x273b62);const _0x2df685=VisuMZ[_0x31cb3c(0xae5)](_0x273b62[_0x31cb3c(0x3f1)]);let _0x213f57=(_0x273b62[_0x31cb3c(0x4d8)]||'')+(_0x273b62['Letter']||'');for(const _0x35d439 of _0x2df685){if(!_0x35d439)continue;_0x35d439[_0x31cb3c(0x6a1)](_0x213f57);}}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],_0x5bbf40(0x9bd),_0x302cab=>{const _0x9d3ef4=_0x5bbf40;if(!SceneManager[_0x9d3ef4(0x277)]())return;VisuMZ[_0x9d3ef4(0x2c2)](_0x302cab,_0x302cab);const _0x1c70ca=VisuMZ[_0x9d3ef4(0xae5)](_0x302cab['Targets']);for(const _0x18de0c of _0x1c70ca){if(!_0x18de0c)continue;if(!_0x18de0c['isActor']())continue;_0x18de0c[_0x9d3ef4(0x242)]();}}),PluginManager[_0x5bbf40(0x468)](pluginData[_0x5bbf40(0x4e5)],_0x5bbf40(0xa09),_0x48e3c2=>{const _0x553cf5=_0x5bbf40;if(!SceneManager[_0x553cf5(0x277)]())return;VisuMZ[_0x553cf5(0x2c2)](_0x48e3c2,_0x48e3c2);const _0x45db8b=$gameTemp[_0x553cf5(0x9c4)]();let _0x419ae4=![];const _0x332a20=_0x48e3c2[_0x553cf5(0xb32)],_0x58310b=VisuMZ[_0x553cf5(0xae5)](_0x48e3c2[_0x553cf5(0x3f1)]);for(const _0x52da53 of _0x58310b){if(!_0x52da53)continue;if(!_0x52da53[_0x553cf5(0xa32)]())continue;_0x52da53['nextActiveWeaponSlot'](),_0x52da53[_0x553cf5(0x836)]()[_0x553cf5(0x348)]>0x0?_0x419ae4=!![]:_0x52da53[_0x553cf5(0x242)]();}_0x419ae4&&_0x332a20[_0x553cf5(0x6ca)]()[_0x553cf5(0x86c)]()!==_0x553cf5(0x917)&&_0x45db8b['command119']([_0x332a20]);}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],'ActSeq_Weapon_SetActiveWeapon',_0xf10ad1=>{const _0x52fc87=_0x5bbf40;if(!SceneManager[_0x52fc87(0x277)]())return;VisuMZ[_0x52fc87(0x2c2)](_0xf10ad1,_0xf10ad1);let _0x301784=_0xf10ad1['SlotID'];_0x301784--,_0x301784=Math[_0x52fc87(0xb10)](_0x301784,0x0);const _0x3bb8a3=VisuMZ[_0x52fc87(0xae5)](_0xf10ad1[_0x52fc87(0x3f1)]);for(const _0xfdca02 of _0x3bb8a3){if(!_0xfdca02)continue;if(!_0xfdca02['isActor']())continue;_0xfdca02[_0x52fc87(0x5f2)](_0x301784);}}),PluginManager[_0x5bbf40(0x468)](pluginData['name'],'ActSeq_Zoom_Scale',_0x7b586d=>{const _0x237e41=_0x5bbf40;if(!SceneManager[_0x237e41(0x277)]())return;if(!Imported[_0x237e41(0x846)])return;VisuMZ[_0x237e41(0x2c2)](_0x7b586d,_0x7b586d);const _0x4f5564=$gameTemp['getLastPluginCommandInterpreter'](),_0x304d84=_0x7b586d[_0x237e41(0x43f)];if(!_0x4f5564)return;$gameScreen[_0x237e41(0x585)](_0x7b586d[_0x237e41(0x756)],_0x7b586d[_0x237e41(0x2f0)],_0x7b586d[_0x237e41(0x5a4)]);if(_0x304d84)_0x4f5564['setWaitMode'](_0x237e41(0xc03));}),PluginManager['registerCommand'](pluginData['name'],_0x5bbf40(0x3a7),_0x4f0cf7=>{const _0x2988a4=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2988a4(0x846)])return;VisuMZ[_0x2988a4(0x2c2)](_0x4f0cf7,_0x4f0cf7);const _0x3bc0d4=$gameTemp[_0x2988a4(0x9c4)](),_0x1ce8fd=_0x4f0cf7[_0x2988a4(0x43f)];if(!_0x3bc0d4)return;$gameScreen['setBattleZoom'](0x1,_0x4f0cf7[_0x2988a4(0x2f0)],_0x4f0cf7[_0x2988a4(0x5a4)]);if(_0x1ce8fd)_0x3bc0d4[_0x2988a4(0x61b)](_0x2988a4(0xc03));}),PluginManager['registerCommand'](pluginData[_0x5bbf40(0x4e5)],'ActSeq_Zoom_WaitForZoom',_0x154562=>{const _0x2671f8=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2671f8(0x846)])return;const _0x4bac77=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4bac77)return;_0x4bac77['setWaitMode'](_0x2671f8(0xc03));}),VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x583)]=Scene_Boot['prototype']['onDatabaseLoaded'],Scene_Boot[_0x5bbf40(0x68c)][_0x5bbf40(0x2bc)]=function(){const _0x21994e=_0x5bbf40;this[_0x21994e(0xb77)](),this[_0x21994e(0x5bf)](),this[_0x21994e(0x276)](),this[_0x21994e(0xc15)](),VisuMZ['BattleCore'][_0x21994e(0x583)][_0x21994e(0x86a)](this),this['process_VisuMZ_BattleCore_Notetags'](),this['process_VisuMZ_BattleCore_BaseTroops'](),this[_0x21994e(0x695)](),this[_0x21994e(0x23b)]();},Scene_Boot['prototype']['process_VisuMZ_BattleCore_Notetags']=function(){const _0x25f248=_0x5bbf40;if(VisuMZ[_0x25f248(0x8da)])return;this['process_VisuMZ_BattleCore_Action_Notetags'](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this[_0x25f248(0x6ee)]();},Scene_Boot[_0x5bbf40(0x68c)]['process_VisuMZ_BattleCore_Failsafes']=function(){const _0x4379ac=_0x5bbf40,_0x520694=$dataSystem[_0x4379ac(0x481)][_0x4379ac(0x348)];for(let _0x4d3901=0x0;_0x4d3901<_0x520694;_0x4d3901++){const _0x553de6=$dataSystem[_0x4379ac(0x96d)][_0x4d3901];if(_0x553de6)continue;$dataSystem[_0x4379ac(0x96d)][_0x4d3901]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x5bbf40(0x68c)][_0x5bbf40(0x5bf)]=function(){const _0x180b7c=_0x5bbf40,_0x2293d5=VisuMZ['BattleCore'][_0x180b7c(0x8be)];_0x2293d5['Damage'][_0x180b7c(0x995)]===undefined&&(_0x2293d5[_0x180b7c(0x363)][_0x180b7c(0x995)]=_0x180b7c(0x5ff)),_0x2293d5[_0x180b7c(0x9a5)][_0x180b7c(0x753)]===undefined&&(_0x2293d5[_0x180b7c(0x9a5)]['SmoothImage']=![]),_0x2293d5[_0x180b7c(0x51a)][_0x180b7c(0x753)]===undefined&&(_0x2293d5['Enemy'][_0x180b7c(0x753)]=!![]),_0x2293d5[_0x180b7c(0x9a5)]['PrioritySortActive']===undefined&&(_0x2293d5[_0x180b7c(0x9a5)][_0x180b7c(0x70f)]=![]),_0x2293d5['Actor'][_0x180b7c(0xbf2)]===undefined&&(_0x2293d5[_0x180b7c(0x9a5)][_0x180b7c(0xbf2)]=!![]);},VisuMZ[_0x5bbf40(0x81b)]={},Scene_Boot[_0x5bbf40(0x68c)][_0x5bbf40(0x276)]=function(){const _0x2c73e0=_0x5bbf40;for(const _0x3e0c75 of VisuMZ[_0x2c73e0(0x7d9)][_0x2c73e0(0x8be)]['Damage'][_0x2c73e0(0x7a3)]){if(!_0x3e0c75)continue;const _0x57cf47=_0x3e0c75[_0x2c73e0(0x2fd)][_0x2c73e0(0x6ca)]()[_0x2c73e0(0x86c)]();VisuMZ[_0x2c73e0(0x81b)][_0x57cf47]=_0x3e0c75;}},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x44e)]={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot[_0x5bbf40(0x68c)]['process_VisuMZ_BattleCore_CreateRegExp']=function(){const _0xdb3645=_0x5bbf40,_0xdb5131=VisuMZ['BattleCore']['RegExp'],_0x12cc6e=_0xdb3645(0xb6a),_0x561112=[[_0xdb3645(0xa10),_0xdb3645(0x91d)],[_0xdb3645(0xb81),'POST-']],_0x5a487c=[[_0xdb3645(0x3cc),_0xdb3645(0xae4)],[_0xdb3645(0xbf3),_0xdb3645(0x6dc)]],_0x30552f=[['',''],[_0xdb3645(0x489),_0xdb3645(0xab9)],['AsTarget',_0xdb3645(0x878)]];for(const _0x2f955a of _0x5a487c){for(const _0x3e38ba of _0x30552f){for(const _0x52c490 of _0x561112){const _0x18a551=_0x2f955a[0x0][_0xdb3645(0x7c2)](_0x52c490[0x0],_0x3e38ba[0x0]),_0x141e37=_0x2f955a[0x1]['format'](_0x52c490[0x1],_0x3e38ba[0x1])[_0xdb3645(0x86c)](),_0x39dd87=new RegExp(_0x12cc6e[_0xdb3645(0x7c2)](_0x141e37),'i');_0xdb5131[_0x18a551]=_0x39dd87;}}}const _0x204261=[[_0xdb3645(0x53c),_0xdb3645(0x21e)],[_0xdb3645(0xbcb),_0xdb3645(0x88e)]];for(const _0x200857 of _0x204261){for(const _0x2e329d of _0x561112){const _0x5ed9dd=_0x200857[0x0]['format'](_0x2e329d[0x0]),_0x24c024=_0x200857[0x1][_0xdb3645(0x7c2)](_0x2e329d[0x1]),_0x15ccc2=new RegExp(_0x12cc6e['format'](_0x24c024),'i');_0xdb5131[_0x5ed9dd]=_0x15ccc2;}}const _0x1f4b31=[[_0xdb3645(0x2d5),_0xdb3645(0x863)],[_0xdb3645(0x4bc),_0xdb3645(0x22d)],[_0xdb3645(0xb7b),_0xdb3645(0x708)],[_0xdb3645(0xbbe),_0xdb3645(0x77b)],[_0xdb3645(0x459),_0xdb3645(0x700)],[_0xdb3645(0x747),'JS\x20ESCAPE\x20FAILURE'],[_0xdb3645(0x324),_0xdb3645(0x56a)],[_0xdb3645(0xa71),_0xdb3645(0x4a3)],[_0xdb3645(0x93a),_0xdb3645(0x886)]];for(const _0x1563bb of _0x1f4b31){for(const _0x5df5eb of _0x561112){const _0x67a8d3=_0x1563bb[0x0][_0xdb3645(0x7c2)](_0x5df5eb[0x0]),_0x4907d1=_0x1563bb[0x1]['format'](_0x5df5eb[0x1]),_0x371417=new RegExp(_0x12cc6e['format'](_0x4907d1),'i');_0xdb5131[_0x67a8d3]=_0x371417;}}},Scene_Boot[_0x5bbf40(0x68c)]['process_VisuMZ_BattleCore_Action_Notetags']=function(){const _0x2599b0=_0x5bbf40,_0x220814=$dataSkills[_0x2599b0(0xa80)]($dataItems);for(const _0x273511 of _0x220814){if(!_0x273511)continue;VisuMZ[_0x2599b0(0x7d9)][_0x2599b0(0xb42)](_0x273511);}},Scene_Boot[_0x5bbf40(0x68c)][_0x5bbf40(0x9ef)]=function(){const _0x251c97=_0x5bbf40,_0x433a7a=$dataActors[_0x251c97(0xa80)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x8e4e0c of _0x433a7a){if(!_0x8e4e0c)continue;VisuMZ[_0x251c97(0x7d9)][_0x251c97(0x82b)](_0x8e4e0c);}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_BaseTroops']=function(){const _0x4efdf5=_0x5bbf40,_0x1b6d20=VisuMZ[_0x4efdf5(0x7d9)][_0x4efdf5(0x8be)][_0x4efdf5(0x815)]['BaseTroopIDs'],_0x3f7d1a=[];for(const _0x12e5b9 of _0x1b6d20){const _0x4211cc=$dataTroops[_0x12e5b9];if(_0x4211cc)_0x3f7d1a['push'](JsonEx[_0x4efdf5(0xb4b)](_0x4211cc));}for(const _0x1bf5d6 of $dataTroops){if(!_0x1bf5d6)continue;for(const _0x40a5d6 of _0x3f7d1a){if(_0x40a5d6['id']===_0x1bf5d6['id'])continue;_0x1bf5d6[_0x4efdf5(0x9bb)]=_0x1bf5d6[_0x4efdf5(0x9bb)][_0x4efdf5(0xa80)](_0x40a5d6['pages']);}}},Scene_Boot[_0x5bbf40(0x68c)][_0x5bbf40(0x695)]=function(){const _0x42499f=_0x5bbf40,_0x2fd4de=VisuMZ[_0x42499f(0x7d9)][_0x42499f(0x8be)][_0x42499f(0x815)];if(_0x2fd4de['BattleStartEvent']>0x0&&$dataCommonEvents[_0x2fd4de[_0x42499f(0x9de)]]){const _0x4bf673=$dataCommonEvents[_0x2fd4de[_0x42499f(0x9de)]],_0x37046e=_0x4bf673[_0x42499f(0x62f)][_0x42499f(0x348)]-0x2,_0x466580=_0x4bf673[_0x42499f(0x62f)][_0x37046e];if(_0x466580&&_0x466580[_0x42499f(0x96f)]!==0xe6){const _0xeabf1b={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x222c64=_0x4bf673[_0x42499f(0x62f)]['pop']();_0x4bf673[_0x42499f(0x62f)][_0x42499f(0x6a9)](_0xeabf1b),_0x4bf673[_0x42499f(0x62f)][_0x42499f(0x6a9)](_0x222c64);}}},Scene_Boot[_0x5bbf40(0x68c)][_0x5bbf40(0x23b)]=function(){const _0x1c5e23=_0x5bbf40;VisuMZ[_0x1c5e23(0x7d9)]['CreateCommonEventKeys'](),VisuMZ['BattleCore'][_0x1c5e23(0x49c)]($dataSkills),VisuMZ[_0x1c5e23(0x7d9)]['BindCommonEventKeysForGroup']($dataItems);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x727)]=function(){const _0x315e25=_0x5bbf40;VisuMZ['BattleCore'][_0x315e25(0x7b1)]={};for(const _0x43a45b of $dataCommonEvents){if(!_0x43a45b)continue;if(_0x43a45b[_0x315e25(0x4e5)]['match'](/\[(.*)\]/i)){let _0x5ed591=String(RegExp['$1'])[_0x315e25(0xbd9)](/,/g,'')[_0x315e25(0x6ca)]()[_0x315e25(0x86c)]();VisuMZ[_0x315e25(0x7d9)][_0x315e25(0x7b1)][_0x5ed591]=_0x43a45b['id'];}}},VisuMZ[_0x5bbf40(0x7d9)]['BindCommonEventKeysForGroup']=function(_0x2072bf){const _0x23a3e2=_0x5bbf40;for(const _0xb99106 of _0x2072bf){if(!_0xb99106)continue;VisuMZ[_0x23a3e2(0x7d9)][_0x23a3e2(0x26b)](_0xb99106);}},VisuMZ[_0x5bbf40(0x7d9)]['BindCommonEventKeysForObj']=function(_0x236642){const _0x27743e=_0x5bbf40;if(!_0x236642)return;if(!_0x236642[_0x27743e(0x74d)])return;VisuMZ[_0x27743e(0x7d9)]['_commonEventKey']=VisuMZ['BattleCore']['_commonEventKey']||{};const _0x33de31=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x104ab8=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x30709c=[];const _0x46710f=_0x236642[_0x27743e(0x509)][_0x27743e(0x24d)](_0x33de31);if(_0x46710f){for(const _0x4be408 of _0x46710f){_0x4be408['match'](_0x33de31);const _0x2db81d=String(RegExp['$1'])[_0x27743e(0x728)](',')[_0x27743e(0x6d6)](_0x586377=>String(_0x586377)['toUpperCase']()['trim']());_0x30709c=_0x30709c[_0x27743e(0xa80)](_0x2db81d);}!_0x236642[_0x27743e(0x509)][_0x27743e(0x24d)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x236642[_0x27743e(0x509)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}if(_0x236642[_0x27743e(0x509)][_0x27743e(0x24d)](_0x104ab8)){const _0x27be49=String(RegExp['$1'])[_0x27743e(0x728)](/[\r\n]+/)[_0x27743e(0x6d6)](_0xfae696=>String(_0xfae696)['toUpperCase']()[_0x27743e(0x86c)]());_0x30709c=_0x30709c[_0x27743e(0xa80)](_0x27be49);!_0x236642[_0x27743e(0x509)][_0x27743e(0x24d)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x236642[_0x27743e(0x509)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}for(const _0x327e10 of _0x30709c){if(VisuMZ[_0x27743e(0x7d9)][_0x27743e(0x7b1)][_0x327e10]){const _0x567746=VisuMZ[_0x27743e(0x7d9)][_0x27743e(0x7b1)][_0x327e10],_0x269a2d={'code':0x2c,'dataId':_0x567746,'value1':0x1,'value2':0x0};_0x236642[_0x27743e(0x74d)][_0x27743e(0x9cb)](_0x269a2d);}}},Scene_Boot[_0x5bbf40(0x68c)][_0x5bbf40(0x6ee)]=function(){const _0x2b8be0=_0x5bbf40,_0x59e988=$dataSkills['concat']($dataItems);for(const _0x56badf of _0x59e988){if(!_0x56badf)continue;VisuMZ[_0x2b8be0(0x7d9)][_0x2b8be0(0xb2e)](_0x56badf);}},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x4b8)]=VisuMZ[_0x5bbf40(0x4b8)],VisuMZ[_0x5bbf40(0x4b8)]=function(_0x5ebe01){const _0xf30759=_0x5bbf40;VisuMZ[_0xf30759(0x7d9)][_0xf30759(0x4b8)]&&VisuMZ[_0xf30759(0x7d9)]['ParseActorNotetags'][_0xf30759(0x86a)](this,_0x5ebe01),VisuMZ[_0xf30759(0x7d9)][_0xf30759(0x82b)](_0x5ebe01);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x722)]=VisuMZ['ParseClassNotetags'],VisuMZ[_0x5bbf40(0x722)]=function(_0x5dadbd){const _0x3115a4=_0x5bbf40;VisuMZ['BattleCore'][_0x3115a4(0x722)]&&VisuMZ[_0x3115a4(0x7d9)][_0x3115a4(0x722)]['call'](this,_0x5dadbd),VisuMZ[_0x3115a4(0x7d9)]['Parse_Notetags_TraitObjects'](_0x5dadbd);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x9d4)]=VisuMZ[_0x5bbf40(0x9d4)],VisuMZ['ParseSkillNotetags']=function(_0xf3907f){const _0x4f1279=_0x5bbf40;VisuMZ['BattleCore'][_0x4f1279(0x9d4)]&&VisuMZ[_0x4f1279(0x7d9)][_0x4f1279(0x9d4)]['call'](this,_0xf3907f),VisuMZ[_0x4f1279(0x7d9)][_0x4f1279(0xb42)](_0xf3907f),VisuMZ['BattleCore'][_0x4f1279(0xb2e)](_0xf3907f);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x7e4)]=VisuMZ['ParseItemNotetags'],VisuMZ[_0x5bbf40(0x7e4)]=function(_0x351a04){const _0x2f0108=_0x5bbf40;VisuMZ[_0x2f0108(0x7d9)][_0x2f0108(0x7e4)]&&VisuMZ['BattleCore']['ParseItemNotetags'][_0x2f0108(0x86a)](this,_0x351a04),VisuMZ[_0x2f0108(0x7d9)][_0x2f0108(0xb42)](_0x351a04),VisuMZ[_0x2f0108(0x7d9)][_0x2f0108(0xb2e)](_0x351a04);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x7bf)]=VisuMZ[_0x5bbf40(0x7bf)],VisuMZ['ParseWeaponNotetags']=function(_0x59eec9){const _0x5b200d=_0x5bbf40;VisuMZ[_0x5b200d(0x7d9)][_0x5b200d(0x7bf)]&&VisuMZ[_0x5b200d(0x7d9)][_0x5b200d(0x7bf)][_0x5b200d(0x86a)](this,_0x59eec9),VisuMZ[_0x5b200d(0x7d9)]['Parse_Notetags_TraitObjects'](_0x59eec9);},VisuMZ['BattleCore'][_0x5bbf40(0xb2d)]=VisuMZ[_0x5bbf40(0xb2d)],VisuMZ[_0x5bbf40(0xb2d)]=function(_0x125394){const _0x4ffde0=_0x5bbf40;VisuMZ[_0x4ffde0(0x7d9)][_0x4ffde0(0xb2d)]&&VisuMZ[_0x4ffde0(0x7d9)][_0x4ffde0(0xb2d)][_0x4ffde0(0x86a)](this,_0x125394),VisuMZ[_0x4ffde0(0x7d9)][_0x4ffde0(0x82b)](_0x125394);},VisuMZ[_0x5bbf40(0x7d9)]['ParseEnemyNotetags']=VisuMZ[_0x5bbf40(0x956)],VisuMZ[_0x5bbf40(0x956)]=function(_0x43e30a){const _0x125c02=_0x5bbf40;VisuMZ[_0x125c02(0x7d9)][_0x125c02(0x956)]&&VisuMZ[_0x125c02(0x7d9)][_0x125c02(0x956)][_0x125c02(0x86a)](this,_0x43e30a),VisuMZ['BattleCore'][_0x125c02(0x82b)](_0x43e30a);},VisuMZ['BattleCore'][_0x5bbf40(0x267)]=VisuMZ[_0x5bbf40(0x267)],VisuMZ['ParseStateNotetags']=function(_0x461ed6){const _0x3b31ac=_0x5bbf40;VisuMZ[_0x3b31ac(0x7d9)][_0x3b31ac(0x267)]&&VisuMZ[_0x3b31ac(0x7d9)]['ParseStateNotetags'][_0x3b31ac(0x86a)](this,_0x461ed6),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x461ed6);},VisuMZ[_0x5bbf40(0x7d9)]['Parse_Notetags_Action']=function(_0x547b14){const _0x45d248=_0x5bbf40,_0x476b53=[_0x45d248(0x76b),_0x45d248(0xa1d),'PreDamageJS',_0x45d248(0x915),'PreStartActionJS',_0x45d248(0x792),'PreEndActionJS','PostEndActionJS'];for(const _0x3a5435 of _0x476b53){VisuMZ['BattleCore'][_0x45d248(0x99a)](_0x547b14,_0x3a5435);}const _0x3cd2cc=_0x547b14[_0x45d248(0x509)];_0x3cd2cc[_0x45d248(0x24d)](/<ALWAYS CRITICAL/i)&&(_0x547b14[_0x45d248(0x9df)][_0x45d248(0x89d)]=!![]),_0x3cd2cc[_0x45d248(0x24d)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x547b14[_0x45d248(0xbc9)]=Math['max'](0x1,Number(RegExp['$1']))),_0x3cd2cc[_0x45d248(0x24d)](/<TARGET:[ ](.*)>/i)&&(_0x547b14[_0x45d248(0x740)]=String(RegExp['$1'])['toUpperCase']()[_0x45d248(0x86c)]());},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x82b)]=function(_0x29a59a){const _0x72f8a=_0x5bbf40,_0x1979a8=[_0x72f8a(0x73a),'PostApplyAsUserJS','PreDamageAsUserJS',_0x72f8a(0x6d9),_0x72f8a(0x377),_0x72f8a(0x79f),_0x72f8a(0xb05),_0x72f8a(0x624),_0x72f8a(0xab7),_0x72f8a(0x792),_0x72f8a(0x553),_0x72f8a(0xac4),_0x72f8a(0x726),_0x72f8a(0x782),'PreEndBattleJS','PostEndBattleJS',_0x72f8a(0xb7b),_0x72f8a(0xbbe),_0x72f8a(0x459),_0x72f8a(0x747),_0x72f8a(0xb79),_0x72f8a(0xba0),_0x72f8a(0x37e),_0x72f8a(0x7e0),'PreRegenerateJS',_0x72f8a(0x80b)];for(const _0x255c43 of _0x1979a8){VisuMZ['BattleCore'][_0x72f8a(0x99a)](_0x29a59a,_0x255c43);}const _0x584ba1=[_0x72f8a(0x66d),_0x72f8a(0x9be),_0x72f8a(0xaf1),_0x72f8a(0x969),_0x72f8a(0xbb2)];for(const _0x36da28 of _0x584ba1){VisuMZ[_0x72f8a(0x7d9)][_0x72f8a(0x875)](_0x29a59a,_0x36da28);}},VisuMZ['BattleCore'][_0x5bbf40(0xb2e)]=function(_0xa637ad){const _0x3f0f8e=_0x5bbf40,_0x1ae614=_0xa637ad[_0x3f0f8e(0x509)];if(_0x1ae614['match'](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x5178f5=String(RegExp['$1']),_0x3372ae=VisuMZ['BattleCore'][_0x3f0f8e(0xa6b)](_0xa637ad,_0x3f0f8e(0x3f1));VisuMZ['BattleCore'][_0x3f0f8e(0x8ba)](_0x5178f5,_0x3372ae);}if(_0x1ae614[_0x3f0f8e(0x24d)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x2e6e9a=String(RegExp['$1']),_0x30e023=VisuMZ[_0x3f0f8e(0x7d9)][_0x3f0f8e(0xa6b)](_0xa637ad,_0x3f0f8e(0x28b));VisuMZ[_0x3f0f8e(0x7d9)][_0x3f0f8e(0x288)](_0x2e6e9a,_0x30e023);}},VisuMZ[_0x5bbf40(0x7d9)]['JS']={},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x99a)]=function(_0x4b4e1b,_0x4217b9){const _0x2e744a=_0x5bbf40,_0x4cffe9=_0x4b4e1b[_0x2e744a(0x509)];if(_0x4cffe9[_0x2e744a(0x24d)](VisuMZ['BattleCore'][_0x2e744a(0x44e)][_0x4217b9])){const _0x47d70d=RegExp['$1'],_0x35d51b=_0x2e744a(0x69e)[_0x2e744a(0x7c2)](_0x47d70d),_0x2796fd=VisuMZ[_0x2e744a(0x7d9)][_0x2e744a(0xa6b)](_0x4b4e1b,_0x4217b9);VisuMZ[_0x2e744a(0x7d9)]['JS'][_0x2796fd]=new Function(_0x35d51b);}},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xa6b)]=function(_0xae9d87,_0x243646){const _0x236b9b=_0x5bbf40;if(VisuMZ['createKeyJS'])return VisuMZ['createKeyJS'](_0xae9d87,_0x243646);let _0x475889='';if($dataActors[_0x236b9b(0x608)](_0xae9d87))_0x475889='Actor-%1-%2'['format'](_0xae9d87['id'],_0x243646);if($dataClasses[_0x236b9b(0x608)](_0xae9d87))_0x475889=_0x236b9b(0xb90)[_0x236b9b(0x7c2)](_0xae9d87['id'],_0x243646);if($dataSkills[_0x236b9b(0x608)](_0xae9d87))_0x475889=_0x236b9b(0xae3)[_0x236b9b(0x7c2)](_0xae9d87['id'],_0x243646);if($dataItems[_0x236b9b(0x608)](_0xae9d87))_0x475889=_0x236b9b(0xb8c)['format'](_0xae9d87['id'],_0x243646);if($dataWeapons[_0x236b9b(0x608)](_0xae9d87))_0x475889='Weapon-%1-%2'[_0x236b9b(0x7c2)](_0xae9d87['id'],_0x243646);if($dataArmors[_0x236b9b(0x608)](_0xae9d87))_0x475889=_0x236b9b(0x644)[_0x236b9b(0x7c2)](_0xae9d87['id'],_0x243646);if($dataEnemies[_0x236b9b(0x608)](_0xae9d87))_0x475889=_0x236b9b(0x7db)[_0x236b9b(0x7c2)](_0xae9d87['id'],_0x243646);if($dataStates['includes'](_0xae9d87))_0x475889=_0x236b9b(0x2f6)[_0x236b9b(0x7c2)](_0xae9d87['id'],_0x243646);return _0x475889;},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8ba)]=function(_0x251820,_0x4b9b94){const _0x6a8ea8=_0x5bbf40,_0x575caa='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'['format'](_0x251820);VisuMZ[_0x6a8ea8(0x7d9)]['JS'][_0x4b9b94]=new Function(_0x575caa);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x288)]=function(_0x5e630b,_0x5afc27){const _0x2f9b7c=_0x5bbf40,_0x3a709d='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20'['format'](_0x5e630b);VisuMZ[_0x2f9b7c(0x7d9)]['JS'][_0x5afc27]=new Function(_0x3a709d);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x875)]=function(_0x22b5ff,_0x81d523){const _0x5afb0e=_0x5bbf40,_0x13580a=_0x22b5ff['note'];if(_0x13580a[_0x5afb0e(0x24d)](VisuMZ[_0x5afb0e(0x7d9)][_0x5afb0e(0x44e)][_0x81d523])){const _0x1c1621=RegExp['$1'],_0x54c90=_0x5afb0e(0x35d)[_0x5afb0e(0x7c2)](_0x1c1621),_0x527acb=VisuMZ[_0x5afb0e(0x7d9)][_0x5afb0e(0xa6b)](_0x22b5ff,_0x81d523);VisuMZ[_0x5afb0e(0x7d9)]['JS'][_0x527acb]=new Function(_0x54c90);}},TextManager['autoBattle']=VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8be)]['PartyCmd'][_0x5bbf40(0x55d)],TextManager[_0x5bbf40(0x406)]=VisuMZ['BattleCore'][_0x5bbf40(0x8be)]['AutoBattle'][_0x5bbf40(0x60f)],TextManager[_0x5bbf40(0x266)]=VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8be)]['AutoBattle'][_0x5bbf40(0x822)],TextManager[_0x5bbf40(0xa4f)]=VisuMZ['BattleCore'][_0x5bbf40(0x8be)][_0x5bbf40(0x430)][_0x5bbf40(0x2fd)],ColorManager[_0x5bbf40(0xbc1)]=function(_0x309739){const _0x3fc68f=_0x5bbf40;return _0x309739=String(_0x309739),_0x309739['match'](/#(.*)/i)?'#%1'['format'](String(RegExp['$1'])):this[_0x3fc68f(0x6b9)](Number(_0x309739));},DataManager[_0x5bbf40(0xbc5)]=function(_0x62cb81){const _0x4f5338=_0x5bbf40;if(_0x62cb81[_0x4f5338(0x509)][_0x4f5338(0x24d)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x1cfdd1=String(RegExp['$1'])[_0x4f5338(0x6ca)]()[_0x4f5338(0x86c)]();if(_0x1cfdd1==='MANUAL')return _0x4f5338(0x9c1);if(VisuMZ[_0x4f5338(0x81b)][_0x1cfdd1])return _0x1cfdd1;}const _0x22086b=VisuMZ['BattleCore'][_0x4f5338(0x8be)][_0x4f5338(0x363)]['DefaultDamageStyle'][_0x4f5338(0x6ca)]()[_0x4f5338(0x86c)]();if(VisuMZ[_0x4f5338(0x81b)][_0x22086b])return _0x22086b;return'MANUAL';},DataManager[_0x5bbf40(0x511)]=function(_0x58e80e){const _0x49dc1c=_0x5bbf40;_0x58e80e=_0x58e80e[_0x49dc1c(0x6ca)]()['trim'](),this[_0x49dc1c(0xb75)]=this[_0x49dc1c(0xb75)]||{};if(this['_stypeIDs'][_0x58e80e])return this['_stypeIDs'][_0x58e80e];for(let _0x3ea16a=0x1;_0x3ea16a<0x64;_0x3ea16a++){if(!$dataSystem['skillTypes'][_0x3ea16a])continue;let _0x13fbc0=$dataSystem['skillTypes'][_0x3ea16a][_0x49dc1c(0x6ca)]()[_0x49dc1c(0x86c)]();_0x13fbc0=_0x13fbc0[_0x49dc1c(0xbd9)](/\x1I\[(\d+)\]/gi,''),_0x13fbc0=_0x13fbc0[_0x49dc1c(0xbd9)](/\\I\[(\d+)\]/gi,''),this[_0x49dc1c(0xb75)][_0x13fbc0]=_0x3ea16a;}return this['_stypeIDs'][_0x58e80e]||0x0;},DataManager[_0x5bbf40(0x896)]=function(_0x402e03){const _0x186827=_0x5bbf40;_0x402e03=_0x402e03[_0x186827(0x6ca)]()[_0x186827(0x86c)](),this[_0x186827(0x678)]=this[_0x186827(0x678)]||{};if(this[_0x186827(0x678)][_0x402e03])return this[_0x186827(0x678)][_0x402e03];for(const _0x313612 of $dataSkills){if(!_0x313612)continue;this[_0x186827(0x678)][_0x313612[_0x186827(0x4e5)][_0x186827(0x6ca)]()[_0x186827(0x86c)]()]=_0x313612['id'];}return this[_0x186827(0x678)][_0x402e03]||0x0;},DataManager[_0x5bbf40(0xba5)]=function(_0x18fbf5){const _0x29498a=_0x5bbf40;_0x18fbf5=_0x18fbf5[_0x29498a(0x6ca)]()[_0x29498a(0x86c)](),this[_0x29498a(0xb24)]=this['_enemyIDs']||{};if(this[_0x29498a(0xb24)][_0x18fbf5])return this['_enemyIDs'][_0x18fbf5];for(const _0x7e276f of $dataEnemies){if(!_0x7e276f)continue;this[_0x29498a(0xb24)][_0x7e276f[_0x29498a(0x4e5)][_0x29498a(0x6ca)]()[_0x29498a(0x86c)]()]=_0x7e276f['id'];}return this[_0x29498a(0xb24)][_0x18fbf5]||0x0;},DataManager[_0x5bbf40(0x230)]=function(_0x5349a1){const _0x228db6=_0x5bbf40;_0x5349a1=_0x5349a1[_0x228db6(0x6ca)]()[_0x228db6(0x86c)](),this[_0x228db6(0x68f)]=this[_0x228db6(0x68f)]||{};if(this['_wtypeIDs'][_0x5349a1])return this[_0x228db6(0x68f)][_0x5349a1];for(let _0x57aa57=0x1;_0x57aa57<0x64;_0x57aa57++){if(!$dataSystem[_0x228db6(0x481)][_0x57aa57])continue;let _0x21b647=$dataSystem[_0x228db6(0x481)][_0x57aa57]['toUpperCase']()[_0x228db6(0x86c)]();_0x21b647=_0x21b647['replace'](/\x1I\[(\d+)\]/gi,''),_0x21b647=_0x21b647[_0x228db6(0xbd9)](/\\I\[(\d+)\]/gi,''),this[_0x228db6(0x68f)][_0x21b647]=_0x57aa57;}return this[_0x228db6(0x68f)][_0x228db6(0x8b5)]=0x0,this['_wtypeIDs'][_0x5349a1]||0x0;},DataManager[_0x5bbf40(0x235)]=function(_0x420ccc){const _0x2cb6f4=_0x5bbf40,_0x3f3f1b=_0x2cb6f4(0x306);let _0x7d4640=_0x420ccc[_0x2cb6f4(0xbfe)],_0x33b926=_0x420ccc[_0x2cb6f4(0x4e5)];const _0x42edf5=_0x420ccc['note'];return _0x42edf5['match'](/<DISPLAY ICON: (\d+)>/i)&&(_0x7d4640=Number(RegExp['$1'])),_0x42edf5[_0x2cb6f4(0x24d)](/<DISPLAY TEXT: (.*)>/i)&&(_0x33b926=String(RegExp['$1'])),_0x3f3f1b[_0x2cb6f4(0x7c2)](_0x7d4640,_0x33b926);},DataManager[_0x5bbf40(0x9ac)]=function(_0x5133e0){const _0x3576d8=_0x5bbf40;return _0x5133e0['note'][_0x3576d8(0x24d)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x5133e0[_0x3576d8(0x4e5)];},DataManager[_0x5bbf40(0x4af)]=function(_0x24392a){const _0x2a6ca6=_0x5bbf40;return _0x24392a[_0x2a6ca6(0x509)][_0x2a6ca6(0x24d)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x24392a[_0x2a6ca6(0xbfe)];},DataManager[_0x5bbf40(0xbeb)]=function(_0x2a446e){const _0xe56659=_0x5bbf40,_0x3563b4=$dataEnemies[_0x2a446e];if(_0x3563b4){if(_0x3563b4[_0xe56659(0x509)][_0xe56659(0x24d)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x5901ac=String(RegExp['$1'])['split'](/[\r\n]+/)['remove'](''),_0x84f83a=this[_0xe56659(0x42e)](_0x5901ac);_0x2a446e=this[_0xe56659(0xba5)](_0x84f83a)||_0x2a446e,_0x2a446e=DataManager[_0xe56659(0xbeb)](_0x2a446e);}}return _0x2a446e;},DataManager[_0x5bbf40(0x42e)]=function(_0x1548fd){const _0x30cdaf=_0x5bbf40;let _0x52f0ef=0x0;const _0x22756a={};for(const _0x5cecb0 of _0x1548fd){if(_0x5cecb0[_0x30cdaf(0x24d)](/(.*):[ ](\d+)/i)){const _0x534bd3=String(RegExp['$1'])[_0x30cdaf(0x86c)](),_0x300ba1=Number(RegExp['$2']);_0x22756a[_0x534bd3]=_0x300ba1,_0x52f0ef+=_0x300ba1;}else{if(_0x5cecb0['match'](/(.*):[ ](\d+\.?\d+)/i)){const _0x4bcbb8=String(RegExp['$1'])[_0x30cdaf(0x86c)](),_0x3ea3b1=Number(RegExp['$2']);_0x22756a[_0x4bcbb8]=_0x3ea3b1,_0x52f0ef+=_0x3ea3b1;}else _0x5cecb0!==''&&(_0x22756a[_0x5cecb0]=0x1,_0x52f0ef++);}}if(_0x52f0ef<=0x0)return'';let _0x1e4746=Math[_0x30cdaf(0x2ff)]()*_0x52f0ef;for(const _0x4484b3 in _0x22756a){_0x1e4746-=_0x22756a[_0x4484b3];if(_0x1e4746<=0x0)return _0x4484b3;}return'';},DataManager['checkAutoCustomActionSequenceNotetagEffect']=function(_0x35c160){const _0x1f6545=_0x5bbf40;if(!_0x35c160)return![];if(!VisuMZ[_0x1f6545(0x7d9)]['Settings'][_0x1f6545(0x410)]['AutoNotetag'])return![];if(_0x35c160['note'][_0x1f6545(0x24d)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x35c160['note']['match'](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x186f34 of _0x35c160[_0x1f6545(0x74d)]){if(!_0x186f34)continue;if(_0x186f34[_0x1f6545(0x96f)]===Game_Action[_0x1f6545(0xaf0)])return!![];}return![];},DataManager[_0x5bbf40(0x6c9)]=function(_0x4dd0e0){const _0x3b55d6=_0x5bbf40,_0x44a72b=$dataTroops[_0x4dd0e0];if(!_0x44a72b)return'';let _0x162533='';_0x162533+=_0x44a72b['name'];for(const _0x4f9b8f of _0x44a72b['pages']){for(const _0xe64452 of _0x4f9b8f[_0x3b55d6(0x62f)]){[0x6c,0x198][_0x3b55d6(0x608)](_0xe64452[_0x3b55d6(0x96f)])&&(_0x162533+='\x0a',_0x162533+=_0xe64452[_0x3b55d6(0xa05)][0x0]);}}return _0x162533;},ConfigManager[_0x5bbf40(0x283)]=ConfigManager['autoBattleAtStart']??![],ConfigManager[_0x5bbf40(0x643)]=ConfigManager[_0x5bbf40(0x643)]??![],ConfigManager[_0x5bbf40(0xa4f)]=ConfigManager[_0x5bbf40(0xa4f)]??!![],VisuMZ['BattleCore']['ConfigManager_makeData']=ConfigManager[_0x5bbf40(0x4a7)],ConfigManager[_0x5bbf40(0x4a7)]=function(){const _0x82e914=_0x5bbf40,_0x260242=VisuMZ[_0x82e914(0x7d9)][_0x82e914(0x76c)][_0x82e914(0x86a)](this);return _0x260242[_0x82e914(0x283)]=this['autoBattleAtStart'],_0x260242[_0x82e914(0x643)]=this['autoBattleUseSkills'],_0x260242[_0x82e914(0xa4f)]=this[_0x82e914(0xa4f)],_0x260242;},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x58b)]=ConfigManager[_0x5bbf40(0x639)],ConfigManager[_0x5bbf40(0x639)]=function(_0x3d8313){const _0x15e2bb=_0x5bbf40;VisuMZ[_0x15e2bb(0x7d9)]['ConfigManager_applyData'][_0x15e2bb(0x86a)](this,_0x3d8313),_0x15e2bb(0x283)in _0x3d8313?this[_0x15e2bb(0x283)]=_0x3d8313[_0x15e2bb(0x283)]:this[_0x15e2bb(0x283)]=![],_0x15e2bb(0x643)in _0x3d8313?this[_0x15e2bb(0x643)]=_0x3d8313[_0x15e2bb(0x643)]:this[_0x15e2bb(0x643)]=![],_0x15e2bb(0xa4f)in _0x3d8313?this[_0x15e2bb(0xa4f)]=_0x3d8313[_0x15e2bb(0xa4f)]:this['visualHpGauge']=!![];},ImageManager['svActorHorzCells']=ImageManager[_0x5bbf40(0xb89)]||0x9,ImageManager['svActorVertCells']=ImageManager[_0x5bbf40(0xadb)]||0x6,VisuMZ[_0x5bbf40(0x7d9)]['BattleManager_setup']=BattleManager['setup'],BattleManager[_0x5bbf40(0x39b)]=function(_0x4d64e4,_0x371b95,_0x588583){const _0x3c18a9=_0x5bbf40;VisuMZ['BattleCore']['BattleManager_setup'][_0x3c18a9(0x86a)](this,_0x4d64e4,_0x371b95,_0x588583),this[_0x3c18a9(0x575)]={};},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x6a0)]=BattleManager['initMembers'],BattleManager[_0x5bbf40(0x64e)]=function(){const _0x1bd6b6=_0x5bbf40;VisuMZ['BattleCore']['BattleManager_initMembers']['call'](this),this[_0x1bd6b6(0xae7)]=[];},BattleManager['refreshStatusWindow']=function(){const _0x100135=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;const _0x4fc883=SceneManager[_0x100135(0x2f2)][_0x100135(0x861)];if(_0x4fc883)_0x4fc883[_0x100135(0x32f)]();},BattleManager[_0x5bbf40(0x9fc)]=function(){const _0x3a8dca=_0x5bbf40;if(BattleManager['isTpb']())return'TPB';return _0x3a8dca(0xaf7);},BattleManager[_0x5bbf40(0x894)]=function(_0x6a39b1){const _0xa02926=_0x5bbf40;return _0x6a39b1=_0x6a39b1[_0xa02926(0x6ca)]()[_0xa02926(0x86c)](),this[_0xa02926(0x9fc)]()===_0x6a39b1;},BattleManager['isDTB']=function(){const _0x44c70f=_0x5bbf40;return this['isBattleSys'](_0x44c70f(0xaf7));},BattleManager[_0x5bbf40(0x9a4)]=function(){const _0x17989c=_0x5bbf40;return this[_0x17989c(0x32b)]();},BattleManager['isTickBased']=function(){const _0x5499a7=_0x5bbf40;return!this[_0x5499a7(0x9a4)]();},BattleManager[_0x5bbf40(0xbce)]=function(){const _0x24b459=_0x5bbf40;return!this[_0x24b459(0x9a4)]()&&!this[_0x24b459(0x8ff)]();},BattleManager[_0x5bbf40(0xb1e)]=function(_0x43bab6){const _0x96664b=_0x5bbf40;this['_battlerKeyCache']=this[_0x96664b(0x575)]||{};if(this[_0x96664b(0x575)][_0x43bab6]!==undefined)return this[_0x96664b(0x575)][_0x43bab6];this[_0x96664b(0x575)][_0x43bab6]=null;const _0x519591=this['allBattleMembers'](),_0x4aca8f=_0x519591[_0x96664b(0xae8)](_0x2f92f3=>_0x2f92f3['battlerKey']()===_0x43bab6);if(_0x4aca8f)this[_0x96664b(0x575)][_0x43bab6]=_0x4aca8f;return this[_0x96664b(0x575)][_0x43bab6];},Game_BattlerBase['prototype']['battlerKey']=function(){const _0x3f1891=_0x5bbf40;return _0x3f1891(0xbe4)[_0x3f1891(0x7c2)](this[_0x3f1891(0xa32)]()?'actor':_0x3f1891(0x7f8),this[_0x3f1891(0x4e5)]());},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x262)]=function(_0x45267d){const _0x47a49d=_0x5bbf40;if(this[_0x47a49d(0x6ae)]!=='')return;typeof _0x45267d===_0x47a49d(0x8e4)?this[_0x47a49d(0x6ae)]=_0x45267d[_0x47a49d(0x993)]()[_0x47a49d(0x86c)]():this['_targetBattlerKey']=_0x45267d[_0x47a49d(0x4ba)]();},Game_Action['prototype']['getBattlerKeyTargets']=function(){return[this['getSpecificBattlerKeyTarget']()];},Game_Action[_0x5bbf40(0x68c)]['getSpecificBattlerKeyTarget']=function(){const _0x14b557=_0x5bbf40,_0x185aed=this[_0x14b557(0x6ae)]||'',_0x52c7ae=BattleManager[_0x14b557(0xb1e)](_0x185aed);if(!_0x52c7ae)return this[_0x14b557(0xbca)]();if(!_0x52c7ae[_0x14b557(0x706)]())return this[_0x14b557(0xbca)]();return _0x52c7ae;},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0xbca)]=function(){const _0x50a4a5=_0x5bbf40,_0x201817=this['_targetBattlerKey'];return _0x201817['match'](/ACTOR/i)?this['friendsUnit']()[_0x50a4a5(0x6fa)]():this['opponentsUnit']()[_0x50a4a5(0x6fa)]();},BattleManager[_0x5bbf40(0xaa0)]=function(){const _0x4f44ec=_0x5bbf40;return this['allBattleMembers']()[_0x4f44ec(0xafb)](_0x14ab8b=>_0x14ab8b[_0x4f44ec(0xa62)]());},BattleManager[_0x5bbf40(0x95c)]=function(_0x1a4b9c){const _0x5a43ad=_0x5bbf40;_0x1a4b9c===_0x5a43ad(0xb7b)&&(this[_0x5a43ad(0x763)]=!![]),$gameParty['processBattleCoreJS'](_0x1a4b9c),$gameTroop[_0x5a43ad(0x95c)](_0x1a4b9c);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xa0c)]=BattleManager[_0x5bbf40(0xbcc)],BattleManager[_0x5bbf40(0xbcc)]=function(){const _0xa15e8d=_0x5bbf40;this[_0xa15e8d(0x723)]=![],this[_0xa15e8d(0x614)]=ConfigManager[_0xa15e8d(0x283)],this[_0xa15e8d(0x763)]=![],this[_0xa15e8d(0x95c)](_0xa15e8d(0x726)),VisuMZ['BattleCore'][_0xa15e8d(0xa0c)][_0xa15e8d(0x86a)](this),this[_0xa15e8d(0x95c)](_0xa15e8d(0x782));},BattleManager['processPostBattleCommonEvents']=function(_0x23c3e1){const _0xd3cb00=_0x5bbf40,_0x575d40=VisuMZ[_0xd3cb00(0x7d9)][_0xd3cb00(0x8be)][_0xd3cb00(0x815)];_0x23c3e1!==_0xd3cb00(0x532)&&_0x575d40['BattleEndEvent']&&VisuMZ['BattleCore'][_0xd3cb00(0x381)](_0x575d40[_0xd3cb00(0x843)])&&$gameTemp[_0xd3cb00(0x2f9)](_0x575d40[_0xd3cb00(0x843)]);const _0x4778ae=_0xd3cb00(0x445)['format'](_0x23c3e1);_0x575d40[_0x4778ae]&&VisuMZ[_0xd3cb00(0x7d9)]['CheckMapBattleEventValid'](_0x575d40[_0x4778ae])&&$gameTemp[_0xd3cb00(0x2f9)](_0x575d40[_0x4778ae]);},VisuMZ[_0x5bbf40(0x7d9)]['BattleManager_abort']=BattleManager['abort'],BattleManager[_0x5bbf40(0x34a)]=function(){const _0x32aa34=_0x5bbf40;VisuMZ[_0x32aa34(0x7d9)][_0x32aa34(0x1fc)][_0x32aa34(0x86a)](this),SceneManager[_0x32aa34(0x277)]()&&BattleManager[_0x32aa34(0x318)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xaab)]=BattleManager['checkBattleEnd'],BattleManager['checkBattleEnd']=function(){const _0x49cb84=_0x5bbf40;if(this[_0x49cb84(0xa9c)]===_0x49cb84(0x3ab)){if($gameTemp[_0x49cb84(0x5bb)]())return![];}return VisuMZ[_0x49cb84(0x7d9)]['BattleManager_checkBattleEnd'][_0x49cb84(0x86a)](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x923)]=BattleManager[_0x5bbf40(0x22e)],BattleManager[_0x5bbf40(0x22e)]=function(){const _0x3c83a5=_0x5bbf40;this[_0x3c83a5(0x763)]=!![],this['processBattleCoreJS'](_0x3c83a5(0xb7b)),VisuMZ[_0x3c83a5(0x7d9)][_0x3c83a5(0x923)][_0x3c83a5(0x86a)](this),this[_0x3c83a5(0xba7)](_0x3c83a5(0x2b0));},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x7d8)]=BattleManager['processAbort'],BattleManager['processAbort']=function(){const _0xef251=_0x5bbf40;this[_0xef251(0x763)]=!![],VisuMZ['BattleCore'][_0xef251(0x7d8)][_0xef251(0x86a)](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xbdc)]=BattleManager['processDefeat'],BattleManager['processDefeat']=function(){const _0x507d10=_0x5bbf40;this['_endingBattle']=!![],this[_0x507d10(0x95c)]('BattleDefeatJS'),VisuMZ[_0x507d10(0x7d9)][_0x507d10(0xbdc)][_0x507d10(0x86a)](this),this[_0x507d10(0xba7)](_0x507d10(0x456));},VisuMZ['BattleCore'][_0x5bbf40(0xa42)]=BattleManager['endBattle'],BattleManager['endBattle']=function(_0x230337){const _0x5c3117=_0x5bbf40;this[_0x5c3117(0x723)]=!![],this[_0x5c3117(0x614)]=![],this['processBattleCoreJS'](_0x5c3117(0x725)),VisuMZ[_0x5c3117(0x7d9)][_0x5c3117(0xa42)]['call'](this,_0x230337),this['processBattleCoreJS'](_0x5c3117(0x666));},VisuMZ['BattleCore'][_0x5bbf40(0x577)]=BattleManager[_0x5bbf40(0x57e)],BattleManager[_0x5bbf40(0x57e)]=function(){const _0x1ee21a=_0x5bbf40;if(this[_0x1ee21a(0x9a4)]())this['processBattleCoreJS'](_0x1ee21a(0xb79));VisuMZ['BattleCore']['BattleManager_startTurn']['call'](this);if(this[_0x1ee21a(0x9a4)]())this[_0x1ee21a(0x95c)](_0x1ee21a(0xba0));},BattleManager[_0x5bbf40(0x975)]=function(){const _0x2a7554=_0x5bbf40,_0x1edbb0=this[_0x2a7554(0xb88)],_0x30e4=_0x1edbb0[_0x2a7554(0x452)]();_0x30e4?(_0x30e4[_0x2a7554(0xb14)](),_0x30e4[_0x2a7554(0xbc6)]()?(this[_0x2a7554(0x2a8)](),_0x1edbb0[_0x2a7554(0x249)]()):(_0x1edbb0[_0x2a7554(0x249)](),this['endAction']())):(this[_0x2a7554(0x3f4)](),this[_0x2a7554(0xb88)]=null);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xa0d)]=BattleManager[_0x5bbf40(0x2a8)],BattleManager[_0x5bbf40(0x2a8)]=function(){const _0x369e90=_0x5bbf40,_0x252712=this[_0x369e90(0xb88)][_0x369e90(0x452)](),_0xe37782=this['_subject'];_0x252712&&_0x252712[_0x369e90(0x6e4)]()===_0xe37782&&_0x252712[_0x369e90(0x457)]('PreStartActionJS'),VisuMZ[_0x369e90(0x7d9)][_0x369e90(0xa0d)][_0x369e90(0x86a)](this),_0x252712&&_0x252712[_0x369e90(0x6e4)]()===_0xe37782&&_0x252712[_0x369e90(0x457)](_0x369e90(0x792));},VisuMZ['BattleCore']['BattleManager_endAction']=BattleManager[_0x5bbf40(0x3f4)],BattleManager[_0x5bbf40(0x3f4)]=function(){const _0x4b5447=_0x5bbf40,_0x3eeaa0=this[_0x4b5447(0x866)],_0x59bd5b=this[_0x4b5447(0xb88)];_0x3eeaa0&&_0x3eeaa0!==this[_0x4b5447(0x629)]&&_0x3eeaa0[_0x4b5447(0x6e4)]()===_0x59bd5b&&_0x3eeaa0[_0x4b5447(0x457)]('PreEndActionJS'),this[_0x4b5447(0xb88)]?VisuMZ['BattleCore'][_0x4b5447(0x6cf)][_0x4b5447(0x86a)](this):this[_0x4b5447(0xa9c)]=_0x4b5447(0x3ab),_0x3eeaa0&&_0x3eeaa0!==this[_0x4b5447(0x629)]&&_0x3eeaa0[_0x4b5447(0x6e4)]()===_0x59bd5b&&_0x3eeaa0[_0x4b5447(0x457)](_0x4b5447(0xac4)),this['refreshBattlerMotions'](this[_0x4b5447(0x4fd)]()),this[_0x4b5447(0x629)]=this[_0x4b5447(0x866)];},BattleManager['refreshBattlerMotions']=function(_0x4ef24b){const _0x1396f1=_0x5bbf40;for(const _0x5933a1 of _0x4ef24b){if(!_0x5933a1)continue;if(!_0x5933a1[_0x1396f1(0xb3a)]())continue;_0x5933a1[_0x1396f1(0xb3a)]()[_0x1396f1(0xb74)]();}},BattleManager['updateAction']=function(){const _0x162caa=_0x5bbf40;!this[_0x162caa(0x9e4)]['isBusy']()&&this[_0x162caa(0x3f4)]();},Game_Battler['prototype']['onAllActionsEnd']=function(){const _0x234588=_0x5bbf40;this[_0x234588(0x951)]();if(Imported[_0x234588(0x881)]){const _0x478950=VisuMZ[_0x234588(0x22b)][_0x234588(0x8be)][_0x234588(0x86d)];_0x478950&&_0x478950[_0x234588(0xabd)]===![]&&this[_0x234588(0x1f2)](0x1);}else this['removeStatesAuto'](0x1);this['removeBuffsAuto']();},BattleManager[_0x5bbf40(0x853)]=function(){const _0x12a025=_0x5bbf40;this[_0x12a025(0x6d1)]=VisuMZ[_0x12a025(0x7d9)]['Settings']['Mechanics']['CalcEscapeRatioJS'][_0x12a025(0x86a)](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x6b8)]=BattleManager['onEscapeSuccess'],BattleManager['onEscapeSuccess']=function(){const _0x3d9028=_0x5bbf40;this[_0x3d9028(0x95c)](_0x3d9028(0x459)),BattleManager[_0x3d9028(0x3c3)][_0x3d9028(0xad1)](),VisuMZ[_0x3d9028(0x7d9)][_0x3d9028(0x6b8)]['call'](this),this[_0x3d9028(0xba7)](_0x3d9028(0x645));},VisuMZ['BattleCore'][_0x5bbf40(0x70c)]=BattleManager[_0x5bbf40(0x648)],BattleManager[_0x5bbf40(0x648)]=function(){const _0x355bf7=_0x5bbf40;this[_0x355bf7(0x95c)](_0x355bf7(0x747));const _0x2771e2=this[_0x355bf7(0x6d1)];VisuMZ[_0x355bf7(0x7d9)][_0x355bf7(0x70c)][_0x355bf7(0x86a)](this),this[_0x355bf7(0x6d1)]=_0x2771e2+VisuMZ[_0x355bf7(0x7d9)][_0x355bf7(0x8be)][_0x355bf7(0x815)][_0x355bf7(0x789)][_0x355bf7(0x86a)](this),this[_0x355bf7(0x557)]=![],this[_0x355bf7(0xba7)](_0x355bf7(0x532));},BattleManager[_0x5bbf40(0x9e0)]=function(){const _0x16ecee=_0x5bbf40;let _0x32f12e=![];if(this[_0x16ecee(0x61e)]())for(const _0x482bf5 of $gameTroop['enemyNames']()){this[_0x16ecee(0x9e4)]['push'](_0x16ecee(0x770),TextManager['emerge']['format'](_0x482bf5)),this['_logWindow'][_0x16ecee(0x9cb)](_0x16ecee(0x7f0)),_0x32f12e=!![];}if(this['_preemptive'])this[_0x16ecee(0x9e4)]['push'](_0x16ecee(0x770),TextManager[_0x16ecee(0x472)][_0x16ecee(0x7c2)]($gameParty[_0x16ecee(0x4e5)]())),this[_0x16ecee(0x9e4)][_0x16ecee(0x9cb)](_0x16ecee(0x7f0));else this[_0x16ecee(0x702)]&&(this['_logWindow'][_0x16ecee(0x9cb)]('addText',TextManager[_0x16ecee(0xb93)][_0x16ecee(0x7c2)]($gameParty['name']())),this[_0x16ecee(0x9e4)][_0x16ecee(0x9cb)](_0x16ecee(0x7f0)));_0x32f12e&&(this[_0x16ecee(0x9e4)][_0x16ecee(0x9cb)](_0x16ecee(0x7f0)),this['_logWindow'][_0x16ecee(0x9cb)](_0x16ecee(0x8cb))),this[_0x16ecee(0x860)]()&&this['isSkipPartyCommandWindow']()&&(this[_0x16ecee(0x6dd)]=![]);},BattleManager[_0x5bbf40(0x61e)]=function(){const _0x43e32b=_0x5bbf40;if(BattleManager[_0x43e32b(0x614)])return![];return VisuMZ[_0x43e32b(0x7d9)][_0x43e32b(0x8be)][_0x43e32b(0x51a)]['EmergeText'];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x95a)]=BattleManager['startInput'],BattleManager[_0x5bbf40(0x5aa)]=function(){const _0x47c969=_0x5bbf40;VisuMZ[_0x47c969(0x7d9)][_0x47c969(0x95a)][_0x47c969(0x86a)](this),this['isDTB']()&&this[_0x47c969(0xa8a)]()&&!this[_0x47c969(0x702)]&&$gameParty['canInput']()&&this[_0x47c969(0x29e)]();},BattleManager[_0x5bbf40(0xa8a)]=function(){const _0x59630a=_0x5bbf40;return VisuMZ[_0x59630a(0x7d9)][_0x59630a(0x8be)][_0x59630a(0x8e3)][_0x59630a(0x6e8)];},BattleManager[_0x5bbf40(0x4a2)]=function(){const _0x4f9380=_0x5bbf40;this['isPartyTpbInputtable']()&&this[_0x4f9380(0x29e)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x994)]=Scene_Battle['prototype'][_0x5bbf40(0x8a3)],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x8a3)]=function(){const _0x5a3fa2=_0x5bbf40;VisuMZ[_0x5a3fa2(0x7d9)][_0x5a3fa2(0x994)][_0x5a3fa2(0x86a)](this),BattleManager[_0x5a3fa2(0x860)]()&&BattleManager['_tpbNeedsPartyCommand']&&(BattleManager[_0x5a3fa2(0x6dd)]=![],this['actorCommandCancelTPB']());},BattleManager['emulateAction']=function(_0x4c6460,_0x326702,_0x12d9c0){const _0x41a7a7=_0x5bbf40;if(!_0x12d9c0)return;if(!_0x4c6460)return;if(!_0x326702)return;const _0x2d2c1f=this[_0x41a7a7(0x866)];this[_0x41a7a7(0x866)]=new Game_Action(_0x4c6460);if(DataManager['isItem'](_0x12d9c0))this[_0x41a7a7(0x866)][_0x41a7a7(0x3a9)](_0x12d9c0['id']);if(DataManager[_0x41a7a7(0x812)](_0x12d9c0))this['_action']['setSkill'](_0x12d9c0['id']);if(this[_0x41a7a7(0x866)][_0x41a7a7(0x92e)]())BattleManager[_0x41a7a7(0x610)](_0x4c6460,_0x326702);this[_0x41a7a7(0x866)]=_0x2d2c1f;},BattleManager[_0x5bbf40(0x808)]=function(_0x1342e7,_0x4875c8){const _0x3bcccf=_0x5bbf40;this[_0x3bcccf(0x866)][_0x3bcccf(0x48b)]=_0x4875c8,this[_0x3bcccf(0x9e4)][_0x3bcccf(0x28a)](_0x4875c8),this[_0x3bcccf(0x9e4)][_0x3bcccf(0x393)](_0x1342e7,this[_0x3bcccf(0x866)]),this[_0x3bcccf(0x866)]['apply'](_0x1342e7),this['_logWindow'][_0x3bcccf(0x87d)](_0x1342e7,_0x1342e7);},VisuMZ['BattleCore'][_0x5bbf40(0x353)]=BattleManager[_0x5bbf40(0x654)],BattleManager[_0x5bbf40(0x654)]=function(){const _0x17f1e5=_0x5bbf40;VisuMZ[_0x17f1e5(0x7d9)][_0x17f1e5(0x353)][_0x17f1e5(0x86a)](this),this[_0x17f1e5(0x4eb)]=this[_0x17f1e5(0x4eb)][_0x17f1e5(0xafb)](_0x35bc3c=>_0x35bc3c&&_0x35bc3c[_0x17f1e5(0x5b0)]());},VisuMZ[_0x5bbf40(0x7d9)]['BattleManager_updatePhase']=BattleManager[_0x5bbf40(0x6c4)],BattleManager['updatePhase']=function(_0x2fe79a){const _0x2d4271=_0x5bbf40;if(this[_0x2d4271(0xa9c)]===_0x2d4271(0xabb))this[_0x2d4271(0x422)]();else this[_0x2d4271(0xa9c)]===_0x2d4271(0x38f)?this[_0x2d4271(0x8bb)]():VisuMZ[_0x2d4271(0x7d9)][_0x2d4271(0x349)][_0x2d4271(0x86a)](this,_0x2fe79a);},BattleManager[_0x5bbf40(0xa14)]=function(){const _0x2b2301=_0x5bbf40;this[_0x2b2301(0x414)]=this[_0x2b2301(0x2b3)][_0x2b2301(0xa30)](0x0),this[_0x2b2301(0xb11)]=0x0,this[_0x2b2301(0x958)]=this['_allTargets'][0x0]||null,this['_phase']=_0x2b2301(0xabb);},BattleManager[_0x5bbf40(0x422)]=function(){const _0x2b5c81=_0x5bbf40;!this['updateEventMain']()&&!this[_0x2b5c81(0x9e4)]['isBusy']()&&(this['_phase']=_0x2b5c81(0xa3e));},BattleManager[_0x5bbf40(0x38f)]=function(_0x310d5d){const _0x20cae7=_0x5bbf40;this['_actionBattlers'][_0x20cae7(0x94f)](_0x310d5d);if(_0x310d5d===this[_0x20cae7(0xb88)])return;const _0x4a541d=JsonEx[_0x20cae7(0xb4b)](_0x310d5d[_0x20cae7(0x452)]());this[_0x20cae7(0xae7)][_0x20cae7(0x9cb)]([_0x310d5d,_0x4a541d]);},BattleManager[_0x5bbf40(0x685)]=function(){},BattleManager['updateStart']=function(){const _0x3610cf=_0x5bbf40;if(this['isTpb']())this[_0x3610cf(0xa9c)]='turn';else this['_forcedBattlers'][_0x3610cf(0x348)]>0x0?this[_0x3610cf(0xa9c)]=_0x3610cf(0x3ab):this['startInput']();},BattleManager[_0x5bbf40(0xbf6)]=function(){const _0x4b8879=_0x5bbf40,_0x276f0a=this[_0x4b8879(0xb88)];_0x276f0a&&this[_0x4b8879(0x860)]()&&_0x276f0a[_0x4b8879(0x52f)]('undecided');for(;;){const _0x2b3be0=this[_0x4b8879(0x76a)]();if(!_0x2b3be0)return null;if(_0x2b3be0[_0x4b8879(0x21b)]()&&_0x2b3be0['isAlive']())return _0x2b3be0;}},BattleManager[_0x5bbf40(0x76a)]=function(){const _0x4a8746=_0x5bbf40;if(this[_0x4a8746(0xae7)]['length']>0x0){const _0x116424=this['_forcedBattlers'][_0x4a8746(0x780)](),_0xaec514=_0x116424[0x0];return _0xaec514['_actions']=_0xaec514[_0x4a8746(0x566)]||[],_0xaec514[_0x4a8746(0x566)][0x0]=_0x116424[0x1],_0xaec514;}else return this['_actionBattlers']['shift']();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x51b)]=Game_Battler['prototype'][_0x5bbf40(0x38f)],Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x38f)]=function(_0x5cbb80,_0x42fe17){const _0xa49409=_0x5bbf40;VisuMZ[_0xa49409(0x7d9)][_0xa49409(0x51b)][_0xa49409(0x86a)](this,_0x5cbb80,_0x42fe17),this[_0xa49409(0x566)][this['_actions']['length']-0x1]['_forceAction']=!![];},Game_Interpreter[_0x5bbf40(0x68c)][_0x5bbf40(0x752)]=function(_0x13fc77){const _0x3bdb61=_0x5bbf40;return this[_0x3bdb61(0x689)](_0x13fc77[0x0],_0x13fc77[0x1],_0x4737ec=>{const _0x1f77cd=_0x3bdb61;!_0x4737ec[_0x1f77cd(0x431)]()&&(_0x4737ec['forceAction'](_0x13fc77[0x2],_0x13fc77[0x3]),BattleManager[_0x1f77cd(0x38f)](_0x4737ec));}),!![];},VisuMZ['BattleCore']['Game_Battler_makeSpeed']=Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x4ad)],Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x4ad)]=function(){const _0x4c4a8d=_0x5bbf40;VisuMZ[_0x4c4a8d(0x7d9)][_0x4c4a8d(0x26d)]['call'](this),this[_0x4c4a8d(0x566)][_0x4c4a8d(0x348)]<=0x0&&(this[_0x4c4a8d(0x820)]=Number['MIN_SAFE_INTEGER']);},BattleManager['shouldHideBattleEndPopups']=function(){const _0x2b0a4f=_0x5bbf40;if(VisuMZ[_0x2b0a4f(0x7d9)][_0x2b0a4f(0x8be)][_0x2b0a4f(0x363)]['EndBattlePopups']??!![])return![];return SceneManager['isSceneBattle']()&&this['_endingBattle'];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xa4d)]=BattleManager[_0x5bbf40(0x29e)],BattleManager[_0x5bbf40(0x29e)]=function(){const _0x43012a=_0x5bbf40;this[_0x43012a(0x860)]()?this[_0x43012a(0x359)]():VisuMZ[_0x43012a(0x7d9)]['BattleManager_selectNextCommand']['call'](this);},BattleManager[_0x5bbf40(0x359)]=function(){const _0x2f6d08=_0x5bbf40;if(this['_currentActor']){if(this['_currentActor']['selectNextCommand']())return;this[_0x2f6d08(0x754)](),this['checkTpbInputClose'](),!this[_0x2f6d08(0xb88)]&&!this[_0x2f6d08(0x4ea)]&&SceneManager['_scene'][_0x2f6d08(0xb30)]();}else!this[_0x2f6d08(0xb88)]&&this[_0x2f6d08(0x6b1)]();},BattleManager[_0x5bbf40(0xa5f)]=function(){const _0x5df0ea=_0x5bbf40;(!this[_0x5df0ea(0x216)]()||this[_0x5df0ea(0x7c7)]())&&(this[_0x5df0ea(0x1ee)]&&(!$gameParty[_0x5df0ea(0xbc7)]()[_0x5df0ea(0x608)](this[_0x5df0ea(0x1ee)])&&(this[_0x5df0ea(0x1ee)]=null)),!this[_0x5df0ea(0x1ee)]?(this[_0x5df0ea(0x8ac)](),this[_0x5df0ea(0x4ea)]=null,this[_0x5df0ea(0x557)]=![]):this[_0x5df0ea(0x811)]());},BattleManager[_0x5bbf40(0x811)]=function(){const _0xbd829b=_0x5bbf40;!$gameParty['battleMembers']()['includes'](this[_0xbd829b(0x1ee)])&&(this[_0xbd829b(0x1ee)]=null),this[_0xbd829b(0x1ee)]?(this[_0xbd829b(0x4ea)]=this[_0xbd829b(0x1ee)],this[_0xbd829b(0x4ea)][_0xbd829b(0x8bd)]='charged',this[_0xbd829b(0x557)]=!![],this[_0xbd829b(0x1ee)]=null):(this[_0xbd829b(0x8ac)](),this['_currentActor']=null,this['_inputting']=![]);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xaa6)]=BattleManager[_0x5bbf40(0x611)],BattleManager['isTpbMainPhase']=function(){const _0x101217=_0x5bbf40;return this['_phase']===_0x101217(0xabb)?this[_0x101217(0x6c1)]():VisuMZ['BattleCore'][_0x101217(0xaa6)][_0x101217(0x86a)](this);},BattleManager[_0x5bbf40(0x6c1)]=function(){const _0x51c00d=_0x5bbf40;return this[_0x51c00d(0x41a)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x74f)]=BattleManager[_0x5bbf40(0x8ac)],BattleManager[_0x5bbf40(0x8ac)]=function(){const _0x3bcb5d=_0x5bbf40;this['isTpb']()&&this[_0x3bcb5d(0xa9c)]===_0x3bcb5d(0x301)&&(this['_currentActor']=null),VisuMZ[_0x3bcb5d(0x7d9)][_0x3bcb5d(0x74f)][_0x3bcb5d(0x86a)](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xa6c)]=BattleManager[_0x5bbf40(0x482)],BattleManager[_0x5bbf40(0x482)]=function(){const _0x5d92d2=_0x5bbf40,_0x2d8eee=this[_0x5d92d2(0x4ea)];if(_0x2d8eee&&!_0x2d8eee[_0x5d92d2(0x482)]()){const _0x58d3ba=_0x2d8eee[_0x5d92d2(0xa0b)];_0x2d8eee[_0x5d92d2(0x566)][_0x58d3ba]=new Game_Action(_0x2d8eee);}return VisuMZ[_0x5d92d2(0x7d9)][_0x5d92d2(0xa6c)][_0x5d92d2(0x86a)](this);},VisuMZ[_0x5bbf40(0x7d9)]['BattleManager_checkSubstitute']=BattleManager[_0x5bbf40(0x3f9)],BattleManager[_0x5bbf40(0x3f9)]=function(_0x1a2679){const _0x14445e=_0x5bbf40;if(this[_0x14445e(0x866)][_0x14445e(0x5b8)]())return![];return VisuMZ['BattleCore'][_0x14445e(0x9a2)][_0x14445e(0x86a)](this,_0x1a2679);},SceneManager['isSceneBattle']=function(){const _0x3f18ec=_0x5bbf40;return this['_scene']&&this[_0x3f18ec(0x2f2)][_0x3f18ec(0xaad)]===Scene_Battle;},SceneManager[_0x5bbf40(0x5f7)]=function(){const _0x630c58=_0x5bbf40;return Spriteset_Battle['prototype'][_0x630c58(0x20f)]();},SceneManager[_0x5bbf40(0x735)]=function(){const _0x103d67=_0x5bbf40;if(SceneManager[_0x103d67(0x2bb)](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){const _0x470683=_0x5bbf40;if(SceneManager[_0x470683(0x81d)](Scene_Options))return!![];return![];},SceneManager[_0x5bbf40(0x51f)]=function(_0x5e49ad){const _0x583cb2=_0x5bbf40;if(!SceneManager[_0x583cb2(0x277)]())return!![];const _0x48c981=['Scene_Options',_0x583cb2(0x7fa),'Scene_QuickLoad'];return _0x48c981[_0x583cb2(0x608)](_0x5e49ad[_0x583cb2(0x4e5)]);},VisuMZ[_0x5bbf40(0x7d9)]['SceneManager_push']=SceneManager[_0x5bbf40(0x9cb)],SceneManager[_0x5bbf40(0x9cb)]=function(_0x17f317){const _0x3e6f32=_0x5bbf40;if(!SceneManager['checkSceneBattleTransitionable'](_0x17f317))return this['displayBattleCoreTransitionErrorMsg'](_0x17f317);VisuMZ[_0x3e6f32(0x7d9)][_0x3e6f32(0x526)][_0x3e6f32(0x86a)](this,_0x17f317);},SceneManager[_0x5bbf40(0x45f)]=function(_0x134cae){const _0x2d1914=_0x5bbf40;if(!$gameTemp[_0x2d1914(0x999)]())return;if(this[_0x2d1914(0xacc)])return;this[_0x2d1914(0xacc)]=!![];let _0x28db63='';_0x28db63+=_0x2d1914(0xbed),_0x28db63+=_0x2d1914(0x9fd)[_0x2d1914(0x7c2)](_0x134cae[_0x2d1914(0x4e5)]),alert(_0x28db63);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x2cf)]=Game_Temp[_0x5bbf40(0x68c)][_0x5bbf40(0x3bb)],Game_Temp[_0x5bbf40(0x68c)][_0x5bbf40(0x3bb)]=function(){const _0x49830a=_0x5bbf40;VisuMZ[_0x49830a(0x7d9)][_0x49830a(0x2cf)]['call'](this),this[_0x49830a(0x595)]=[];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x442)]=Game_Temp['prototype']['requestAnimation'],Game_Temp[_0x5bbf40(0x68c)]['requestAnimation']=function(_0x316ce6,_0x5d6e8c,_0x1abf39){const _0x52a1e4=_0x5bbf40;_0x316ce6=_0x316ce6[_0x52a1e4(0xafb)]((_0x43095d,_0x41801b,_0x1b53a0)=>_0x1b53a0[_0x52a1e4(0x5c9)](_0x43095d)===_0x41801b);SceneManager[_0x52a1e4(0x277)]()&&SceneManager[_0x52a1e4(0x5f7)]()&&(_0x1abf39=!_0x1abf39);VisuMZ['BattleCore'][_0x52a1e4(0x442)][_0x52a1e4(0x86a)](this,_0x316ce6,_0x5d6e8c,_0x1abf39);SceneManager[_0x52a1e4(0x277)]()&&BattleManager['_spriteset'][_0x52a1e4(0x8b4)]();for(const _0xd1321c of _0x316ce6){_0xd1321c&&_0xd1321c['isEnemy']&&_0xd1321c[_0x52a1e4(0x37d)]()&&_0xd1321c['resetNameTempVisibility']();}},Game_Temp[_0x5bbf40(0x68c)][_0x5bbf40(0x8d3)]=function(_0x46bca6){const _0xa38458=_0x5bbf40;this[_0xa38458(0x9fa)]=_0x46bca6;},Game_Temp['prototype'][_0x5bbf40(0x9c4)]=function(){const _0x4a88a0=_0x5bbf40;return this[_0x4a88a0(0x9fa)];},Game_Temp['prototype']['clearForcedGameTroopSettingsBattleCore']=function(){const _0x649053=_0x5bbf40;this[_0x649053(0xb12)]=undefined;},Game_Temp[_0x5bbf40(0x68c)][_0x5bbf40(0x67e)]=function(_0x43ee88){const _0xb2d26c=_0x5bbf40;$gameMap&&$dataMap&&$dataMap[_0xb2d26c(0x509)]&&this[_0xb2d26c(0x3ee)]($dataMap[_0xb2d26c(0x509)]);const _0x40bb2d=$dataTroops[_0x43ee88];if(_0x40bb2d){let _0x3a01d8=DataManager['createTroopNote'](_0x40bb2d['id']);this[_0xb2d26c(0x3ee)](_0x3a01d8);}},Game_Temp[_0x5bbf40(0x68c)][_0x5bbf40(0x3ee)]=function(_0x5de5e1){const _0x259665=_0x5bbf40;if(!_0x5de5e1)return;if(_0x5de5e1[_0x259665(0x24d)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0xd6cc1e=String(RegExp['$1']);if(_0xd6cc1e[_0x259665(0x24d)](/DEFAULT/i))this[_0x259665(0xb12)]=_0x259665(0x81f);else{if(_0xd6cc1e[_0x259665(0x24d)](/LIST/i))this[_0x259665(0xb12)]=_0x259665(0x62f);else{if(_0xd6cc1e['match'](/XP/i))this[_0x259665(0xb12)]='xp';else{if(_0xd6cc1e['match'](/PORTRAIT/i))this[_0x259665(0xb12)]='portrait';else{if(_0xd6cc1e[_0x259665(0x24d)](/BORDER/i))this[_0x259665(0xb12)]=_0x259665(0x7e8);else{if(_0xd6cc1e[_0x259665(0x24d)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported['VisuMZ_3_SideviewBattleUI']?this['_forcedBattleLayout']=_0x259665(0x2a9):this['_forcedBattleLayout']='default';else _0xd6cc1e[_0x259665(0x24d)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported['VisuMZ_3_FrontviewBattleUI']?this[_0x259665(0xb12)]=_0x259665(0x247):this['_forcedBattleLayout']=_0x259665(0x81f));}}}}}}},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x694)]=Game_Temp[_0x5bbf40(0x68c)][_0x5bbf40(0x88c)],Game_Temp[_0x5bbf40(0x68c)]['requestBalloon']=function(_0x21141d,_0x558f67){const _0x1b4615=_0x5bbf40;SceneManager['isSceneBattle']()?this['requestBattleBalloon'](_0x21141d,_0x558f67):VisuMZ[_0x1b4615(0x7d9)][_0x1b4615(0x694)][_0x1b4615(0x86a)](this,_0x21141d,_0x558f67);},Game_Temp[_0x5bbf40(0x68c)][_0x5bbf40(0x8a1)]=function(_0x8db83e,_0x1df6cb){const _0xd0f6e9=_0x5bbf40,_0x363f53={'target':_0x8db83e,'balloonId':_0x1df6cb};this['_battleBalloonQueue']=this[_0xd0f6e9(0x595)]||[],this[_0xd0f6e9(0x595)][_0xd0f6e9(0x9cb)](_0x363f53);},Game_Temp[_0x5bbf40(0x68c)][_0x5bbf40(0x662)]=function(){const _0xb2edf7=_0x5bbf40;return this[_0xb2edf7(0x595)]=this[_0xb2edf7(0x595)]||[],this['_battleBalloonQueue'][_0xb2edf7(0x780)]();},Game_Temp[_0x5bbf40(0x68c)]['clearBattleBalloons']=function(){const _0x384843=_0x5bbf40;this[_0x384843(0x595)]=[];},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x569)]=function(){const _0xb1e7df=_0x5bbf40;this[_0xb1e7df(0x416)]===undefined&&(this['_battleBalloonSprites']=[]);for(const _0x48af23 of this[_0xb1e7df(0x416)]){!_0x48af23['isPlaying']()&&this[_0xb1e7df(0x3f8)](_0x48af23);}this[_0xb1e7df(0xa98)]();},Spriteset_Battle['prototype'][_0x5bbf40(0xa98)]=function(){const _0x108f24=_0x5bbf40;for(;;){const _0x3bced5=$gameTemp[_0x108f24(0x662)]();if(_0x3bced5)this[_0x108f24(0x71c)](_0x3bced5);else break;}},Spriteset_Battle['prototype'][_0x5bbf40(0x71c)]=function(_0x42f55d){const _0x320e4c=_0x5bbf40,_0x14c4e9=this['findTargetSprite'](_0x42f55d[_0x320e4c(0x25f)]);if(_0x14c4e9){let _0x526b73=null;Imported[_0x320e4c(0x58a)]&&Array[_0x320e4c(0x4ed)](_0x42f55d[_0x320e4c(0x47f)])?_0x526b73=new Sprite_IconBalloon():_0x526b73=new Sprite_Balloon(),_0x526b73['targetObject']=_0x42f55d[_0x320e4c(0x25f)],_0x526b73[_0x320e4c(0x958)]=_0x14c4e9,_0x526b73[_0x320e4c(0x958)]['_character']=_0x14c4e9,_0x526b73[_0x320e4c(0x39b)](_0x14c4e9,_0x42f55d[_0x320e4c(0x47f)]),BattleManager[_0x320e4c(0xb5b)](_0x526b73),this[_0x320e4c(0x416)][_0x320e4c(0x9cb)](_0x526b73);}},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x3f8)]=function(_0x3f5c2f){const _0x1fa801=_0x5bbf40;this[_0x1fa801(0x416)][_0x1fa801(0x94f)](_0x3f5c2f),BattleManager[_0x1fa801(0xb27)](_0x3f5c2f),_0x3f5c2f[_0x1fa801(0x517)]();},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x303)]=function(_0x25ab72,_0x1b49e0){},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x955)]=function(){return![];},Spriteset_Battle[_0x5bbf40(0x68c)]['isAnyBattleBalloonPlaying']=function(){const _0x4a3e61=_0x5bbf40;return this['_battleBalloonSprites']=this[_0x4a3e61(0x416)]||[],this['_battleBalloonSprites'][_0x4a3e61(0x348)]>0x0;},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x937)]=Game_System[_0x5bbf40(0x68c)][_0x5bbf40(0x3bb)],Game_System[_0x5bbf40(0x68c)][_0x5bbf40(0x3bb)]=function(){const _0x2e712e=_0x5bbf40;VisuMZ[_0x2e712e(0x7d9)]['Game_System_initialize']['call'](this),this[_0x2e712e(0x60c)]();},Game_System[_0x5bbf40(0x68c)][_0x5bbf40(0x60c)]=function(){const _0x348806=_0x5bbf40;this[_0x348806(0x4b2)]=this[_0x348806(0x4b2)]||[];},Game_System['prototype'][_0x5bbf40(0x5e5)]=function(){const _0x304438=_0x5bbf40;if(this['_defeatedEnemies']===undefined)this[_0x304438(0x60c)]();return this[_0x304438(0x4b2)];},Game_System[_0x5bbf40(0x68c)][_0x5bbf40(0x69c)]=function(_0x2cebd9){const _0x3c022f=_0x5bbf40;if(this['_defeatedEnemies']===undefined)this[_0x3c022f(0x60c)]();if(!_0x2cebd9)return;if(this[_0x3c022f(0x4b2)]['includes'](_0x2cebd9))return;this['_defeatedEnemies'][_0x3c022f(0x9cb)](_0x2cebd9),this['_defeatedEnemies'][_0x3c022f(0x490)]((_0x4b4d5a,_0x4c79ae)=>_0x4b4d5a-_0x4c79ae);},VisuMZ['BattleCore']['Game_BattlerBase_addNewState']=Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0xa13)],Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0xa13)]=function(_0x217aa6){const _0x5c154b=_0x5bbf40,_0x45db46=this[_0x5c154b(0x706)](),_0x53ed63=this[_0x5c154b(0xbe6)]();VisuMZ[_0x5c154b(0x7d9)][_0x5c154b(0x939)][_0x5c154b(0x86a)](this,_0x217aa6),this['isEnemy']()&&_0x45db46&&this[_0x5c154b(0x724)]()&&(this[_0x5c154b(0xac9)]=!this[_0x5c154b(0xb7f)](),$gameSystem[_0x5c154b(0x69c)](this['enemyId']())),SceneManager['isSceneBattle']()&&_0x53ed63!==this['stateMotionIndex']()&&(this[_0x5c154b(0xb3a)]()&&this[_0x5c154b(0xb3a)]()['refreshMotion']());},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0xb7f)]=function(){const _0x4c8751=_0x5bbf40;return $gameSystem[_0x4c8751(0x5e5)]()[_0x4c8751(0x608)](this[_0x4c8751(0x292)]);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x834)]=Game_BattlerBase[_0x5bbf40(0x68c)]['eraseState'],Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0xa39)]=function(_0x2b4ced){const _0xe33ad=_0x5bbf40;VisuMZ[_0xe33ad(0x7d9)]['Game_BattlerBase_eraseState']['call'](this,_0x2b4ced),this[_0xe33ad(0x37d)]()&&_0x2b4ced===this[_0xe33ad(0x646)]()&&this[_0xe33ad(0x706)]()&&(this[_0xe33ad(0xac9)]=![]),!this[_0xe33ad(0x8e5)]&&!this[_0xe33ad(0xb1c)]&&SceneManager[_0xe33ad(0x277)]()&&this[_0xe33ad(0x28e)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x588)]=Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x8cb)],Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x8cb)]=function(){const _0x5cd493=_0x5bbf40;VisuMZ[_0x5cd493(0x7d9)][_0x5cd493(0x588)]['call'](this),this[_0x5cd493(0x2ee)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x5cd493(0x413)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x5cd493(0x9a9)]=_0x5cd493(0x81f),this[_0x5cd493(0x84b)]();},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x84b)]=function(){this['_targetBattlerKey']='';},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8d6)]=Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0xb83)],Game_Action['prototype'][_0x5bbf40(0xb83)]=function(_0x2b72cb){const _0x7ec5d1=_0x5bbf40;VisuMZ[_0x7ec5d1(0x7d9)][_0x7ec5d1(0x8d6)][_0x7ec5d1(0x86a)](this,_0x2b72cb),this['clearTargetBattlerKey']();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x65a)]=Game_Action['prototype']['setSkill'],Game_Action['prototype']['setSkill']=function(_0x2359bb){const _0x49a7d3=_0x5bbf40;VisuMZ['BattleCore']['Game_Action_setSkill'][_0x49a7d3(0x86a)](this,_0x2359bb),this[_0x49a7d3(0x84b)]();},VisuMZ['BattleCore']['Game_Action_setItem']=Game_Action['prototype'][_0x5bbf40(0x3a9)],Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x3a9)]=function(_0x29e29f){const _0x533566=_0x5bbf40;VisuMZ['BattleCore'][_0x533566(0xb4d)][_0x533566(0x86a)](this,_0x29e29f),this['clearTargetBattlerKey']();},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x30f)]=function(_0x551e92,_0x1bcb06){const _0x5116f5=_0x5bbf40;return VisuMZ[_0x5116f5(0x7d9)][_0x5116f5(0x8be)][_0x5116f5(0x363)]['OverallFormulaJS'][_0x5116f5(0x86a)](this,_0x551e92,_0x1bcb06);},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x559)]=function(_0x4944ff,_0x3df07f){const _0x3cd6b5=_0x5bbf40;return VisuMZ['BattleCore']['Settings'][_0x3cd6b5(0x363)][_0x3cd6b5(0x3ed)][_0x3cd6b5(0x86a)](this,_0x4944ff,_0x3df07f);},Game_Action['prototype'][_0x5bbf40(0x7bb)]=function(_0xb7c5ed,_0x2494ab){const _0x223cc5=_0x5bbf40;return VisuMZ[_0x223cc5(0x7d9)][_0x223cc5(0x8be)][_0x223cc5(0x363)]['GuardFormulaJS'][_0x223cc5(0x86a)](this,_0xb7c5ed,_0x2494ab);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x6ec)]=Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x783)],Game_Action['prototype'][_0x5bbf40(0x783)]=function(_0x1513e3){const _0xc9115a=_0x5bbf40,_0x1a8deb=this[_0xc9115a(0x92e)]()[_0xc9115a(0x509)];if(_0x1a8deb['match'](/<ALWAYS HIT>/i))return 0x1;else{if(_0x1a8deb[_0xc9115a(0x24d)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x582342=VisuMZ[_0xc9115a(0x7d9)]['Game_Action_itemHit'][_0xc9115a(0x86a)](this,_0x1513e3);return _0x582342=this[_0xc9115a(0x413)][_0xc9115a(0x3c7)]*_0x582342+this['_multipliers'][_0xc9115a(0x60d)],$gameParty[_0xc9115a(0x670)]()&&(_0x582342=this['applyBattleCoreHitRateJS'](_0x582342,_0x1513e3)),_0x582342;}}},VisuMZ['BattleCore']['Game_Action_updateLastTarget']=Game_Action['prototype']['updateLastTarget'],Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0xbf0)]=function(_0x530e93){const _0x2b2ad1=_0x5bbf40;this['_bypass_applyBattleCoreHitRateJS']=!![],VisuMZ[_0x2b2ad1(0x7d9)][_0x2b2ad1(0x574)][_0x2b2ad1(0x86a)](this,_0x530e93),this[_0x2b2ad1(0x81e)]=undefined;},Game_Action[_0x5bbf40(0x68c)]['declareGlobalVariables']=function(_0xedb435){const _0x3d2f8e=_0x5bbf40;window[_0x3d2f8e(0xa3e)]=this,window['a']=this[_0x3d2f8e(0x6e4)](),window['b']=_0xedb435,window[_0x3d2f8e(0x888)]=this[_0x3d2f8e(0x6e4)](),window[_0x3d2f8e(0x25f)]=_0xedb435,window[_0x3d2f8e(0x803)]=this[_0x3d2f8e(0x92e)](),window['skill']=this[_0x3d2f8e(0x92e)](),window[_0x3d2f8e(0x92e)]=this[_0x3d2f8e(0x92e)]();},Game_Action['prototype'][_0x5bbf40(0x98a)]=function(_0x1e53c5){const _0x52c4fd=_0x5bbf40;window[_0x52c4fd(0xa3e)]=undefined,window['a']=undefined,window['b']=undefined,window[_0x52c4fd(0x888)]=undefined,window[_0x52c4fd(0x25f)]=undefined,window[_0x52c4fd(0x803)]=undefined,window[_0x52c4fd(0x29f)]=undefined,window[_0x52c4fd(0x92e)]=undefined;},Game_Action[_0x5bbf40(0x68c)]['applyBattleCoreHitRateJS']=function(_0x331ab2,_0xbefcec){const _0x2426ce=_0x5bbf40;if(this[_0x2426ce(0x81e)])return _0x331ab2;this[_0x2426ce(0x7b9)](_0xbefcec);if(this[_0x2426ce(0x92e)]()){let _0x3fb677=VisuMZ[_0x2426ce(0x7d9)][_0x2426ce(0xa6b)](this[_0x2426ce(0x92e)](),_0x2426ce(0x66d));VisuMZ[_0x2426ce(0x7d9)]['JS'][_0x3fb677]&&(_0x331ab2=VisuMZ[_0x2426ce(0x7d9)]['JS'][_0x3fb677][_0x2426ce(0x86a)](this,this['subject'](),_0xbefcec,this[_0x2426ce(0x92e)](),_0x331ab2));}for(const _0x3ace1b of this[_0x2426ce(0x6e4)]()[_0x2426ce(0x4c8)]()){if(!_0x3ace1b)continue;key=VisuMZ[_0x2426ce(0x7d9)][_0x2426ce(0xa6b)](_0x3ace1b,_0x2426ce(0x9be)),VisuMZ['BattleCore']['JS'][key]&&(_0x331ab2=VisuMZ[_0x2426ce(0x7d9)]['JS'][key][_0x2426ce(0x86a)](this,this[_0x2426ce(0x6e4)](),_0xbefcec,this[_0x2426ce(0x92e)](),_0x331ab2));}for(const _0x92ed56 of _0xbefcec['traitObjects']()){if(!_0x92ed56)continue;key=VisuMZ['BattleCore']['createKeyJS'](_0x92ed56,_0x2426ce(0xaf1)),VisuMZ['BattleCore']['JS'][key]&&(_0x331ab2=VisuMZ[_0x2426ce(0x7d9)]['JS'][key][_0x2426ce(0x86a)](this,this['subject'](),_0xbefcec,this[_0x2426ce(0x92e)](),_0x331ab2));}return this[_0x2426ce(0x98a)](_0xbefcec),_0x331ab2;},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x8c2)]=function(_0x245a9f){const _0x4c9d89=_0x5bbf40;if(!this[_0x4c9d89(0x92e)]()[_0x4c9d89(0x9df)][_0x4c9d89(0x89d)])return 0x0;let _0x398ab4=VisuMZ[_0x4c9d89(0x7d9)][_0x4c9d89(0x8be)]['Damage'][_0x4c9d89(0x605)][_0x4c9d89(0x86a)](this,_0x245a9f);return _0x398ab4=this[_0x4c9d89(0x413)][_0x4c9d89(0x908)]*_0x398ab4+this[_0x4c9d89(0x413)][_0x4c9d89(0xc05)],$gameParty['inBattle']()&&(_0x398ab4=this[_0x4c9d89(0xab2)](_0x398ab4,_0x245a9f)),_0x398ab4;},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0xab2)]=function(_0x2debd3,_0x4cf92f){const _0x360ff1=_0x5bbf40;this['declareGlobalVariables'](_0x4cf92f),window[_0x360ff1(0x800)]=_0x2debd3;{const _0x47ced9=this[_0x360ff1(0x6e4)]()['traitObjects']();for(const _0x29278 of _0x47ced9){if(!_0x29278)continue;if(_0x29278[_0x360ff1(0x509)][_0x360ff1(0x24d)](/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i)){const _0x50e3d1=String(RegExp['$1']);try{eval(_0x50e3d1);}catch(_0x179a53){if($gameTemp['isPlaytest']())console[_0x360ff1(0x97b)](_0x179a53);}}}}{const _0x2142e4=_0x4cf92f[_0x360ff1(0x4c8)]();for(const _0x27a1e9 of _0x2142e4){if(!_0x27a1e9)continue;if(_0x27a1e9[_0x360ff1(0x509)][_0x360ff1(0x24d)](/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i)){const _0x4fdc08=String(RegExp['$1']);try{eval(_0x4fdc08);}catch(_0x3ec510){if($gameTemp['isPlaytest']())console['log'](_0x3ec510);}}}}return _0x2debd3=window[_0x360ff1(0x800)],this[_0x360ff1(0x98a)](_0x4cf92f),_0x2debd3;},Game_Action['prototype'][_0x5bbf40(0xab2)]=function(_0x43abcb,_0x560cdb){const _0x3d8966=_0x5bbf40;this[_0x3d8966(0x7b9)](_0x560cdb);for(const _0x1c4ec0 of this[_0x3d8966(0x6e4)]()[_0x3d8966(0x4c8)]()){if(!_0x1c4ec0)continue;key=VisuMZ[_0x3d8966(0x7d9)]['createKeyJS'](_0x1c4ec0,_0x3d8966(0x969)),VisuMZ['BattleCore']['JS'][key]&&(_0x43abcb=VisuMZ[_0x3d8966(0x7d9)]['JS'][key]['call'](this,this[_0x3d8966(0x6e4)](),_0x560cdb,this[_0x3d8966(0x92e)](),_0x43abcb));}for(const _0xa33f1d of _0x560cdb[_0x3d8966(0x4c8)]()){if(!_0xa33f1d)continue;key=VisuMZ['BattleCore'][_0x3d8966(0xa6b)](_0xa33f1d,_0x3d8966(0xbb2)),VisuMZ[_0x3d8966(0x7d9)]['JS'][key]&&(_0x43abcb=VisuMZ[_0x3d8966(0x7d9)]['JS'][key][_0x3d8966(0x86a)](this,this['subject'](),_0x560cdb,this[_0x3d8966(0x92e)](),_0x43abcb));}return this[_0x3d8966(0x98a)](_0x560cdb),_0x43abcb;},Game_Action['prototype'][_0x5bbf40(0xa60)]=function(_0x5b22f2){const _0x120eab=_0x5bbf40;return _0x5b22f2=VisuMZ[_0x120eab(0x7d9)][_0x120eab(0x8be)]['Damage'][_0x120eab(0x5d6)][_0x120eab(0x86a)](this,_0x5b22f2),_0x5b22f2=this[_0x120eab(0x413)]['criticalDmgRate']*_0x5b22f2+this['_multipliers'][_0x120eab(0x82e)],_0x5b22f2;},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x3f2)]=Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x748)],Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x748)]=function(_0x537104){const _0x5be67e=_0x5bbf40;if(this['_customDamageFormula']!==_0x5be67e(0x81f))return this['customDamageFormula'](_0x537104);else return DataManager['getDamageStyle'](this['item']())===_0x5be67e(0x9c1)?VisuMZ[_0x5be67e(0x7d9)][_0x5be67e(0x3f2)]['call'](this,_0x537104):this[_0x5be67e(0x5c5)](_0x537104);},Game_Action[_0x5bbf40(0x68c)]['setCustomDamageFormula']=function(_0x8a4f1e){const _0x77dfab=_0x5bbf40;this[_0x77dfab(0x9a9)]=_0x8a4f1e;},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x3e9)]=function(_0x4749df){const _0x5fbb6a=_0x5bbf40,_0x33c229=this[_0x5fbb6a(0x92e)](),_0xaaffb0=_0x33c229[_0x5fbb6a(0x9df)][_0x5fbb6a(0x3b8)];_0x33c229[_0x5fbb6a(0x9df)]['formula']=this[_0x5fbb6a(0x9a9)];let _0x3db1aa=VisuMZ['BattleCore'][_0x5fbb6a(0x3f2)][_0x5fbb6a(0x86a)](this,_0x4749df);return _0x33c229[_0x5fbb6a(0x9df)][_0x5fbb6a(0x3b8)]=_0xaaffb0,_0x3db1aa;},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x74e)]=function(){const _0x67dd1c=_0x5bbf40;if(this[_0x67dd1c(0x92e)]()['note'][_0x67dd1c(0x24d)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x297504=String(RegExp['$1'])[_0x67dd1c(0x6ca)]()['trim']();return _0x297504;}return'MANUAL';},Game_Action['prototype']['evalDamageFormulaBattleCore']=function(_0x1acd64){const _0x2bcfb2=_0x5bbf40,_0x24a0e1=DataManager['getDamageStyle'](this['item']()),_0x2b0fe2=VisuMZ[_0x2bcfb2(0x81b)][_0x24a0e1];try{return _0x2b0fe2['Formula']['call'](this,_0x1acd64);}catch(_0x335bc2){if($gameTemp[_0x2bcfb2(0x999)]())console[_0x2bcfb2(0x97b)](_0x335bc2);return VisuMZ[_0x2bcfb2(0x7d9)][_0x2bcfb2(0x3f2)]['call'](this);}},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x6ef)]=function(_0x29ca9f,_0x157329){const _0x1aec59=_0x5bbf40;if(this[_0x1aec59(0x873)]())return _0x157329;const _0x517221=this[_0x1aec59(0x6e4)](),_0x2faeac=_0x29ca9f;let _0x5dc705=[],_0xe8219f=[];_0x5dc705[_0x1aec59(0x9cb)](this[_0x1aec59(0x2ee)][_0x1aec59(0x45c)],this[_0x1aec59(0x2ee)][_0x1aec59(0xa47)]),_0xe8219f[_0x1aec59(0x9cb)](this[_0x1aec59(0x2ee)][_0x1aec59(0x473)],this[_0x1aec59(0x2ee)]['arRedRate']);const _0x3f50dc=this[_0x1aec59(0x401)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x4759e3=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x417eb3=this[_0x1aec59(0x401)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x3486f4=this[_0x1aec59(0x401)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x5dc705=_0x5dc705[_0x1aec59(0xa80)](_0x2faeac['traitObjects']()[_0x1aec59(0x6d6)](_0xd1177f=>_0xd1177f&&_0xd1177f[_0x1aec59(0x509)][_0x1aec59(0x24d)](_0x3f50dc)?Number(RegExp['$1']):0x0)),_0xe8219f=_0xe8219f[_0x1aec59(0xa80)](_0x2faeac['traitObjects']()[_0x1aec59(0x6d6)](_0xda1be9=>_0xda1be9&&_0xda1be9[_0x1aec59(0x509)]['match'](_0x4759e3)?Number(RegExp['$1'])/0x64:0x0)),_0x5dc705=_0x5dc705[_0x1aec59(0xa80)](_0x517221[_0x1aec59(0x4c8)]()[_0x1aec59(0x6d6)](_0x2b5fe2=>_0x2b5fe2&&_0x2b5fe2[_0x1aec59(0x509)][_0x1aec59(0x24d)](_0x417eb3)?Number(RegExp['$1']):0x0)),_0xe8219f=_0xe8219f[_0x1aec59(0xa80)](_0x517221[_0x1aec59(0x4c8)]()[_0x1aec59(0x6d6)](_0x4835de=>_0x4835de&&_0x4835de['note'][_0x1aec59(0x24d)](_0x3486f4)?Number(RegExp['$1'])/0x64:0x0)),this[_0x1aec59(0x92e)]()[_0x1aec59(0x509)][_0x1aec59(0x24d)](_0x417eb3)&&_0x5dc705[_0x1aec59(0x9cb)](Number(RegExp['$1'])),this[_0x1aec59(0x92e)]()['note'][_0x1aec59(0x24d)](_0x3486f4)&&_0xe8219f['push'](Number(RegExp['$1'])),_0x157329=_0x5dc705[_0x1aec59(0xb3f)]((_0x340192,_0xdfe8b3)=>_0x340192-_0xdfe8b3,_0x157329),_0x157329>0x0&&(_0x157329=_0xe8219f['reduce']((_0x1ba376,_0x45fb75)=>_0x1ba376*(0x1-_0x45fb75),_0x157329)),_0x157329;},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x203)]=Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0xa3a)],Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0xa3a)]=function(_0x3c3cbd,_0x519f55){const _0x331eef=_0x5bbf40;_0x519f55=_0x519f55*this[_0x331eef(0x413)][_0x331eef(0x524)],_0x519f55+=this['_multipliers']['damageFlat']*(_0x519f55>=0x0?0x1:-0x1),_0x519f55=this[_0x331eef(0x251)]('PreDamage%1JS',_0x3c3cbd,_0x519f55,![]),_0x519f55=this['applyDamageCaps'](_0x519f55),_0x519f55>0x0?_0x519f55=Math[_0x331eef(0x95e)](_0x519f55):_0x519f55=Math['floor'](_0x519f55),this[_0x331eef(0x420)]=_0x519f55,this[_0x331eef(0x6e6)]=this[_0x331eef(0x6e6)]||0x0,this[_0x331eef(0x6e6)]+=_0x519f55,VisuMZ[_0x331eef(0x7d9)][_0x331eef(0x203)]['call'](this,_0x3c3cbd,_0x519f55),this[_0x331eef(0x251)](_0x331eef(0xb71),_0x3c3cbd,_0x519f55,!![]);},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x97a)]=function(_0x1b6c28){const _0x5c1a25=_0x5bbf40;if(this[_0x5c1a25(0x312)]())return _0x1b6c28;return _0x1b6c28=this['applySoftDamageCap'](_0x1b6c28),_0x1b6c28=this[_0x5c1a25(0x5a2)](_0x1b6c28),_0x1b6c28;},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x312)]=function(){const _0x235a34=_0x5bbf40,_0x5831a9=/<BYPASS DAMAGE CAP>/i;if(this[_0x235a34(0x92e)]()[_0x235a34(0x509)][_0x235a34(0x24d)](_0x5831a9))return!![];if(this[_0x235a34(0x6e4)]()['traitObjects']()[_0x235a34(0xb91)](_0x472ecf=>_0x472ecf&&_0x472ecf[_0x235a34(0x509)][_0x235a34(0x24d)](_0x5831a9)))return!![];return!VisuMZ[_0x235a34(0x7d9)][_0x235a34(0x8be)][_0x235a34(0x363)][_0x235a34(0x653)];},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x376)]=function(_0x3063b0){const _0x3696f7=_0x5bbf40;if(!VisuMZ[_0x3696f7(0x7d9)][_0x3696f7(0x8be)]['Damage'][_0x3696f7(0x698)])return _0x3063b0;const _0x3df0e8=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()[_0x3696f7(0x509)]['match'](_0x3df0e8))return _0x3063b0;if(this[_0x3696f7(0x6e4)]()[_0x3696f7(0x4c8)]()[_0x3696f7(0xb91)](_0x3611d6=>_0x3611d6&&_0x3611d6[_0x3696f7(0x509)][_0x3696f7(0x24d)](_0x3df0e8)))return _0x3063b0;const _0x1d2688=_0x3063b0<0x0?-0x1:0x1;_0x3063b0=Math[_0x3696f7(0x2c8)](_0x3063b0);let _0x46b9ba=this[_0x3696f7(0x6e4)]()[_0x3696f7(0x604)]();this[_0x3696f7(0x92e)]()[_0x3696f7(0x509)][_0x3696f7(0x24d)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x46b9ba+=Number(RegExp['$1'])/0x64);_0x46b9ba=_0x46b9ba[_0x3696f7(0x455)](0.01,0x1);const _0x26d908=this[_0x3696f7(0x8c3)](),_0x171ba9=_0x46b9ba*_0x26d908;if(_0x3063b0>_0x171ba9&&_0x26d908>_0x171ba9){_0x3063b0-=_0x171ba9;const _0xf738f0=VisuMZ[_0x3696f7(0x7d9)]['Settings']['Damage'][_0x3696f7(0x9f8)],_0x49ffce=Math[_0x3696f7(0xb10)](0x1-_0x3063b0/((_0x26d908-_0x171ba9)*_0xf738f0+_0x3063b0),0.01);_0x3063b0*=_0x49ffce,_0x3063b0+=_0x171ba9;}return _0x3063b0*_0x1d2688;},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x8c3)]=function(){const _0x43a77c=_0x5bbf40;return this[_0x43a77c(0x92e)]()[_0x43a77c(0x509)][_0x43a77c(0x24d)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this['subject']()[_0x43a77c(0x925)]();},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x5a2)]=function(_0x1d0fb4){const _0x1586d7=_0x5bbf40;let _0x139b02=this[_0x1586d7(0x8c3)]();return _0x1d0fb4[_0x1586d7(0x455)](-_0x139b02,_0x139b02);},Game_Action[_0x5bbf40(0x68c)]['shouldDisperseDamage']=function(){const _0x3cd96c=_0x5bbf40;if(!this[_0x3cd96c(0x92e)]())return![];if(!$gameParty['inBattle']())return![];return(this[_0x3cd96c(0x92e)]()[_0x3cd96c(0x509)]||'')[_0x3cd96c(0x24d)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x942)]=function(_0xd79e86){const _0x566d4b=_0x5bbf40;if(this[_0x566d4b(0x7ec)]()){let _0x3b5d82=BattleManager['_targets'];_0xd79e86/=_0x3b5d82[_0x566d4b(0x348)],this[_0x566d4b(0xa76)]()&&(_0xd79e86*=this['subject']()[_0x566d4b(0x760)]()+0x1),_0xd79e86=_0xd79e86>0x0?Math[_0x566d4b(0x95e)](_0xd79e86):Math[_0x566d4b(0x9d6)](_0xd79e86);}return _0xd79e86;},VisuMZ['BattleCore']['Game_Action_makeDamageValueDisperse']=Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x30f)],Game_Action['prototype'][_0x5bbf40(0x30f)]=function(_0x2f0253,_0x17a439){const _0x237e50=_0x5bbf40;let _0x14faca=VisuMZ[_0x237e50(0x7d9)][_0x237e50(0x568)][_0x237e50(0x86a)](this,_0x2f0253,_0x17a439);return this['disperseDamage'](_0x14faca);},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x476)]=function(_0x259247,_0x27403a){const _0x572556=_0x5bbf40;let _0x41b541=(_0x259247[_0x572556(0x719)]*_0x27403a[_0x572556(0xb01)]+_0x27403a[_0x572556(0x62d)])*_0x259247[_0x572556(0x4a5)];_0x41b541=this['disperseDamage'](_0x41b541),this['isItem']()&&(_0x41b541*=this[_0x572556(0x6e4)]()[_0x572556(0xc16)]),_0x41b541=Math[_0x572556(0x9d6)](_0x41b541),_0x41b541!==0x0&&(_0x259247[_0x572556(0xb64)](_0x41b541),this[_0x572556(0x718)](_0x259247));},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x34b)]=function(_0x191b6e,_0x4a4ed2){const _0x45d89b=_0x5bbf40;let _0xa69c1a=(_0x191b6e[_0x45d89b(0x21d)]*_0x4a4ed2['value1']+_0x4a4ed2['value2'])*_0x191b6e[_0x45d89b(0x4a5)];_0xa69c1a=this[_0x45d89b(0x942)](_0xa69c1a),this[_0x45d89b(0x962)]()&&(_0xa69c1a*=this['subject']()[_0x45d89b(0xc16)]),_0xa69c1a=Math['floor'](_0xa69c1a),_0xa69c1a!==0x0&&(_0x191b6e[_0x45d89b(0x54f)](_0xa69c1a),this[_0x45d89b(0x718)](_0x191b6e));},Game_Action[_0x5bbf40(0x68c)]['itemEffectGainTp']=function(_0x150dfd,_0x5bec84){const _0x1b6d57=_0x5bbf40;let _0x194f42=Math['floor'](_0x5bec84[_0x1b6d57(0xb01)]);_0x194f42=this[_0x1b6d57(0x942)](_0x194f42),_0x194f42!==0x0&&(_0x150dfd['gainTp'](_0x194f42),this[_0x1b6d57(0x718)](_0x150dfd));},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xa28)]=Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x3ac)],Game_Action['prototype'][_0x5bbf40(0x3ac)]=function(_0x29e207){const _0x417b5c=_0x5bbf40;if(_0x29e207&&_0x29e207[_0x417b5c(0x37d)]())_0x29e207[_0x417b5c(0x8a6)]();this['applyBattleCoreJS'](_0x417b5c(0x93b),_0x29e207,0x0,!![]),VisuMZ[_0x417b5c(0x7d9)][_0x417b5c(0xa28)][_0x417b5c(0x86a)](this,_0x29e207),this['applyBattleCoreJS'](_0x417b5c(0x20e),_0x29e207,this[_0x417b5c(0x420)]||0x0,!![]),this['applyResultSwitches'](_0x29e207);},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x251)]=function(_0xec89bd,_0x3f3b5b,_0x2a0479,_0x5c841b){const _0x141740=_0x5bbf40;if(this[_0x141740(0xb1c)]||this[_0x141740(0x8e5)])return;_0x2a0479=_0x2a0479||0x0;const _0x55de2e=_0x2a0479,_0x48e9ca=VisuMZ[_0x141740(0x7d9)][_0x141740(0x8be)]['Mechanics'],_0x3858be=_0xec89bd[_0x141740(0x7c2)]('');if(_0x48e9ca[_0x3858be]){_0x2a0479=_0x48e9ca[_0x3858be][_0x141740(0x86a)](this,_0x2a0479,_0x3f3b5b);if(_0x5c841b)_0x2a0479=_0x55de2e;}let _0x3a6354=VisuMZ[_0x141740(0x7d9)]['createKeyJS'](this[_0x141740(0x92e)](),_0xec89bd['format'](''));if(VisuMZ[_0x141740(0x7d9)]['JS'][_0x3a6354]){_0x2a0479=VisuMZ['BattleCore']['JS'][_0x3a6354][_0x141740(0x86a)](this,this[_0x141740(0x6e4)](),_0x3f3b5b,this[_0x141740(0x92e)](),_0x2a0479);if(_0x5c841b)_0x2a0479=_0x55de2e;}for(const _0x284fa6 of this[_0x141740(0x6e4)]()[_0x141740(0x4c8)]()){if(!_0x284fa6)continue;_0x3a6354=VisuMZ[_0x141740(0x7d9)]['createKeyJS'](_0x284fa6,_0xec89bd[_0x141740(0x7c2)](_0x141740(0x489)));if(VisuMZ[_0x141740(0x7d9)]['JS'][_0x3a6354]){_0x2a0479=VisuMZ[_0x141740(0x7d9)]['JS'][_0x3a6354][_0x141740(0x86a)](this,this[_0x141740(0x6e4)](),_0x3f3b5b,_0x284fa6,_0x2a0479);if(_0x5c841b)_0x2a0479=_0x55de2e;}}for(const _0x4c8d16 of _0x3f3b5b[_0x141740(0x4c8)]()){if(!_0x4c8d16)continue;_0x3a6354=VisuMZ[_0x141740(0x7d9)]['createKeyJS'](_0x4c8d16,_0xec89bd['format'](_0x141740(0x5ef)));if(VisuMZ[_0x141740(0x7d9)]['JS'][_0x3a6354]){_0x2a0479=VisuMZ[_0x141740(0x7d9)]['JS'][_0x3a6354][_0x141740(0x86a)](this,this[_0x141740(0x6e4)](),_0x3f3b5b,_0x4c8d16,_0x2a0479);if(_0x5c841b)_0x2a0479=_0x55de2e;}}return _0x2a0479;},Game_Action['prototype'][_0x5bbf40(0x457)]=function(_0xe6d703){const _0xbe3887=_0x5bbf40,_0x5bc47f=this['_totalValue']||0x0,_0x4ebf8b=VisuMZ[_0xbe3887(0x7d9)][_0xbe3887(0x8be)][_0xbe3887(0x815)],_0x35c46a=_0xe6d703[_0xbe3887(0x7c2)]('');_0x4ebf8b[_0x35c46a]&&_0x4ebf8b[_0x35c46a][_0xbe3887(0x86a)](this,_0x5bc47f);let _0x49d05a=VisuMZ[_0xbe3887(0x7d9)][_0xbe3887(0xa6b)](this['item'](),_0xe6d703);VisuMZ['BattleCore']['JS'][_0x49d05a]&&VisuMZ[_0xbe3887(0x7d9)]['JS'][_0x49d05a][_0xbe3887(0x86a)](this,this['subject'](),this[_0xbe3887(0x6e4)](),this[_0xbe3887(0x92e)](),_0x5bc47f);for(const _0x34d262 of this['subject']()[_0xbe3887(0x4c8)]()){if(!_0x34d262)continue;_0x49d05a=VisuMZ['BattleCore']['createKeyJS'](_0x34d262,_0xe6d703),VisuMZ[_0xbe3887(0x7d9)]['JS'][_0x49d05a]&&VisuMZ['BattleCore']['JS'][_0x49d05a][_0xbe3887(0x86a)](this,this[_0xbe3887(0x6e4)](),this['subject'](),_0x34d262,_0x5bc47f);}},Game_Action[_0x5bbf40(0x68c)]['speed']=function(){const _0x5c022b=_0x5bbf40;return VisuMZ[_0x5c022b(0x7d9)][_0x5c022b(0x8be)][_0x5c022b(0x815)][_0x5c022b(0x73e)][_0x5c022b(0x86a)](this);},Game_Action['prototype']['allowRandomSpeed']=function(){const _0x5cd9d2=_0x5bbf40;return VisuMZ['BattleCore'][_0x5cd9d2(0x8be)]['Mechanics'][_0x5cd9d2(0xb73)];},Game_Action['prototype']['isCustomBattleScope']=function(){const _0x145daa=_0x5bbf40;if(this[_0x145daa(0x6ae)]===_0x145daa(0xa3c))return![];if(this[_0x145daa(0x6ae)]==='all\x20enemies')return![];if(!this[_0x145daa(0x92e)]())return![];return this[_0x145daa(0x92e)]()[_0x145daa(0x509)][_0x145daa(0x24d)](/<JS TARGETS>/i);},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0xb9b)]=function(){const _0x4af71f=_0x5bbf40;if(this['_targetBattlerKey']===_0x4af71f(0xa3c))return![];if(this[_0x4af71f(0x6ae)]===_0x4af71f(0x8a2))return![];if(!this['_forcing']&&this[_0x4af71f(0x6e4)]()[_0x4af71f(0xa1f)]())return![];if(this['isCustomBattleScope']())return!![];if(!this['item']())return![];return typeof this[_0x4af71f(0x92e)]()[_0x4af71f(0x740)]==='string';},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x4e8)]=Game_Action[_0x5bbf40(0x68c)]['isForOpponent'],Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x5df)]=function(){const _0x310dcf=_0x5bbf40;if(this[_0x310dcf(0x6ae)]===_0x310dcf(0xa3c))return![];if(this[_0x310dcf(0x6ae)]===_0x310dcf(0x8a2))return!![];return this['isBattleCoreTargetScope']()&&!this[_0x310dcf(0x44c)]()?this[_0x310dcf(0xaba)]():VisuMZ[_0x310dcf(0x7d9)][_0x310dcf(0x4e8)]['call'](this);},Game_Action[_0x5bbf40(0x68c)]['isForOpponentBattleCore']=function(){const _0x1505fe=_0x5bbf40,_0x341e66=String(this['item']()[_0x1505fe(0x740)]);if(_0x341e66['match'](/ANY/i))return!![];return _0x341e66['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x6e9)]=Game_Action['prototype']['isForFriend'],Game_Action['prototype']['isForFriend']=function(){const _0x523c6c=_0x5bbf40;if(this[_0x523c6c(0x6ae)]===_0x523c6c(0xa3c))return!![];if(this[_0x523c6c(0x6ae)]===_0x523c6c(0x8a2))return![];return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this[_0x523c6c(0x444)]():VisuMZ[_0x523c6c(0x7d9)]['Game_Action_isForFriend']['call'](this);},Game_Action[_0x5bbf40(0x68c)]['isForFriendBattleCore']=function(){const _0x651381=_0x5bbf40,_0x2b491c=String(this[_0x651381(0x92e)]()['scope']);return _0x2b491c[_0x651381(0x24d)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action['prototype'][_0x5bbf40(0x4d6)]=function(){const _0x202c84=_0x5bbf40;if(this['isBattleCoreTargetScope']()&&!this[_0x202c84(0x44c)]()){const _0x4f451e=String(this['item']()['scope']);return _0x4f451e[_0x202c84(0x24d)](/(?:ENEMY|FOE)/i)&&_0x4f451e[_0x202c84(0x24d)](/OR/i)&&_0x4f451e[_0x202c84(0x24d)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x7cc)]=function(){const _0x5c9f99=_0x5bbf40;if(this[_0x5c9f99(0x4d6)]()){const _0x21817b=String(this[_0x5c9f99(0x92e)]()['scope']);if(_0x21817b[_0x5c9f99(0x24d)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action['prototype'][_0x5bbf40(0x75e)]=function(){const _0x15274f=_0x5bbf40;if(this[_0x15274f(0x4d6)]()){const _0x2590ad=String(this[_0x15274f(0x92e)]()[_0x15274f(0x740)]);if(_0x2590ad['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x6bc)]=Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x4b4)],Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x4b4)]=function(){const _0x585eec=_0x5bbf40;if(this['_targetBattlerKey']==='all\x20actors')return!![];return this[_0x585eec(0xb9b)]()&&!this['isCustomBattleScope']()?this[_0x585eec(0x2e4)]():VisuMZ['BattleCore']['Game_Action_isForAliveFriend'][_0x585eec(0x86a)](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xb31)]=Game_Action['prototype'][_0x5bbf40(0x291)],Game_Action[_0x5bbf40(0x68c)]['isForDeadFriend']=function(){const _0x5ae290=_0x5bbf40;if(this['_targetBattlerKey']===_0x5ae290(0xa3c))return VisuMZ[_0x5ae290(0x7d9)][_0x5ae290(0xb31)]['call'](this);return VisuMZ[_0x5ae290(0x7d9)][_0x5ae290(0xb31)][_0x5ae290(0x86a)](this);},Game_Action[_0x5bbf40(0x68c)]['isForAliveFriendBattleCore']=function(){if(this['isForAnyone']())return!![];return![];},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x34d)]=function(){const _0x19ff9c=_0x5bbf40;return this[_0x19ff9c(0x92e)]()&&this[_0x19ff9c(0x92e)]()[_0x19ff9c(0x509)]['match'](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ['BattleCore'][_0x5bbf40(0xb4f)]=Game_Action['prototype'][_0x5bbf40(0x8fe)],Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x8fe)]=function(){const _0x423eb6=_0x5bbf40;if(this[_0x423eb6(0x6ae)]===_0x423eb6(0xa3c))return![];if(this[_0x423eb6(0x6ae)]===_0x423eb6(0x8a2))return![];return this[_0x423eb6(0xb9b)]()&&!this[_0x423eb6(0x44c)]()?this[_0x423eb6(0x977)]():VisuMZ[_0x423eb6(0x7d9)][_0x423eb6(0xb4f)][_0x423eb6(0x86a)](this);},Game_Action['prototype']['isForOneBattleCore']=function(){const _0x128954=_0x5bbf40;if(this[_0x128954(0x4d6)]())return!![];return![];},VisuMZ[_0x5bbf40(0x7d9)]['Game_Action_isForRandom']=Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0xba1)],Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0xba1)]=function(){const _0x35d160=_0x5bbf40;if(this[_0x35d160(0x6ae)]==='all\x20actors')return![];if(this['_targetBattlerKey']===_0x35d160(0x8a2))return![];return this[_0x35d160(0xb9b)]()&&!this['isCustomBattleScope']()?this[_0x35d160(0x4d1)]():VisuMZ[_0x35d160(0x7d9)][_0x35d160(0x3ec)]['call'](this);},Game_Action[_0x5bbf40(0x68c)]['isForRandomBattleCore']=function(){const _0x3c0404=_0x5bbf40,_0x39d8f2=String(this[_0x3c0404(0x92e)]()[_0x3c0404(0x740)]);return _0x39d8f2[_0x3c0404(0x24d)](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore'][_0x5bbf40(0x90e)]=Game_Action[_0x5bbf40(0x68c)]['isForAll'],Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0xa8c)]=function(){const _0x460038=_0x5bbf40;if(this[_0x460038(0x6ae)]==='all\x20actors')return!![];if(this[_0x460038(0x6ae)]==='all\x20enemies')return!![];return VisuMZ[_0x460038(0x7d9)][_0x460038(0x90e)]['call'](this);},Game_Action[_0x5bbf40(0x68c)]['canSingleOrMultipleSelect']=function(){const _0x325d36=_0x5bbf40;if(!this['item']())return![];if(this[_0x325d36(0x291)]())return![];return(this[_0x325d36(0x92e)]()[_0x325d36(0x509)]||'')[_0x325d36(0x24d)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ['BattleCore'][_0x5bbf40(0x378)]=Game_Action[_0x5bbf40(0x68c)]['testApply'],Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x810)]=function(_0x3e5897){const _0x294508=_0x5bbf40;if(this[_0x294508(0x34d)]()&&_0x3e5897===this[_0x294508(0x6e4)]())return![];return VisuMZ[_0x294508(0x7d9)][_0x294508(0x378)][_0x294508(0x86a)](this,_0x3e5897);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x45d)]=Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x399)],Game_Action['prototype'][_0x5bbf40(0x399)]=function(){const _0x13e56d=_0x5bbf40,_0x552f64=VisuMZ['BattleCore'][_0x13e56d(0x45d)][_0x13e56d(0x86a)](this);if(this[_0x13e56d(0x34d)]())_0x552f64[_0x13e56d(0x94f)](this[_0x13e56d(0x6e4)]());return _0x552f64;},VisuMZ['BattleCore'][_0x5bbf40(0x3ce)]=Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0xad8)],Game_Action['prototype'][_0x5bbf40(0xad8)]=function(){const _0x41aa73=_0x5bbf40;return this[_0x41aa73(0xb9b)]()&&!this[_0x41aa73(0x44c)]()?this[_0x41aa73(0x63c)]():VisuMZ['BattleCore']['Game_Action_needsSelection'][_0x41aa73(0x86a)](this);},Game_Action['prototype'][_0x5bbf40(0x63c)]=function(){const _0x2aa751=_0x5bbf40,_0x36c5d2=String(this[_0x2aa751(0x92e)]()['scope']);if(_0x36c5d2[_0x2aa751(0x24d)](/RANDOM/i))return![];if(_0x36c5d2['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x36c5d2[_0x2aa751(0x24d)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x36c5d2[_0x2aa751(0x24d)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x36c5d2[_0x2aa751(0x24d)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x2aa751(0x7d9)][_0x2aa751(0x3ce)][_0x2aa751(0x86a)](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x9bf)]=Game_Action[_0x5bbf40(0x68c)]['makeTargets'],Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x4f4)]=function(){const _0x345756=_0x5bbf40;let _0x2904e0=[];return this['isBattleCoreTargetScope']()?this[_0x345756(0x44c)]()?_0x2904e0=this[_0x345756(0x385)]():_0x2904e0=this[_0x345756(0x5ca)]():_0x2904e0=VisuMZ[_0x345756(0x7d9)][_0x345756(0x9bf)]['call'](this),_0x2904e0=this[_0x345756(0xb29)](_0x2904e0),_0x2904e0;},Game_Action['prototype']['isSubjectValidForAnyoneSelect']=function(){const _0x1ec4fe=_0x5bbf40;return this[_0x1ec4fe(0x6e4)]()[_0x1ec4fe(0xa32)]()&&!this['subject']()[_0x1ec4fe(0x980)]();},Game_Action[_0x5bbf40(0x68c)]['makeTargetsBattleCoreJS']=function(){const _0x464934=_0x5bbf40,_0x330b5d=VisuMZ[_0x464934(0x7d9)][_0x464934(0xa6b)](this[_0x464934(0x92e)](),_0x464934(0x3f1));if(VisuMZ[_0x464934(0x7d9)]['JS'][_0x330b5d]){targets=VisuMZ['BattleCore']['Game_Action_makeTargets']['call'](this);const _0x4bbea2=VisuMZ[_0x464934(0x7d9)][_0x464934(0xa6b)](this[_0x464934(0x92e)](),_0x464934(0x3f1));return targets=VisuMZ['BattleCore']['JS'][_0x4bbea2][_0x464934(0x86a)](this,this['subject'](),targets),this['repeatTargets'](targets);}return this['makeTargetsBattleCore']();},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x5ca)]=function(){const _0x34e5ac=_0x5bbf40;let _0x181e25=[];const _0x2e3305=String(this[_0x34e5ac(0x92e)]()[_0x34e5ac(0x740)]);if(this[_0x34e5ac(0x75e)]())return this[_0x34e5ac(0x4b9)]()?(_0x181e25=this[_0x34e5ac(0x63a)](),this['repeatTargets'](_0x181e25)):(this['_targetIndex']=-0x1,_0x181e25[_0x34e5ac(0x9cb)](...this[_0x34e5ac(0x67a)]()),this[_0x34e5ac(0x1ef)](_0x181e25));if(this[_0x34e5ac(0x7cc)]()){if(this['isSubjectValidForAnyoneSelect']())return _0x181e25=this[_0x34e5ac(0x63a)](),this[_0x34e5ac(0x1ef)](_0x181e25);else{if(Imported[_0x34e5ac(0xba8)]){if(VisuMZ[_0x34e5ac(0xac5)][_0x34e5ac(0x77e)]<1.19){let _0x3c7d78='';_0x3c7d78+='VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20',_0x3c7d78+=_0x34e5ac(0x4f7),_0x3c7d78+=_0x34e5ac(0x527),alert(_0x3c7d78),SceneManager[_0x34e5ac(0x593)]();}}return this['_targetIndex']=-0x1,_0x181e25[_0x34e5ac(0x9cb)](...this[_0x34e5ac(0x375)]()),this['repeatTargets'](_0x181e25);}}if(_0x2e3305[_0x34e5ac(0x24d)](/(\d+) RANDOM ANY/i)){let _0x38acec=Number(RegExp['$1']);while(_0x38acec--){const _0x5cad7f=Math[_0x34e5ac(0xac8)](0x2)===0x0?this[_0x34e5ac(0x578)]():this['friendsUnit']();_0x181e25[_0x34e5ac(0x9cb)](_0x5cad7f[_0x34e5ac(0x6fa)]());}return this['repeatTargets'](_0x181e25);}if(_0x2e3305[_0x34e5ac(0x24d)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x4633f5=Number(RegExp['$1']);while(_0x4633f5--){_0x181e25[_0x34e5ac(0x9cb)](this[_0x34e5ac(0x578)]()['trueRandomTarget']());}return this['repeatTargets'](_0x181e25);}if(_0x2e3305[_0x34e5ac(0x24d)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x30d860=Number(RegExp['$1']);while(_0x30d860--){_0x181e25[_0x34e5ac(0x9cb)](this[_0x34e5ac(0x24f)]()[_0x34e5ac(0x6fa)]());}return this['repeatTargets'](_0x181e25);}if(_0x2e3305['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x181e25[_0x34e5ac(0x9cb)](...this[_0x34e5ac(0x24f)]()['aliveMembers']()[_0x34e5ac(0xafb)](_0x9b88dd=>_0x9b88dd!==this[_0x34e5ac(0x6e4)]())),this[_0x34e5ac(0x1ef)](_0x181e25);return VisuMZ['BattleCore'][_0x34e5ac(0x9bf)][_0x34e5ac(0x86a)](this);},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x30e)]=function(_0x4bc18f){const _0x325f0d=_0x5bbf40,_0x23b1ee=[];for(let _0x17b71c=0x0;_0x17b71c<this[_0x325f0d(0x9ec)]();_0x17b71c++){_0x23b1ee['push'](_0x4bc18f[_0x325f0d(0x6fa)]());}return _0x23b1ee;},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0xb29)]=function(_0x32654b){const _0x3f8301=_0x5bbf40;if(!this[_0x3f8301(0x92e)]())return _0x32654b;const _0x29b26b=this[_0x3f8301(0x92e)]()[_0x3f8301(0x509)];if(this[_0x3f8301(0x34d)]()){this[_0x3f8301(0xa8c)]()&&_0x32654b[_0x3f8301(0x94f)](this['subject']());if(_0x32654b[_0x3f8301(0x608)](this[_0x3f8301(0x6e4)]())){const _0x269772=this['friendsUnit']()[_0x3f8301(0xb48)]()[_0x3f8301(0x94f)](this[_0x3f8301(0x6e4)]());if(_0x269772['length']>0x0){_0x269772['sort']((_0x434f45,_0x423013)=>_0x434f45['hpRate']()-_0x423013[_0x3f8301(0x2ac)]());while(_0x32654b[_0x3f8301(0x608)](this[_0x3f8301(0x6e4)]())){const _0x5c1e0c=_0x32654b[_0x3f8301(0x5c9)](this[_0x3f8301(0x6e4)]());_0x32654b[_0x5c1e0c]=_0x269772[Math[_0x3f8301(0xac8)](_0x269772[_0x3f8301(0x348)])];}}else _0x32654b[_0x3f8301(0x94f)](this[_0x3f8301(0x6e4)]());}}return _0x32654b;},VisuMZ['BattleCore'][_0x5bbf40(0xabe)]=Game_Action['prototype'][_0x5bbf40(0x7e5)],Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x7e5)]=function(_0x120ece,_0x26a546){const _0x367dcb=_0x5bbf40;VisuMZ[_0x367dcb(0x7d9)][_0x367dcb(0xabe)][_0x367dcb(0x86a)](this,_0x120ece,_0x26a546);if(!_0x120ece[_0x367dcb(0xacd)]())return;for(const _0xc1aec8 of this['subject']()[_0x367dcb(0x31f)]()){if(_0xc1aec8===_0x120ece[_0x367dcb(0x646)]()){let _0x433d1d=_0x26a546['value1'];_0x433d1d*=_0x120ece[_0x367dcb(0x274)](_0xc1aec8),_0x433d1d*=this[_0x367dcb(0x6e4)]()[_0x367dcb(0xb53)](_0xc1aec8),_0x433d1d*=this[_0x367dcb(0x478)](_0x120ece),Math[_0x367dcb(0x2ff)]()<_0x433d1d&&(_0x120ece[_0x367dcb(0x8cf)]=!![],this[_0x367dcb(0x718)](_0x120ece));}}},VisuMZ['BattleCore'][_0x5bbf40(0x973)]=Game_Action[_0x5bbf40(0x68c)]['itemEffectAddNormalState'],Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0xbf5)]=function(_0x5d4978,_0x57d56b){const _0x27b771=_0x5bbf40;VisuMZ['BattleCore'][_0x27b771(0x973)][_0x27b771(0x86a)](this,_0x5d4978,_0x57d56b);if(!_0x5d4978['isImmortal']())return;if(_0x57d56b[_0x27b771(0x2cd)]!==_0x5d4978['deathStateId']())return;let _0x2dd5ed=_0x57d56b[_0x27b771(0xb01)];!this[_0x27b771(0x873)]()&&(_0x2dd5ed*=_0x5d4978[_0x27b771(0x274)](_0x57d56b[_0x27b771(0x2cd)]),_0x2dd5ed*=this[_0x27b771(0x478)](_0x5d4978)),Math[_0x27b771(0x2ff)]()<_0x2dd5ed&&(_0x5d4978[_0x27b771(0x8cf)]=!![],this[_0x27b771(0x718)](_0x5d4978));},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x94b)]=Game_Action['prototype'][_0x5bbf40(0x2d8)],Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x2d8)]=function(){const _0x219b3e=_0x5bbf40;VisuMZ['BattleCore'][_0x219b3e(0x94b)][_0x219b3e(0x86a)](this),this['applyGlobalCommonEventNotetags'](),this['resetResultSwitches']();},Game_Action['prototype'][_0x5bbf40(0x933)]=function(){const _0x4dce7a=_0x5bbf40;if(!SceneManager[_0x4dce7a(0x277)]())return;const _0x3f819e=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x33e145=this[_0x4dce7a(0x92e)]()['note'][_0x4dce7a(0x24d)](_0x3f819e);if(_0x33e145)for(const _0x87bafa of _0x33e145){if(!_0x87bafa)continue;_0x87bafa[_0x4dce7a(0x24d)](_0x3f819e);const _0x34322d=String(RegExp['$1'])[_0x4dce7a(0x728)](',')[_0x4dce7a(0x6d6)](_0x1d69c2=>String(_0x1d69c2)['trim']()),_0x2f068c=_0x34322d[_0x4dce7a(0x6d6)](_0x4bf2d3=>DataManager[_0x4dce7a(0x22c)](_0x4bf2d3));for(const _0x2cd81e of _0x2f068c){const _0x2af96e=$dataCommonEvents[_0x2cd81e];_0x2af96e&&$gameTemp[_0x4dce7a(0x2f9)](_0x2cd81e);}}},DataManager[_0x5bbf40(0x22c)]=function(_0x20bf94){const _0xd2b734=_0x5bbf40;_0x20bf94=_0x20bf94[_0xd2b734(0x6ca)]()[_0xd2b734(0x86c)](),this[_0xd2b734(0x206)]=this[_0xd2b734(0x206)]||{};if(this[_0xd2b734(0x206)][_0x20bf94])return this[_0xd2b734(0x206)][_0x20bf94];for(const _0x112360 of $dataCommonEvents){if(!_0x112360)continue;let _0x1bbd2e=_0x112360[_0xd2b734(0x4e5)];_0x1bbd2e=_0x1bbd2e['replace'](/\x1I\[(\d+)\]/gi,''),_0x1bbd2e=_0x1bbd2e[_0xd2b734(0xbd9)](/\\I\[(\d+)\]/gi,''),this[_0xd2b734(0x206)][_0x1bbd2e[_0xd2b734(0x6ca)]()[_0xd2b734(0x86c)]()]=_0x112360['id'];}return this[_0xd2b734(0x206)][_0x20bf94]||0x0;},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x514)]=function(){const _0x3a4e92=_0x5bbf40;if(!SceneManager[_0x3a4e92(0x277)]())return;const _0x5bb970=VisuMZ[_0x3a4e92(0x7d9)]['Settings']['Mechanics'];_0x5bb970[_0x3a4e92(0x581)]&&$gameSwitches[_0x3a4e92(0x3ad)](_0x5bb970[_0x3a4e92(0x581)],![]),_0x5bb970[_0x3a4e92(0x7e2)]&&$gameSwitches[_0x3a4e92(0x3ad)](_0x5bb970[_0x3a4e92(0x7e2)],![]),_0x5bb970[_0x3a4e92(0x27d)]&&$gameVariables[_0x3a4e92(0x3ad)](_0x5bb970[_0x3a4e92(0x27d)],0x0),_0x5bb970[_0x3a4e92(0x6b6)]&&$gameVariables[_0x3a4e92(0x3ad)](_0x5bb970[_0x3a4e92(0x6b6)],0x0);},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x9cf)]=function(_0x5f26ec){const _0x10265a=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;if(!_0x5f26ec)return;const _0x1e7f25=_0x5f26ec[_0x10265a(0xb82)](),_0x4b4565=VisuMZ['BattleCore'][_0x10265a(0x8be)][_0x10265a(0x815)];_0x4b4565[_0x10265a(0x581)]&&_0x1e7f25[_0x10265a(0x89d)]&&$gameSwitches[_0x10265a(0x3ad)](_0x4b4565[_0x10265a(0x581)],!![]);_0x4b4565[_0x10265a(0x7e2)]&&(_0x1e7f25[_0x10265a(0xa63)]||_0x1e7f25[_0x10265a(0x777)])&&$gameSwitches[_0x10265a(0x3ad)](_0x4b4565['SwitchMissEvade'],!![]);if(_0x4b4565['VariableDmg']){let _0x18829d=$gameVariables[_0x10265a(0x371)](_0x4b4565[_0x10265a(0x27d)]);_0x1e7f25[_0x10265a(0xb65)]>0x0&&(_0x18829d+=Math[_0x10265a(0x2c8)](_0x1e7f25[_0x10265a(0xb65)])),$gameVariables['setValue'](_0x4b4565[_0x10265a(0x27d)],_0x18829d);}if(_0x4b4565[_0x10265a(0x6b6)]){let _0x293829=$gameVariables['value'](_0x4b4565['VariableHeal']);_0x1e7f25[_0x10265a(0xb65)]<0x0&&(_0x293829+=Math[_0x10265a(0x2c8)](_0x1e7f25['hpDamage'])),$gameVariables[_0x10265a(0x3ad)](_0x4b4565[_0x10265a(0x6b6)],_0x293829);}},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x551)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x9cd)]=Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0xace)],Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0xace)]=function(_0x23fec6,_0x13d639){const _0x357b39=_0x5bbf40;VisuMZ[_0x357b39(0x7d9)][_0x357b39(0x9cd)][_0x357b39(0x86a)](this,_0x23fec6,_0x13d639);!this[_0x357b39(0x851)]()&&_0x23fec6&&_0x23fec6[_0x357b39(0xb82)]()[_0x357b39(0xb65)]>0x0&&this['performLifeSteal']('HP',_0x23fec6,_0x23fec6[_0x357b39(0xb82)]()['hpDamage']);if(_0x23fec6){this[_0x357b39(0x882)]=this['_executeHpDamage']||{};const _0x15efd5=_0x23fec6[_0x357b39(0x4ba)]();this[_0x357b39(0x882)][_0x15efd5]=_0x13d639;}},Game_Action['prototype']['getLastHpDamage']=function(_0x1f9a21){const _0xc6bc12=_0x5bbf40;this[_0xc6bc12(0x882)]=this[_0xc6bc12(0x882)]||{};const _0x19aad9=_0x1f9a21['battlerKey']();return this[_0xc6bc12(0x882)][_0x19aad9]||0x0;},VisuMZ['BattleCore'][_0x5bbf40(0xbfc)]=Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x3de)],Game_Action[_0x5bbf40(0x68c)]['executeMpDamage']=function(_0x340019,_0xf2467a){const _0x5e82cc=_0x5bbf40;VisuMZ[_0x5e82cc(0x7d9)]['Game_Action_executeMpDamage'][_0x5e82cc(0x86a)](this,_0x340019,_0xf2467a),!this[_0x5e82cc(0x851)]()&&_0x340019&&_0x340019['result']()[_0x5e82cc(0xaff)]>0x0&&this['performLifeSteal']('MP',_0x340019,_0x340019['result']()['mpDamage']);},Game_Action['prototype'][_0x5bbf40(0x80c)]=function(_0x3c3663,_0x1e3afd,_0x2b69e8){const _0x3e771b=_0x5bbf40;_0x3c3663=_0x3c3663[_0x3e771b(0x6ca)]()[_0x3e771b(0x86c)]();const _0x4b2dd2=this[_0x3e771b(0xb0a)](_0x3c3663,_0x1e3afd);if(_0x4b2dd2<=0x0)return;const _0x34d4f3=Math['round'](_0x2b69e8*_0x4b2dd2);if(_0x34d4f3<=0x0)return;let _0x59ab22=this[_0x3e771b(0x6e4)]();if(this[_0x3e771b(0x48b)])_0x59ab22=this[_0x3e771b(0x48b)];const _0x29183d=_0x1e3afd[_0x3e771b(0x6f4)](_0x3c3663)?-0x1:0x1;if(_0x3c3663==='HP')_0x59ab22['gainHp'](_0x29183d*_0x34d4f3);if(_0x3c3663==='MP')_0x59ab22['gainMp'](_0x29183d*_0x34d4f3);},Game_Action['prototype'][_0x5bbf40(0xb0a)]=function(_0x30206d,_0x13385e){const _0x3f1945=_0x5bbf40;if(this['isCancelLifeSteal'](_0x30206d))return 0x0;if(this['subject']()[_0x3f1945(0x5e8)](_0x30206d))return 0x0;if(_0x13385e[_0x3f1945(0x4ac)](_0x30206d))return 0x0;let _0xf118e4=0x0;return _0xf118e4+=this[_0x3f1945(0x3b2)](_0x30206d),_0xf118e4+=this['subject']()[_0x3f1945(0xb0a)](_0x30206d,this[_0x3f1945(0x92e)]()[_0x3f1945(0x7f3)]),_0xf118e4[_0x3f1945(0x455)](0x0,0x1);},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x4fb)]=function(_0x153850){const _0x1fdd70=_0x5bbf40;_0x153850=_0x153850[_0x1fdd70(0x6ca)]()['trim']();const _0x584fdb=VisuMZ[_0x1fdd70(0x7d9)][_0x1fdd70(0x551)],_0x310f4c=this['item']()[_0x1fdd70(0x509)]||'';if(_0x310f4c[_0x1fdd70(0x24d)](_0x584fdb[_0x1fdd70(0x421)]))return!![];if(_0x153850==='HP'&&_0x310f4c['match'](_0x584fdb[_0x1fdd70(0xa77)]))return!![];if(_0x153850==='MP'&&_0x310f4c['match'](_0x584fdb[_0x1fdd70(0x3a8)]))return!![];return![];},Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x3b2)]=function(_0x31f790){const _0x421cc8=_0x5bbf40,_0x284343=VisuMZ[_0x421cc8(0x7d9)]['LifeStealRegExp'],_0x407bcf=this[_0x421cc8(0x92e)]()[_0x421cc8(0x509)]||'';_0x31f790=_0x31f790[_0x421cc8(0x6ca)]()[_0x421cc8(0x86c)]();const _0x52e577=_0x407bcf[_0x421cc8(0x24d)](_0x284343[_0x421cc8(0x762)]);if(_0x52e577)for(const _0x5a72a4 of _0x52e577){_0x5a72a4['match'](_0x284343[_0x421cc8(0x762)]);const _0x56a8b7=String(RegExp['$1'])[_0x421cc8(0x6ca)]()['trim'](),_0x8335c8=Number(RegExp['$2'])*0.01;if(_0x56a8b7!==_0x31f790)continue;return _0x8335c8;}return 0x0;},Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0xb0a)]=function(_0x1aa37e,_0x222de7){const _0x349b6f=_0x5bbf40,_0x3933b8=VisuMZ[_0x349b6f(0x7d9)][_0x349b6f(0x551)];let _0x7a72b2=0x0;_0x1aa37e=_0x1aa37e['toUpperCase']()['trim']();for(const _0x1bc76e of this[_0x349b6f(0x4c8)]()){if(!_0x1bc76e)continue;const _0x3ddfd8=_0x1bc76e[_0x349b6f(0x509)]||'',_0x37acde=_0x3ddfd8[_0x349b6f(0x24d)](_0x3933b8['lifeStealTrait']);if(_0x37acde)for(const _0x109e65 of _0x37acde){_0x109e65['match'](_0x3933b8['lifeStealTrait']);const _0x547603=String(RegExp['$1'])['toUpperCase']()[_0x349b6f(0x86c)](),_0x102ebb=String(RegExp['$2']),_0x11ee3a=Number(RegExp['$3'])*0.01;if(_0x547603!==_0x1aa37e)continue;if(_0x222de7===Game_Action[_0x349b6f(0x7f4)]&&_0x102ebb['match'](/CERTAIN/i))_0x7a72b2+=_0x11ee3a;else{if(_0x222de7===Game_Action['HITTYPE_PHYSICAL']&&_0x102ebb[_0x349b6f(0x24d)](/PHYS/i))_0x7a72b2+=_0x11ee3a;else _0x222de7===Game_Action[_0x349b6f(0x950)]&&_0x102ebb['match'](/MAGIC/i)&&(_0x7a72b2+=_0x11ee3a);}}}return _0x7a72b2;},Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0x5e8)]=function(_0x5d472){const _0x3b09d2=_0x5bbf40;_0x5d472=_0x5d472['toUpperCase']()[_0x3b09d2(0x86c)]();const _0x31ddef=VisuMZ[_0x3b09d2(0x7d9)][_0x3b09d2(0x551)];for(const _0x414de6 of this[_0x3b09d2(0x4c8)]()){if(!_0x414de6)continue;const _0x4b9326=_0x414de6[_0x3b09d2(0x509)]||'';if(_0x4b9326[_0x3b09d2(0x24d)](_0x31ddef[_0x3b09d2(0x271)]))return!![];if(_0x5d472==='HP'&&_0x4b9326[_0x3b09d2(0x24d)](_0x31ddef['disarmHpLifeSteal']))return!![];if(_0x5d472==='MP'&&_0x4b9326['match'](_0x31ddef['disarmMpLifeSteal']))return!![];}return![];},Game_BattlerBase[_0x5bbf40(0x68c)]['isNegativeLifeSteal']=function(_0x29c178){const _0x281da9=_0x5bbf40;_0x29c178=_0x29c178[_0x281da9(0x6ca)]()[_0x281da9(0x86c)]();const _0xa6cf19=VisuMZ[_0x281da9(0x7d9)][_0x281da9(0x551)];for(const _0x44c541 of this['traitObjects']()){if(!_0x44c541)continue;const _0x6a6dee=_0x44c541[_0x281da9(0x509)]||'';if(_0x6a6dee[_0x281da9(0x24d)](_0xa6cf19[_0x281da9(0x86b)]))return!![];if(_0x29c178==='HP'&&_0x6a6dee[_0x281da9(0x24d)](_0xa6cf19[_0x281da9(0x66b)]))return!![];if(_0x29c178==='MP'&&_0x6a6dee[_0x281da9(0x24d)](_0xa6cf19[_0x281da9(0x984)]))return!![];}return![];},Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0x4ac)]=function(_0x49d2bc){const _0x26b019=_0x5bbf40;_0x49d2bc=_0x49d2bc[_0x26b019(0x6ca)]()[_0x26b019(0x86c)]();const _0x45f5e9=VisuMZ[_0x26b019(0x7d9)]['LifeStealRegExp'];for(const _0x11d9c9 of this['traitObjects']()){if(!_0x11d9c9)continue;const _0x153ee6=_0x11d9c9[_0x26b019(0x509)]||'';if(_0x153ee6[_0x26b019(0x24d)](_0x45f5e9[_0x26b019(0x244)]))return!![];if(_0x49d2bc==='HP'&&_0x153ee6[_0x26b019(0x24d)](_0x45f5e9['guardHpLifeSteal']))return!![];if(_0x49d2bc==='MP'&&_0x153ee6[_0x26b019(0x24d)](_0x45f5e9['guardMpLifeSteal']))return!![];}return![];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x42f)]=Game_BattlerBase['prototype'][_0x5bbf40(0x64e)],Game_BattlerBase['prototype'][_0x5bbf40(0x64e)]=function(){const _0x5741db=_0x5bbf40;VisuMZ[_0x5741db(0x7d9)]['Game_BattlerBase_initMembers'][_0x5741db(0x86a)](this),this[_0x5741db(0x9ae)]();},Game_BattlerBase['prototype'][_0x5bbf40(0x9ae)]=function(){const _0x343a8a=_0x5bbf40;this[_0x343a8a(0x253)]=![];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x83b)]=Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0x82f)],Game_BattlerBase[_0x5bbf40(0x68c)]['refresh']=function(){const _0x66934d=_0x5bbf40;this[_0x66934d(0x3f3)]={},VisuMZ[_0x66934d(0x7d9)][_0x66934d(0x83b)][_0x66934d(0x86a)](this);},Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0x513)]=function(_0x465731){const _0x4cda98=_0x5bbf40;return this[_0x4cda98(0x3f3)]=this[_0x4cda98(0x3f3)]||{},this[_0x4cda98(0x3f3)][_0x465731]!==undefined;},Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0x925)]=function(){const _0x135758=_0x5bbf40;if(this[_0x135758(0x3f3)][_0x135758(0x925)]!==undefined)return this['_cache'][_0x135758(0x925)];const _0x2494ea=/<DAMAGE CAP:[ ](\d+)>/i,_0xde9a27=this[_0x135758(0x4c8)]()[_0x135758(0x6d6)](_0x2acd70=>_0x2acd70&&_0x2acd70[_0x135758(0x509)][_0x135758(0x24d)](_0x2494ea)?Number(RegExp['$1']):0x0);let _0x1c718c=_0xde9a27[_0x135758(0x348)]>0x0?Math[_0x135758(0xb10)](..._0xde9a27):0x0;if(_0x1c718c<=0x0)_0x1c718c=VisuMZ[_0x135758(0x7d9)][_0x135758(0x8be)][_0x135758(0x363)][_0x135758(0x968)];return this[_0x135758(0x3f3)][_0x135758(0x925)]=_0x1c718c,this[_0x135758(0x3f3)][_0x135758(0x925)];},Game_BattlerBase['prototype'][_0x5bbf40(0x604)]=function(){const _0x31b1d5=_0x5bbf40;if(this['_cache'][_0x31b1d5(0x7d0)]!==undefined)return this[_0x31b1d5(0x3f3)][_0x31b1d5(0x7d0)];let _0x13d1ea=VisuMZ[_0x31b1d5(0x7d9)][_0x31b1d5(0x8be)][_0x31b1d5(0x363)][_0x31b1d5(0x8a0)];const _0x590102=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x2b3290=this[_0x31b1d5(0x4c8)]()[_0x31b1d5(0x6d6)](_0x51d05e=>_0x51d05e&&_0x51d05e[_0x31b1d5(0x509)]['match'](_0x590102)?Number(RegExp['$1'])/0x64:0x0);return _0x13d1ea=_0x2b3290[_0x31b1d5(0xb3f)]((_0x1abbea,_0x3dd56b)=>_0x1abbea+_0x3dd56b,_0x13d1ea),this['_cache'][_0x31b1d5(0x7d0)]=_0x13d1ea,this[_0x31b1d5(0x3f3)][_0x31b1d5(0x7d0)][_0x31b1d5(0x455)](0.01,0x1);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x2fb)]=Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0x3bf)],Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0x3bf)]=function(){const _0x1ead96=_0x5bbf40;VisuMZ[_0x1ead96(0x7d9)][_0x1ead96(0x2fb)][_0x1ead96(0x86a)](this),SceneManager[_0x1ead96(0x277)]()&&(this['requestMotion'](_0x1ead96(0x8b2)),this['_performDamageMotion']=undefined);},Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0xb3a)]=function(){const _0x1af0b7=_0x5bbf40;if(!SceneManager[_0x1af0b7(0x277)]())return null;if(!SceneManager[_0x1af0b7(0x2f2)]['_spriteset'])return null;return SceneManager[_0x1af0b7(0x2f2)][_0x1af0b7(0x3c3)][_0x1af0b7(0x8c8)](this);},Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0xaf2)]=function(){const _0x555a84=_0x5bbf40;return VisuMZ[_0x555a84(0x7d9)][_0x555a84(0x8be)][_0x555a84(0x9a5)][_0x555a84(0xb2f)];},Game_BattlerBase['prototype'][_0x5bbf40(0x501)]=function(){const _0x4c2201=_0x5bbf40;return VisuMZ['BattleCore']['Settings']['Actor'][_0x4c2201(0x68d)];},Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0x6e1)]=function(){const _0x5bdfaa=_0x5bbf40;return this['isActor']&&this['isActor']()?VisuMZ['BattleCore'][_0x5bdfaa(0x8be)][_0x5bdfaa(0x9a5)][_0x5bdfaa(0x9d2)]:VisuMZ[_0x5bdfaa(0x7d9)][_0x5bdfaa(0x8be)][_0x5bdfaa(0x51a)][_0x5bdfaa(0x9d2)];},Game_BattlerBase[_0x5bbf40(0x68c)]['battlerSmoothImage']=function(){return!![];},Game_BattlerBase['prototype']['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0xa2a)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0x5bbf40(0x43a)]=function(_0xdb4b0a){const _0xd647ec=_0x5bbf40;if(!_0xdb4b0a)return 0x0;let _0x123162=0x0;const _0x5e7362=_0xdb4b0a['note'];return _0x5e7362[_0xd647ec(0x24d)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x123162+=Number(RegExp['$1'])),_0x5e7362['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x123162+=Number(RegExp['$1'])),_0x123162;},Game_BattlerBase['prototype'][_0x5bbf40(0x500)]=function(_0x2df180){const _0x1cac81=_0x5bbf40;if(!_0x2df180)return 0x0;let _0x28f743=0x0;const _0x3c1ecd=_0x2df180[_0x1cac81(0x509)];return _0x3c1ecd['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x28f743+=Number(RegExp['$1'])),_0x3c1ecd['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x28f743+=Number(RegExp['$2'])),_0x28f743;},VisuMZ['BattleCore'][_0x5bbf40(0x8e8)]=Game_BattlerBase[_0x5bbf40(0x68c)]['isStateResist'],Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0x650)]=function(_0x5a9629){const _0x3f19a5=_0x5bbf40;if(_0x5a9629===this[_0x3f19a5(0x646)]()&&this[_0x3f19a5(0xacd)]())return!![];return VisuMZ['BattleCore'][_0x3f19a5(0x8e8)][_0x3f19a5(0x86a)](this,_0x5a9629);},Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0xacd)]=function(){const _0x33b0fe=_0x5bbf40;return this[_0x33b0fe(0x253)];},Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0xc19)]=function(_0x25c5a5){const _0x31e3ff=_0x5bbf40;_0x25c5a5?this['addImmortal']():this[_0x31e3ff(0x4e3)]();},Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0x711)]=function(){const _0x40709f=_0x5bbf40;if(this[_0x40709f(0x724)]())return;this[_0x40709f(0x253)]=!![],this[_0x40709f(0x8cf)]=![];},Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0x4e3)]=function(){const _0x5db9a5=_0x5bbf40,_0x30bcdb=this[_0x5db9a5(0x706)]();this[_0x5db9a5(0x253)]=![],_0x30bcdb&&this[_0x5db9a5(0x8cf)]&&this[_0x5db9a5(0x3bf)](),this[_0x5db9a5(0x8cf)]=![],this[_0x5db9a5(0x82f)](),this[_0x5db9a5(0x724)]()&&_0x30bcdb&&(this['performCollapse'](),this[_0x5db9a5(0x28e)]());},VisuMZ['BattleCore'][_0x5bbf40(0xb4c)]=Game_Action[_0x5bbf40(0x68c)]['numRepeats'],Game_Action['prototype'][_0x5bbf40(0x4c1)]=function(){const _0x4c0f7b=_0x5bbf40;return this[_0x4c0f7b(0x92e)]()?VisuMZ[_0x4c0f7b(0x7d9)]['Game_Action_numRepeats'][_0x4c0f7b(0x86a)](this):0x0;},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x560)]=Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x3dd)],Game_Action[_0x5bbf40(0x68c)][_0x5bbf40(0x3dd)]=function(){const _0x56a1af=_0x5bbf40;this[_0x56a1af(0x6e4)]()&&this[_0x56a1af(0x6e4)]()[_0x56a1af(0xa3f)]()?VisuMZ['BattleCore']['Game_Action_setAttack'][_0x56a1af(0x86a)](this):this['clear']();},VisuMZ['BattleCore'][_0x5bbf40(0x6d8)]=Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0xa3f)],Game_BattlerBase['prototype'][_0x5bbf40(0xa3f)]=function(){const _0x5084b2=_0x5bbf40;if(!this[_0x5084b2(0x602)]())return![];return VisuMZ['BattleCore'][_0x5084b2(0x6d8)]['call'](this);},Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0x602)]=function(){const _0x132617=_0x5bbf40;for(const _0x275629 of this[_0x132617(0x4c8)]()){if(!_0x275629)continue;if(_0x275629[_0x132617(0x509)][_0x132617(0x24d)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x70e)]=Game_Action['prototype']['setGuard'],Game_Action['prototype']['setGuard']=function(){const _0x2b554a=_0x5bbf40;this[_0x2b554a(0x6e4)]()[_0x2b554a(0x4d2)]()&&VisuMZ[_0x2b554a(0x7d9)][_0x2b554a(0x70e)][_0x2b554a(0x86a)](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xa6a)]=Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0x4d2)],Game_BattlerBase['prototype'][_0x5bbf40(0x4d2)]=function(){const _0x1d7cbd=_0x5bbf40;if(!this[_0x1d7cbd(0x404)]())return![];return VisuMZ[_0x1d7cbd(0x7d9)][_0x1d7cbd(0xa6a)][_0x1d7cbd(0x86a)](this);},Game_BattlerBase['prototype'][_0x5bbf40(0x404)]=function(){const _0x3bce16=_0x5bbf40;for(const _0x359faf of this[_0x3bce16(0x4c8)]()){if(!_0x359faf)continue;if(_0x359faf['note']['match'](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x5bbf40(0x68c)][_0x5bbf40(0x48f)]=function(){const _0x4b0b7e=_0x5bbf40;for(const _0x13e6a8 of this[_0x4b0b7e(0x4c8)]()){if(!_0x13e6a8)continue;if(_0x13e6a8['note'][_0x4b0b7e(0x24d)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x234)]=Game_BattlerBase[_0x5bbf40(0x68c)]['meetsUsableItemConditions'],Game_BattlerBase['prototype'][_0x5bbf40(0x52e)]=function(_0x1e3cb3){const _0x4bfdab=_0x5bbf40;if(_0x1e3cb3&&_0x1e3cb3['note'][_0x4bfdab(0x24d)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0xb60279=this['friendsUnit']()[_0x4bfdab(0xb48)]();if(_0xb60279[_0x4bfdab(0x348)]===0x1&&_0xb60279[0x0]===this)return![];}return VisuMZ[_0x4bfdab(0x7d9)][_0x4bfdab(0x234)][_0x4bfdab(0x86a)](this,_0x1e3cb3);},Game_Battler['prototype']['allowRandomSpeed']=function(){const _0x2c0642=_0x5bbf40;return VisuMZ[_0x2c0642(0x7d9)][_0x2c0642(0x8be)][_0x2c0642(0x815)][_0x2c0642(0xb73)];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x5f1)]=Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x785)],Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x785)]=function(){const _0x32bd9a=_0x5bbf40;if(SceneManager[_0x32bd9a(0x277)]()){if(BattleManager[_0x32bd9a(0x860)]()){}else{if($gameTroop[_0x32bd9a(0x258)]()<=0x0)return;}}if(SceneManager['isSceneBattle']()&&BattleManager[_0x32bd9a(0x860)]()&&this[_0x32bd9a(0x9a7)]===Graphics[_0x32bd9a(0x9a3)])return;this['_lastRegenFrameCount']=Graphics['frameCount'],SceneManager[_0x32bd9a(0x277)]()&&this['processBattleCoreJS'](_0x32bd9a(0x87c)),VisuMZ[_0x32bd9a(0x7d9)][_0x32bd9a(0x5f1)]['call'](this),SceneManager[_0x32bd9a(0x277)]()&&(this[_0x32bd9a(0x4ef)](),this['processBattleCoreJS'](_0x32bd9a(0x80b)));},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x4ef)]=function(){const _0x48607b=_0x5bbf40;if(SceneManager[_0x48607b(0x277)]())for(const _0x6469ee of this[_0x48607b(0x4c8)]()){if(!_0x6469ee)continue;this[_0x48607b(0xb6c)](_0x6469ee);}},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xb6c)]=function(_0x496df9){const _0x584854=_0x5bbf40;if(!Imported[_0x584854(0x25a)])return;if(!SceneManager[_0x584854(0x277)]())return;if(this['isDead']())return;if(this[_0x584854(0x847)]())return;if(_0x496df9[_0x584854(0x509)][_0x584854(0x24d)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x8edc61=Number(RegExp['$1']);$gameTemp[_0x584854(0xbc0)]([this],_0x8edc61,![],![]);}},VisuMZ['BattleCore'][_0x5bbf40(0x256)]=Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xbf9)],Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xbf9)]=function(){const _0x2833a6=_0x5bbf40;this['processBattleCoreJS']('PreStartTurnJS'),VisuMZ[_0x2833a6(0x7d9)][_0x2833a6(0x256)][_0x2833a6(0x86a)](this),this['processBattleCoreJS'](_0x2833a6(0xba0));},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xadd)]=Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x3f5)],Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x3f5)]=function(){const _0x485f45=_0x5bbf40;this[_0x485f45(0x95c)]('PreEndTurnJS'),VisuMZ[_0x485f45(0x7d9)][_0x485f45(0xadd)][_0x485f45(0x86a)](this),VisuMZ[_0x485f45(0x7d9)][_0x485f45(0x8be)][_0x485f45(0x815)]['SyncBuffExpire']&&this[_0x485f45(0x7a2)](),this[_0x485f45(0x95c)](_0x485f45(0x7e0));},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x95c)]=function(_0x16a392){const _0x5ee720=_0x5bbf40;if(this[_0x5ee720(0xb1c)]||this['_tempActor'])return;const _0x4a9205=VisuMZ[_0x5ee720(0x7d9)][_0x5ee720(0x8be)][_0x5ee720(0x815)];if(_0x4a9205[_0x16a392])_0x4a9205[_0x16a392][_0x5ee720(0x86a)](this);for(const _0x111ae8 of this[_0x5ee720(0x4c8)]()){if(!_0x111ae8)continue;key=VisuMZ[_0x5ee720(0x7d9)][_0x5ee720(0xa6b)](_0x111ae8,_0x16a392),VisuMZ[_0x5ee720(0x7d9)]['JS'][key]&&VisuMZ[_0x5ee720(0x7d9)]['JS'][key][_0x5ee720(0x86a)](this,this,this,_0x111ae8,0x0);}},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x79b)]=function(){const _0x5405b0=_0x5bbf40;return VisuMZ['BattleCore'][_0x5405b0(0x8be)][_0x5405b0(0x9a5)]['ChantStyle']||![];},Game_Battler[_0x5bbf40(0x68c)]['isChanting']=function(){const _0x1cc535=_0x5bbf40;if(this[_0x1cc535(0x4fc)]()){if(this[_0x1cc535(0x79b)]()){if(this[_0x1cc535(0x566)][_0x1cc535(0xb91)](_0x98cdae=>_0x98cdae[_0x1cc535(0x92e)]()&&_0x98cdae['isMagical']()))return!![];}else{if(this[_0x1cc535(0x566)][_0x1cc535(0xb91)](_0x28462e=>_0x28462e[_0x1cc535(0x92e)]()&&_0x28462e['isMagicSkill']()))return!![];}}if(BattleManager[_0x1cc535(0x860)]()&&this[_0x1cc535(0x8bd)]===_0x1cc535(0x3a1))return this[_0x1cc535(0x79b)]()?this[_0x1cc535(0x452)]()&&this['currentAction']()[_0x1cc535(0x92e)]()&&this[_0x1cc535(0x452)]()[_0x1cc535(0x504)]():this[_0x1cc535(0x452)]()&&this['currentAction']()[_0x1cc535(0x92e)]()&&this['currentAction']()[_0x1cc535(0x323)]();return![];},Game_Battler[_0x5bbf40(0x68c)]['isCharging']=function(){const _0x40ce38=_0x5bbf40;if(BattleManager[_0x40ce38(0x860)]()&&this[_0x40ce38(0x8bd)]==='casting')return this[_0x40ce38(0x79b)]()?this[_0x40ce38(0x452)]()&&this[_0x40ce38(0x452)]()[_0x40ce38(0x92e)]()&&!this[_0x40ce38(0x452)]()[_0x40ce38(0x504)]():this[_0x40ce38(0x452)]()&&this[_0x40ce38(0x452)]()[_0x40ce38(0x92e)]()&&!this[_0x40ce38(0x452)]()[_0x40ce38(0x323)]();return![];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x913)]=Game_Battler[_0x5bbf40(0x68c)]['clearDamagePopup'],Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x8d4)]=function(){const _0x4f8a01=_0x5bbf40;VisuMZ['BattleCore'][_0x4f8a01(0x913)][_0x4f8a01(0x86a)](this),this['_damagePopupArray']=[];},Game_Battler['prototype'][_0x5bbf40(0xaa9)]=function(){const _0x3ca4db=_0x5bbf40;if(!this['_damagePopupArray'])this[_0x3ca4db(0x8d4)]();return this[_0x3ca4db(0xab1)][_0x3ca4db(0x348)]>0x0;},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x965)]=function(){const _0x5f4c5a=_0x5bbf40;if(!SceneManager[_0x5f4c5a(0x277)]())return;if(BattleManager[_0x5f4c5a(0x824)]())return;if(!this['_damagePopupArray'])this[_0x5f4c5a(0x8d4)]();this[_0x5f4c5a(0x940)]();const _0xc7c580=this[_0x5f4c5a(0xb3a)]();if(_0xc7c580)_0xc7c580[_0x5f4c5a(0xa70)]();},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x940)]=function(){const _0x4798d6=_0x5bbf40,_0x4c1b9c=this[_0x4798d6(0xb82)]();if(_0x4c1b9c[_0x4798d6(0xa63)]||_0x4c1b9c[_0x4798d6(0x777)]){const _0x143852=JsonEx['makeDeepCopy'](_0x4c1b9c);_0x143852[_0x4798d6(0xa33)]=![],_0x143852['mpDamage']=0x0,this[_0x4798d6(0xab1)][_0x4798d6(0x9cb)](_0x143852);if(!_0x4c1b9c[_0x4798d6(0xb65)]&&!_0x4c1b9c[_0x4798d6(0xaff)])return;}if(_0x4c1b9c[_0x4798d6(0xa33)]){const _0x17e819=JsonEx[_0x4798d6(0xb4b)](_0x4c1b9c);_0x17e819['missed']=![],_0x17e819[_0x4798d6(0x777)]=![],_0x17e819['mpDamage']=0x0,this[_0x4798d6(0xab1)][_0x4798d6(0x9cb)](_0x17e819);}if(_0x4c1b9c[_0x4798d6(0xaff)]!==0x0){const _0x3edc0a=JsonEx[_0x4798d6(0xb4b)](_0x4c1b9c);_0x3edc0a['missed']=![],_0x3edc0a[_0x4798d6(0x777)]=![],_0x3edc0a[_0x4798d6(0xa33)]=![],this['_damagePopupArray'][_0x4798d6(0x9cb)](_0x3edc0a);}},Game_Battler['prototype'][_0x5bbf40(0x872)]=function(){const _0x50a898=_0x5bbf40;if(!this[_0x50a898(0xab1)])this['clearDamagePopup']();return VisuMZ[_0x50a898(0x7d9)][_0x50a898(0x8be)]['Damage']['NewPopupBottom']?this[_0x50a898(0xab1)][_0x50a898(0x780)]():this[_0x50a898(0xab1)][_0x50a898(0x474)]();},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x7b2)]=function(_0x587877,_0x2c2880){const _0x56fb19=_0x5bbf40;if(!SceneManager[_0x56fb19(0x277)]())return;if(BattleManager[_0x56fb19(0x824)]())return;if(!this['battler']())return;if(_0x587877[_0x56fb19(0x348)]<=0x0)return;_0x2c2880=_0x2c2880||{},_0x2c2880['textColor']=_0x2c2880[_0x56fb19(0x6b9)]||_0x56fb19(0x372),_0x2c2880[_0x56fb19(0x849)]=_0x2c2880['flashColor']||[0x0,0x0,0x0,0x0],_0x2c2880[_0x56fb19(0x9d1)]=_0x2c2880[_0x56fb19(0x9d1)]||0x0,this[_0x56fb19(0xb3a)]()['setupTextPopup'](_0x587877,_0x2c2880);},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xa3d)]=function(_0x385e8f,_0x5ec67c,_0x4d6c2b){const _0x5ee413=_0x5bbf40;if(!SceneManager[_0x5ee413(0x277)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x5ee413(0xb3a)]())return;if(_0x5ec67c[_0x5ee413(0x348)]<=0x0)return;_0x4d6c2b=_0x4d6c2b||{},_0x4d6c2b['textColor']=_0x4d6c2b[_0x5ee413(0x6b9)]||_0x5ee413(0x372),_0x4d6c2b[_0x5ee413(0x849)]=_0x4d6c2b[_0x5ee413(0x849)]||[0x0,0x0,0x0,0x0],_0x4d6c2b[_0x5ee413(0x9d1)]=_0x4d6c2b['flashDuration']||0x0,this[_0x5ee413(0xb3a)]()['setupIconTextPopup'](_0x385e8f,_0x5ec67c,_0x4d6c2b);},Game_Battler['prototype'][_0x5bbf40(0x44a)]=function(){const _0x17d017=_0x5bbf40;if(this[_0x17d017(0x847)]())return![];if(this[_0x17d017(0x706)]()&&this[_0x17d017(0x5b0)]())return!![];if(this[_0x17d017(0x37d)]()&&this[_0x17d017(0x37f)]()){if(this['isDead']()&&this[_0x17d017(0x4b3)]())return![];}else{if(this[_0x17d017(0x724)]())return![];}return!![];},VisuMZ['BattleCore'][_0x5bbf40(0x57b)]=Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xa16)],Game_Battler[_0x5bbf40(0x68c)]['clearMotion']=function(){const _0x574090=_0x5bbf40;VisuMZ[_0x574090(0x7d9)][_0x574090(0x57b)][_0x574090(0x86a)](this),this[_0x574090(0x9c7)]();},Game_Battler[_0x5bbf40(0x68c)]['canBattlerMove']=function(){return!![];},Game_Battler[_0x5bbf40(0x68c)]['isBattlerGrounded']=function(){return![];},VisuMZ['BattleCore'][_0x5bbf40(0x426)]=Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xaae)],Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xaae)]=function(_0x5a11d8){const _0x57c14f=_0x5bbf40;VisuMZ[_0x57c14f(0x7d9)][_0x57c14f(0x426)][_0x57c14f(0x86a)](this,_0x5a11d8),this[_0x57c14f(0x582)](_0x5a11d8),this[_0x57c14f(0x8d4)]();},Game_Battler[_0x5bbf40(0x68c)]['onBattleStartBattleCore']=function(_0x4ca75c){const _0x4b82f4=_0x5bbf40;this[_0x4b82f4(0x369)](![]),this[_0x4b82f4(0x868)]=undefined,this[_0x4b82f4(0x73b)]=undefined;},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xb78)]=Game_Battler['prototype'][_0x5bbf40(0xb4a)],Game_Battler[_0x5bbf40(0x68c)]['onBattleEnd']=function(){const _0x38cca5=_0x5bbf40;VisuMZ['BattleCore'][_0x38cca5(0xb78)]['call'](this),this[_0x38cca5(0x423)]();},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x423)]=function(){const _0x27d602=_0x5bbf40;this[_0x27d602(0x868)]=undefined,this[_0x27d602(0x73b)]=undefined;},VisuMZ[_0x5bbf40(0x7d9)]['Game_Battler_performActionStart']=Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x7c0)],Game_Battler['prototype'][_0x5bbf40(0x7c0)]=function(_0x2d6069){const _0x4a5843=_0x5bbf40;VisuMZ[_0x4a5843(0x7d9)][_0x4a5843(0x9d8)][_0x4a5843(0x86a)](this,_0x2d6069);if(!_0x2d6069['isGuard']()){const _0x337fe2=this[_0x4a5843(0xb3a)]();_0x337fe2&&_0x337fe2['stepForward']();}this[_0x4a5843(0x369)](![]);},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x9aa)]=function(){const _0x4df967=_0x5bbf40;this['_performDamageMotion']=undefined;const _0x8ec2e3=this[_0x4df967(0xb39)];this['_flinched']=![];if(BattleManager['isActiveTpb']()&&this[_0x4df967(0x818)]()){const _0x43b117=this[_0x4df967(0xb3a)]();if(_0x43b117&&_0x8ec2e3)_0x43b117[_0x4df967(0x3f0)]();return;}const _0x272ba8=this[_0x4df967(0xb3a)]();if(_0x272ba8)_0x272ba8[_0x4df967(0x916)]();this[_0x4df967(0x369)](![]),this['requestMotionRefresh']();},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xa93)]=function(_0x40aef4){const _0x4b9758=_0x5bbf40;if(_0x40aef4[_0x4b9758(0xa76)]())this[_0x4b9758(0xc10)]();else{if(_0x40aef4['isGuard']())this['requestMotion'](_0x4b9758(0x2c0));else{if(_0x40aef4[_0x4b9758(0x504)]())this[_0x4b9758(0x5e6)]('spell');else{if(_0x40aef4[_0x4b9758(0x812)]())[0x1,0x2,0x5,0x6][_0x4b9758(0x608)](_0x40aef4['item']()[_0x4b9758(0x9df)][_0x4b9758(0x769)])?this[_0x4b9758(0xc10)]():this['requestMotion']('skill');else _0x40aef4['isItem']()&&this[_0x4b9758(0x5e6)](_0x4b9758(0x92e));}}}},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x7de)]=function(){const _0x29fa4e=_0x5bbf40;return $dataSystem[_0x29fa4e(0x96d)][0x0];},Game_Battler['prototype'][_0x5bbf40(0x8b1)]=function(){const _0x1b77e0=_0x5bbf40,_0x52a5f4=this[_0x1b77e0(0x7de)]();return _0x52a5f4?_0x52a5f4['weaponImageId']:0x0;},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x91a)]=function(_0x9c3b6){const _0x343ec1=_0x5bbf40;if(!$gameSystem['isSideView']())return;const _0x57d1cc=this['battler'](),_0x5a208a=_0x9c3b6[_0x343ec1(0xb3a)]();if(!_0x57d1cc||!_0x5a208a)return;const _0x301610=_0x5a208a[_0x343ec1(0x72f)],_0x3d9eb9=_0x5a208a[_0x343ec1(0x4f3)];this['moveBattlerToPoint'](_0x301610,_0x3d9eb9,0x0,![],_0x343ec1(0x54c),-0x1),_0x57d1cc[_0x343ec1(0x390)]();const _0x15b53d=VisuMZ[_0x343ec1(0x7d9)][_0x343ec1(0x8be)][_0x343ec1(0x410)];let _0x3e1266=(_0x5a208a[_0x343ec1(0x2fc)]+_0x57d1cc[_0x343ec1(0x2fc)])/0x2;_0x3e1266*=this[_0x343ec1(0xa32)]()?0x1:-0x1;let _0x593024=_0x15b53d[_0x343ec1(0x6bd)]*(this[_0x343ec1(0xa32)]()?0x1:-0x1);_0x9c3b6['moveBattlerDistance'](_0x3e1266,_0x593024,0x0,![],_0x343ec1(0x54c)),_0x5a208a[_0x343ec1(0x390)]();},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x5e6)]=function(_0x353888){const _0x5b6dcf=_0x5bbf40;if(SceneManager['isSceneBattle']()){const _0x5d6cac=this[_0x5b6dcf(0xb3a)]();_0x5d6cac&&(_0x5d6cac[_0x5b6dcf(0xbe2)](_0x353888),['swing',_0x5b6dcf(0x4a0),'missile']['includes'](_0x353888)&&this[_0x5b6dcf(0x954)]());}this[_0x5b6dcf(0x9c7)]();},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x954)]=function(){},Game_Battler[_0x5bbf40(0x68c)]['startWeaponAnimation']=function(_0x33c214){const _0x3d3e0d=_0x5bbf40;if(SceneManager[_0x3d3e0d(0x277)]()){const _0x277d03=this[_0x3d3e0d(0xb3a)]();if(_0x277d03)_0x277d03['forceWeaponAnimation'](_0x33c214);}},Game_Battler[_0x5bbf40(0x68c)]['startAttackWeaponAnimation']=function(){const _0x1441d9=_0x5bbf40;if(SceneManager['isSceneBattle']()){const _0xebd185=this['getAttackWeaponAnimationId']();this[_0x1441d9(0x9ea)](_0xebd185);}},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x5b4)]=function(_0x15af96,_0x431f4f){const _0xf633f3=_0x5bbf40;if(!_0x15af96)return;if(!_0x15af96['item']())return;if(_0x15af96['isAttack']())return;if(_0x15af96['isGuard']())return;if(_0x15af96[_0xf633f3(0x962)]())return;if($gameTemp[_0xf633f3(0x2af)])return;let _0x4b0943=0x0;const _0xdf936b=VisuMZ[_0xf633f3(0x7d9)][_0xf633f3(0x8be)]['ActionSequence'],_0x3f2ce9=_0x15af96[_0xf633f3(0x92e)]()['note'];if(_0x3f2ce9[_0xf633f3(0x24d)](/<CAST ANIMATION: (\d+)>/i))_0x4b0943=Number(RegExp['$1']);else{if(_0x3f2ce9['match'](/<NO CAST ANIMATION>/i))return;else{if(_0x15af96['isCertainHit']())_0x4b0943=_0xdf936b[_0xf633f3(0x479)];else{if(_0x15af96[_0xf633f3(0x401)]())_0x4b0943=_0xdf936b[_0xf633f3(0xae6)];else _0x15af96[_0xf633f3(0x504)]()&&(_0x4b0943=_0xdf936b[_0xf633f3(0x7df)]);}}}_0x4b0943>0x0&&$gameTemp[_0xf633f3(0x7a4)]([this],_0x4b0943,!!_0x431f4f);},Game_Battler[_0x5bbf40(0x68c)]['performReflection']=function(){const _0x1b6c75=_0x5bbf40;SoundManager['playReflection']();let _0x54fea5=VisuMZ[_0x1b6c75(0x7d9)][_0x1b6c75(0x8be)][_0x1b6c75(0x410)][_0x1b6c75(0x5d4)];_0x54fea5>0x0&&(Imported[_0x1b6c75(0x25a)]?$gameTemp[_0x1b6c75(0xbc0)]([this],_0x54fea5):$gameTemp[_0x1b6c75(0x7a4)]([this],_0x54fea5));},Game_Battler['prototype'][_0x5bbf40(0xb70)]=function(){const _0x42488a=_0x5bbf40;if(!$gameSystem[_0x42488a(0xb7a)]())return![];if(!BattleManager[_0x42488a(0x41a)]())return![];if(!this[_0x42488a(0x706)]())return![];if(this['isInputting']())return!![];if(this[_0x42488a(0xb97)]())return!![];if(this[_0x42488a(0x35f)]>=0x1)return!![];return![];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x529)]=Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x819)],Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x819)]=function(){const _0xee2b9=_0x5bbf40;this[_0xee2b9(0xb70)]()&&(this['_performDamageMotion']=!![]),VisuMZ[_0xee2b9(0x7d9)]['Game_Battler_performDamage'][_0xee2b9(0x86a)](this),this['performFlinch'](),this[_0xee2b9(0x8e7)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x3ea)]=Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x50c)],Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x50c)]=function(){const _0x430ed8=_0x5bbf40;this[_0x430ed8(0xb70)]()&&(this[_0x430ed8(0x796)]=!![]),VisuMZ[_0x430ed8(0x7d9)][_0x430ed8(0x3ea)][_0x430ed8(0x86a)](this),this['performFlinch']();},VisuMZ['BattleCore']['Game_Battler_performEvasion']=Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x4ee)],Game_Battler[_0x5bbf40(0x68c)]['performEvasion']=function(){const _0x1ab1e0=_0x5bbf40;this[_0x1ab1e0(0xb70)]()&&(this[_0x1ab1e0(0x796)]=!![]),VisuMZ[_0x1ab1e0(0x7d9)]['Game_Battler_performEvasion']['call'](this),this[_0x1ab1e0(0xbd3)]();},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xbd3)]=function(){const _0x28a7c5=_0x5bbf40;if(!$gameSystem[_0x28a7c5(0xb7a)]())return;if(this[_0x28a7c5(0xb39)])return;this[_0x28a7c5(0xb39)]=!![];const _0x114cea=this[_0x28a7c5(0xb3a)]();if(_0x114cea)_0x114cea[_0x28a7c5(0x2b9)]();},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x8e7)]=function(){const _0x3b5955=_0x5bbf40;if(!this[_0x3b5955(0x841)]())return;const _0x4fe49c=VisuMZ['BattleCore'][_0x3b5955(0x8be)][_0x3b5955(0x9a5)];if(!(_0x4fe49c['ShakeFlinch']??![]))return;if(this[_0x3b5955(0x281)]<=0x0)return;const _0x373bb7=this[_0x3b5955(0xb3a)]();if(_0x373bb7){const _0x235c95=this['_lastHpDamage'],_0x236b55=(_0x235c95/this[_0x3b5955(0x719)])[_0x3b5955(0x455)](0.8,0x1),_0x33528f=_0x4fe49c[_0x3b5955(0x839)]??0x30,_0x2c9e6b=_0x236b55*_0x33528f;_0x373bb7['startShakeFlinch'](_0x2c9e6b,_0x236b55);}},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x28e)]=function(){const _0x2a9820=_0x5bbf40;if(this[_0x2a9820(0x724)]()&&this[_0x2a9820(0x20b)]!==_0x2a9820(0x8b2)){this[_0x2a9820(0x5e6)](_0x2a9820(0x8b2));return;}if(this[_0x2a9820(0x724)]()&&this[_0x2a9820(0x20b)]==='dead')return;if(!!this[_0x2a9820(0x3c5)])return;if(this[_0x2a9820(0x37d)]()){if(!this[_0x2a9820(0x56e)]()&&this!==BattleManager[_0x2a9820(0xb88)]){if(this[_0x2a9820(0xb3a)]())this['battler']()[_0x2a9820(0xb74)]();}this[_0x2a9820(0x9c7)]();return;}if(this[_0x2a9820(0x20b)]==='victory')return;if(this[_0x2a9820(0x20b)]===_0x2a9820(0x8f3)&&!BattleManager['isInputting']())return;if(this['_motionType']===_0x2a9820(0x2c0)&&!BattleManager['isInputting']())return;this[_0x2a9820(0xa16)]();if(BattleManager[_0x2a9820(0x41a)]()&&this===BattleManager[_0x2a9820(0xb88)])return;if(this[_0x2a9820(0xb3a)]()&&BattleManager[_0x2a9820(0x818)]()){this[_0x2a9820(0xb3a)]()[_0x2a9820(0xb74)](),this['clearFreezeMotion']();return;}this[_0x2a9820(0xb3a)]()&&BattleManager[_0x2a9820(0x41a)]()&&this!==BattleManager[_0x2a9820(0xb88)]&&this[_0x2a9820(0xb3a)]()['refreshMotion']();},Game_Enemy['prototype'][_0x5bbf40(0x56e)]=function(){const _0x57bf05=_0x5bbf40;if(!this[_0x57bf05(0x37f)]())return![];const _0x24dff2=this[_0x57bf05(0xb3a)]();if(!_0x24dff2)return![];const _0x1f836c=_0x24dff2[_0x57bf05(0xb25)];if(!_0x1f836c)return![];const _0xff9666=_0x1f836c[_0x57bf05(0xae0)];return _0xff9666&&!_0xff9666[_0x57bf05(0x3bd)];},Game_Battler[_0x5bbf40(0x68c)]['isBattlerFlipped']=function(){const _0xf0b58f=_0x5bbf40;return this[_0xf0b58f(0x53b)];},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x369)]=function(_0x490214){const _0x2052cb=_0x5bbf40;if(!$gameSystem['isSideView']())return;this[_0x2052cb(0x53b)]=_0x490214;const _0x594d50=this[_0x2052cb(0xb3a)]();if(_0x594d50)_0x594d50[_0x2052cb(0x618)]();},Game_Battler[_0x5bbf40(0x68c)]['setBattlerFacePoint']=function(_0x5f2f58,_0x3e7fa2,_0x3377a0){const _0x58a7dc=_0x5bbf40;if(!$gameSystem['isSideView']())return;const _0x430f26=this[_0x58a7dc(0xb3a)]();if(!_0x430f26)return;if(_0x5f2f58===_0x430f26[_0x58a7dc(0x72f)])return;let _0x511220=![];if(this[_0x58a7dc(0xa32)]()){if(_0x5f2f58>_0x430f26[_0x58a7dc(0x72f)])_0x511220=!![];if(_0x5f2f58<_0x430f26['_baseX'])_0x511220=![];}else{if(this[_0x58a7dc(0x37d)]()){if(_0x5f2f58>_0x430f26['_baseX'])_0x511220=![];if(_0x5f2f58<_0x430f26['_baseX'])_0x511220=!![];}};this[_0x58a7dc(0x369)](_0x3377a0?!_0x511220:_0x511220),_0x430f26['updateFlip']();},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xbc4)]=function(_0x4bc3c8,_0x3754b5,_0x37354c,_0x327b0c,_0x36c314){const _0x1663f4=_0x5bbf40;if(!$gameSystem[_0x1663f4(0xb7a)]())return;const _0x11332f=this[_0x1663f4(0xb3a)]();if(!_0x11332f)return;if(_0x327b0c)this[_0x1663f4(0x83c)](_0x4bc3c8+_0x11332f[_0x1663f4(0x72f)],_0x3754b5+_0x11332f['_baseY'],![]);_0x4bc3c8+=_0x11332f['_baseX']-_0x11332f[_0x1663f4(0x8f6)],_0x3754b5+=_0x11332f[_0x1663f4(0x4f3)]-_0x11332f['_homeY'],_0x11332f[_0x1663f4(0x2bf)](_0x4bc3c8,_0x3754b5,_0x37354c);if(Imported[_0x1663f4(0x25a)])_0x11332f[_0x1663f4(0xba9)](_0x36c314||_0x1663f4(0x54c));},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xb0c)]=function(_0x205213,_0x411dae,_0x561df1,_0x4af13f,_0x37d521,_0x4600e6){const _0x306e1f=_0x5bbf40;if(!$gameSystem['isSideView']())return;const _0x2c9c5a=this[_0x306e1f(0xb3a)]();if(!_0x2c9c5a)return;if(_0x205213===Infinity||_0x411dae===Infinity)return;if(isNaN(_0x205213)||isNaN(_0x411dae))return;_0x4600e6=_0x4600e6||0x0;if(_0x4600e6>0x0){if(_0x2c9c5a['_baseX']>_0x205213)_0x205213+=_0x2c9c5a[_0x306e1f(0x2fc)]/0x2+_0x4600e6;if(_0x2c9c5a[_0x306e1f(0x72f)]<_0x205213)_0x205213-=_0x2c9c5a[_0x306e1f(0x2fc)]/0x2+_0x4600e6;}if(_0x4af13f)this[_0x306e1f(0x83c)](_0x205213,_0x411dae,![]);_0x205213-=_0x2c9c5a[_0x306e1f(0x8f6)],_0x411dae-=_0x2c9c5a[_0x306e1f(0x54e)],_0x2c9c5a['startMove'](_0x205213,_0x411dae,_0x561df1);if(Imported[_0x306e1f(0x25a)])_0x2c9c5a['setMoveEasingType'](_0x37d521||_0x306e1f(0x54c));},Game_Battler[_0x5bbf40(0x68c)]['moveBattlerHomeDistance']=function(_0x3e15b8,_0x1ceb3d,_0x519256,_0x503928,_0x373c2){const _0x3a0916=_0x5bbf40;if(!$gameSystem[_0x3a0916(0xb7a)]())return;const _0x1d9d29=this[_0x3a0916(0xb3a)]();if(!_0x1d9d29)return;if(_0x503928)this['setBattlerFacePoint'](_0x3e15b8+_0x1d9d29[_0x3a0916(0x72f)],_0x1ceb3d+_0x1d9d29[_0x3a0916(0x4f3)],![]);_0x3e15b8+=_0x1d9d29['_homeX'],_0x1ceb3d+=_0x1d9d29[_0x3a0916(0x54e)],_0x1d9d29[_0x3a0916(0xa5a)](_0x3e15b8,_0x1ceb3d,_0x519256,_0x373c2),this['_forcedHomeX']=_0x3e15b8,this[_0x3a0916(0x73b)]=_0x1ceb3d;},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x93e)]=function(_0x4cb308,_0x9fcfa1,_0x580006,_0x3df5c4,_0x4231cd,_0x35fbac){const _0x26b03c=_0x5bbf40;if(!$gameSystem[_0x26b03c(0xb7a)]())return;const _0x42740f=this[_0x26b03c(0xb3a)]();if(!_0x42740f)return;_0x35fbac=_0x35fbac||0x0;if(_0x35fbac>0x0){if(_0x42740f[_0x26b03c(0x72f)]>_0x4cb308)_0x4cb308+=_0x42740f['width']/0x2+_0x35fbac;if(_0x42740f[_0x26b03c(0x72f)]<_0x4cb308)_0x4cb308-=_0x42740f[_0x26b03c(0x2fc)]/0x2+_0x35fbac;}if(_0x3df5c4)this[_0x26b03c(0x83c)](_0x4cb308,_0x9fcfa1,![]);_0x42740f[_0x26b03c(0xa5a)](_0x4cb308,_0x9fcfa1,_0x580006,_0x4231cd),this[_0x26b03c(0x868)]=_0x4cb308,this[_0x26b03c(0x73b)]=_0x9fcfa1;},Game_Battler['prototype'][_0x5bbf40(0x2dc)]=function(_0x3c3ebe,_0x2c5358,_0x231ab4){const _0x153b7d=_0x5bbf40;if(!$gameSystem[_0x153b7d(0xb7a)]())return;const _0x195842=this[_0x153b7d(0xb3a)]();if(!_0x195842)return;_0x195842[_0x153b7d(0x2d7)](_0x3c3ebe,_0x2c5358,_0x231ab4);},Game_Battler['prototype'][_0x5bbf40(0x4ca)]=function(_0x32956e,_0x586345){const _0xae49b8=_0x5bbf40;if(!$gameSystem[_0xae49b8(0xb7a)]())return;const _0x2e5c27=this[_0xae49b8(0xb3a)]();if(!_0x2e5c27)return;_0x2e5c27['startJump'](_0x32956e,_0x586345);},Game_Battler['prototype'][_0x5bbf40(0x9c3)]=function(_0x1131ee,_0x91987b,_0x16243a,_0x4c0319){const _0x44bdeb=_0x5bbf40;if(!$gameSystem['isSideView']())return;const _0x3a57df=this[_0x44bdeb(0xb3a)]();if(!_0x3a57df)return;_0x3a57df[_0x44bdeb(0x3a6)](_0x1131ee,_0x91987b,_0x16243a,_0x4c0319);},Game_Battler['prototype'][_0x5bbf40(0x82c)]=function(_0x50fbc5,_0x28021c,_0x2fb48f,_0xa95c5d){const _0x193a19=_0x5bbf40;if(!$gameSystem['isSideView']())return;const _0x441f56=this[_0x193a19(0xb3a)]();if(!_0x441f56)return;this[_0x193a19(0xa32)]()&&(_0x50fbc5*=-0x1,_0x28021c*=-0x1),_0x441f56[_0x193a19(0x9b7)](_0x50fbc5,_0x28021c,_0x2fb48f,_0xa95c5d);},Game_Battler[_0x5bbf40(0x68c)]['growBattler']=function(_0x2d5702,_0x5e10e,_0x174f7e,_0x4a52f3){const _0x1bf9be=_0x5bbf40;if(!$gameSystem[_0x1bf9be(0xb7a)]())return;const _0x3b5ee0=this[_0x1bf9be(0xb3a)]();if(!_0x3b5ee0)return;_0x3b5ee0['startGrow'](_0x2d5702,_0x5e10e,_0x174f7e,_0x4a52f3);},Game_Battler[_0x5bbf40(0x68c)]['changeBattlerOpacity']=function(_0x2595d8,_0x1c739e,_0x43fdc4){const _0x32bcfc=_0x5bbf40;if(!$gameSystem[_0x32bcfc(0xb7a)]())return;const _0x4de4a8=this[_0x32bcfc(0xb3a)]();if(!_0x4de4a8)return;_0x4de4a8[_0x32bcfc(0x7bc)](_0x2595d8,_0x1c739e,_0x43fdc4);},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x9c7)]=function(){const _0x515ea4=_0x5bbf40,_0x1fb19e=!!this[_0x515ea4(0x3c5)];this[_0x515ea4(0x3c5)]=undefined,_0x1fb19e&&(this[_0x515ea4(0x28e)](),this['clearFreezeMotionForWeapons']());},Game_Battler['prototype'][_0x5bbf40(0xba2)]=function(){const _0x57c464=_0x5bbf40;if(!SceneManager[_0x57c464(0x277)]())return;const _0x5f3384=this[_0x57c464(0xb3a)]();if(!_0x5f3384)return;let _0xe1d934=this[_0x57c464(0xa32)]()?_0x5f3384[_0x57c464(0x9ba)]:_0x5f3384['_svBattlerSprite']['_weaponSprite'];_0xe1d934&&_0xe1d934[_0x57c464(0x39b)](0x0);},Game_Battler[_0x5bbf40(0x68c)]['freezeMotion']=function(_0x28927b,_0x3bd635,_0x81db43){const _0x6611f0=_0x5bbf40;if(this[_0x6611f0(0x37d)]()&&!this['hasSvBattler']())return;let _0x29d164=0x0,_0xa60ceb=0x0;_0x28927b[_0x6611f0(0x24d)](/ATTACK[ ](\d+)/i)&&(_0xa60ceb=Number(RegExp['$1']),_0xa60ceb--);if(this[_0x6611f0(0xa32)]()){const _0x374ee8=this['weapons']();_0x29d164=_0x374ee8[_0xa60ceb]?_0x374ee8[_0xa60ceb][_0x6611f0(0x6aa)]:0x0;}else this['isEnemy']()&&(_0x29d164=this[_0x6611f0(0x325)]()[_0x6611f0(0x6aa)]||0x0);const _0x5deb71=$dataSystem['attackMotions'][_0x29d164];_0x28927b['match'](/attack/i)&&(_0x28927b=[_0x6611f0(0x4a0),_0x6611f0(0x539),_0x6611f0(0x5db)][_0x5deb71['type']]||_0x6611f0(0x539)),this[_0x6611f0(0x3c5)]={'motionType':_0x28927b,'weaponImageId':_0x3bd635?_0x5deb71[_0x6611f0(0xa5b)]:0x0,'pattern':_0x81db43};},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x9fe)]=function(_0x4d446c){const _0x38778f=_0x5bbf40;if(!_0x4d446c)return![];return _0x4d446c['friendsUnit']()===this[_0x38778f(0x24f)]();},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x791)]=function(_0xfaf772){const _0x95165c=_0x5bbf40;if(!_0xfaf772)return![];return _0xfaf772[_0x95165c(0x578)]()===this['friendsUnit']();},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xac7)]=function(){return![];},Game_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0xac7)]=function(){const _0x2123b8=_0x5bbf40;return this[_0x2123b8(0xa96)]()[_0x2123b8(0x24d)](/\$/i);},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0xac7)]=function(){const _0x162888=_0x5bbf40;return this[_0x162888(0x37f)]()&&this[_0x162888(0x6fd)]()[_0x162888(0x24d)](/\$/i);},VisuMZ[_0x5bbf40(0x7d9)]['Game_Actor_setup']=Game_Actor[_0x5bbf40(0x68c)]['setup'],Game_Actor[_0x5bbf40(0x68c)]['setup']=function(_0x22b941){const _0x142326=_0x5bbf40;VisuMZ[_0x142326(0x7d9)][_0x142326(0x592)][_0x142326(0x86a)](this,_0x22b941),this[_0x142326(0xa1c)]();},Game_Actor[_0x5bbf40(0x68c)]['initBattlePortrait']=function(){const _0xdcdf3b=_0x5bbf40;this['_battlePortrait']='',this['actor']()&&this[_0xdcdf3b(0x297)]()[_0xdcdf3b(0x509)][_0xdcdf3b(0x24d)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=String(RegExp['$1']));},Game_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0xb5c)]=function(){const _0x2dcee5=_0x5bbf40;if(this[_0x2dcee5(0xc18)]()!=='')return this[_0x2dcee5(0xc18)]();else{if(Imported['VisuMZ_1_MainMenuCore']&&this[_0x2dcee5(0x37b)]()!=='')return this[_0x2dcee5(0x37b)]();}return'';},Game_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0xc18)]=function(){const _0x717b0f=_0x5bbf40;if(this[_0x717b0f(0x343)]===undefined)this[_0x717b0f(0xa1c)]();return this[_0x717b0f(0x343)];},Game_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0xb6e)]=function(_0x45c807){const _0x5e8a1f=_0x5bbf40;if(this[_0x5e8a1f(0x343)]===undefined)this['initBattlePortrait']();this[_0x5e8a1f(0x343)]=_0x45c807;if(SceneManager[_0x5e8a1f(0x277)]()&&$gameParty[_0x5e8a1f(0xbc7)]()[_0x5e8a1f(0x608)](this)){const _0x5dc00e=SceneManager['_scene'][_0x5e8a1f(0x861)];_0x5dc00e&&_0x5dc00e[_0x5e8a1f(0x62b)](this);}},Game_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x94e)]=function(){return!![];},Game_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x980)]=function(){const _0x3ae6f3=_0x5bbf40;if(!this[_0x3ae6f3(0xa1f)]()&&BattleManager['_autoBattle'])return!![];return Game_Battler[_0x3ae6f3(0x68c)][_0x3ae6f3(0x980)][_0x3ae6f3(0x86a)](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x42d)]=Game_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x687)],Game_Actor['prototype']['makeActionList']=function(){const _0x138bec=_0x5bbf40;if(BattleManager[_0x138bec(0x614)]&&!ConfigManager[_0x138bec(0x643)])return this[_0x138bec(0x439)]();else{return VisuMZ[_0x138bec(0x7d9)][_0x138bec(0x42d)][_0x138bec(0x86a)](this);;}},Game_Actor['prototype'][_0x5bbf40(0x439)]=function(){const _0xa9110b=_0x5bbf40,_0x198807=[],_0x1be9f5=new Game_Action(this);return _0x1be9f5[_0xa9110b(0x3dd)](),_0x198807[_0xa9110b(0x9cb)](_0x1be9f5),_0x198807;},Game_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x202)]=function(){const _0x1fdfba=_0x5bbf40;return this[_0x1fdfba(0x3d8)]()[_0x1fdfba(0x509)][_0x1fdfba(0x24d)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])['split'](/[\r\n]+/):VisuMZ[_0x1fdfba(0x7d9)]['Settings'][_0x1fdfba(0xbb9)][_0x1fdfba(0x45b)];},Game_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0xaf2)]=function(){const _0x4c69b3=_0x5bbf40;if(this['_cache'][_0x4c69b3(0x463)]!==undefined)return this[_0x4c69b3(0x3f3)]['svAnchorX'];return this[_0x4c69b3(0x297)]()['note'][_0x4c69b3(0x24d)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x4c69b3(0x3f3)][_0x4c69b3(0x463)]=eval(RegExp['$1']),this[_0x4c69b3(0x3f3)]['svAnchorY']=eval(RegExp['$2'])):this[_0x4c69b3(0x3f3)][_0x4c69b3(0x463)]=Game_Battler['prototype'][_0x4c69b3(0xaf2)][_0x4c69b3(0x86a)](this),this['_cache']['svAnchorX'];},Game_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x501)]=function(){const _0x1f90c2=_0x5bbf40;if(this['_cache'][_0x1f90c2(0x5e2)]!==undefined)return this[_0x1f90c2(0x3f3)]['svAnchorY'];return this[_0x1f90c2(0x297)]()[_0x1f90c2(0x509)][_0x1f90c2(0x24d)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache']['svAnchorX']=eval(RegExp['$1']),this[_0x1f90c2(0x3f3)][_0x1f90c2(0x5e2)]=eval(RegExp['$2'])):this[_0x1f90c2(0x3f3)][_0x1f90c2(0x5e2)]=Game_Battler['prototype'][_0x1f90c2(0x501)][_0x1f90c2(0x86a)](this),this[_0x1f90c2(0x3f3)][_0x1f90c2(0x5e2)];},Game_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x6e1)]=function(){const _0x8a24e8=_0x5bbf40;if(this[_0x8a24e8(0x3f3)][_0x8a24e8(0x902)]!==undefined)return this[_0x8a24e8(0x3f3)]['svShadow'];if(this[_0x8a24e8(0x297)]()[_0x8a24e8(0x509)][_0x8a24e8(0x24d)](/<SIDEVIEW SHOW SHADOW>/i))this['_cache'][_0x8a24e8(0x902)]=!![];else this[_0x8a24e8(0x297)]()['note']['match'](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x8a24e8(0x3f3)][_0x8a24e8(0x902)]=![]:this[_0x8a24e8(0x3f3)][_0x8a24e8(0x902)]=Game_Battler[_0x8a24e8(0x68c)][_0x8a24e8(0x6e1)][_0x8a24e8(0x86a)](this);return this[_0x8a24e8(0x3f3)]['svShadow'];},Game_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x5c1)]=function(){const _0xd800bd=_0x5bbf40;return VisuMZ[_0xd800bd(0x7d9)][_0xd800bd(0x8be)][_0xd800bd(0x9a5)][_0xd800bd(0x753)];},Game_Actor['prototype']['performWeaponAnimation']=function(){const _0x2e6066=_0x5bbf40,_0x54c65d=this['weapons'](),_0x4614c5=_0x54c65d[0x0]?_0x54c65d[0x0]['wtypeId']:0x0,_0x465694=$dataSystem['attackMotions'][_0x4614c5];_0x465694&&this[_0x2e6066(0x9ea)](_0x465694[_0x2e6066(0xa5b)]);},Game_Actor['prototype'][_0x5bbf40(0xa7a)]=function(_0x50f484){const _0x22a551=_0x5bbf40;Game_Battler[_0x22a551(0x68c)][_0x22a551(0xa7a)][_0x22a551(0x86a)](this,_0x50f484),this[_0x22a551(0xa93)](_0x50f484);},Game_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x7de)]=function(){const _0x379638=_0x5bbf40,_0x290170=this[_0x379638(0x836)](),_0x5b2f5f=_0x290170[0x0]?_0x290170[0x0][_0x379638(0x6aa)]:0x0;return $dataSystem[_0x379638(0x96d)][_0x5b2f5f];},Game_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x910)]=function(_0x17107a){const _0x1d347d=_0x5bbf40;_0x17107a=_0x17107a||0x1,_0x17107a--;const _0x1a0746=this[_0x1d347d(0x836)]();return _0x1a0746[_0x17107a]?_0x1a0746[_0x17107a]['animationId']:0x0;},Game_Actor[_0x5bbf40(0x68c)]['getAttackMotionSlot']=function(_0x465a57){const _0x59ec9e=_0x5bbf40;_0x465a57=_0x465a57||0x1,_0x465a57--;const _0x505172=this[_0x59ec9e(0x836)](),_0x258218=_0x505172[_0x465a57]?_0x505172[_0x465a57]['wtypeId']:0x0;return $dataSystem['attackMotions'][_0x258218];},Game_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0xb85)]=function(_0x141b7d){const _0xfc5960=_0x5bbf40;_0x141b7d=_0x141b7d||0x1,_0x141b7d--;const _0x36e897=this[_0xfc5960(0x836)](),_0x1e7d69=_0x36e897[_0x141b7d]?_0x36e897[_0x141b7d][_0xfc5960(0x6aa)]:0x0,_0x40bb0c=$dataSystem[_0xfc5960(0x96d)][_0x1e7d69];if(_0x40bb0c){if(_0x40bb0c[_0xfc5960(0x769)]===0x0)this[_0xfc5960(0x5e6)](_0xfc5960(0x4a0));else{if(_0x40bb0c[_0xfc5960(0x769)]===0x1)this[_0xfc5960(0x5e6)]('swing');else _0x40bb0c['type']===0x2&&this[_0xfc5960(0x5e6)](_0xfc5960(0x5db));}this[_0xfc5960(0x9ea)](_0x40bb0c['weaponImageId']);}},Game_Battler['prototype'][_0x5bbf40(0x5f2)]=function(_0x3f89bb){const _0x9ceb48=_0x5bbf40;if(this[_0x9ceb48(0xa32)]()){const _0x4e6419=this[_0x9ceb48(0x836)]();if(_0x4e6419[_0x9ceb48(0x348)]>0x0){const _0x3c6777=_0x4e6419[_0x3f89bb];if(_0x3c6777)_0x3f89bb=this[_0x9ceb48(0x7f7)]()[_0x9ceb48(0x5c9)](_0x3c6777);}}this[_0x9ceb48(0x537)]=_0x3f89bb||0x0,this[_0x9ceb48(0x3f3)]={};},Game_Battler['prototype'][_0x5bbf40(0x63d)]=function(){const _0x254490=_0x5bbf40;this[_0x254490(0x537)]=this[_0x254490(0x537)]||0x0,this['_activeWeaponSlot']++,this[_0x254490(0x3f3)]={};},Game_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x242)]=function(){const _0x252064=_0x5bbf40;this[_0x252064(0x537)]=undefined,this['_cache']={};},VisuMZ['BattleCore'][_0x5bbf40(0xc00)]=Game_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x7f7)],Game_Actor[_0x5bbf40(0x68c)]['equips']=function(){const _0x4a27e6=_0x5bbf40;let _0x356b62=VisuMZ[_0x4a27e6(0x7d9)][_0x4a27e6(0xc00)][_0x4a27e6(0x86a)](this);if(this[_0x4a27e6(0x345)])return _0x356b62;if(this[_0x4a27e6(0x537)]!==undefined){this['_tempEquipCheck']=!![];const _0x2217ea=this[_0x4a27e6(0x4c3)]();for(let _0x29f38e=0x0;_0x29f38e<_0x2217ea[_0x4a27e6(0x348)];_0x29f38e++){_0x2217ea[_0x29f38e]===0x1&&this[_0x4a27e6(0x537)]!==_0x29f38e&&(_0x356b62[_0x29f38e]=null);}this[_0x4a27e6(0x345)]=undefined;}return _0x356b62;},Window_BattleLog['prototype'][_0x5bbf40(0x4d9)]=function(_0x316ec7){const _0x341fa2=_0x5bbf40;return _0x316ec7[_0x341fa2(0xa32)]()?_0x316ec7[_0x341fa2(0x836)]()[_0x341fa2(0x348)]||0x1:0x1;},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xb86)]=function(_0x288499,_0x3983fc){const _0x595dc7=_0x5bbf40;_0x288499&&_0x288499[_0x595dc7(0xa32)]()&&_0x288499[_0x595dc7(0x5f2)](_0x3983fc),this['callNextMethod']();},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xa4e)]=function(_0x15db67){const _0x27fba3=_0x5bbf40;_0x15db67&&_0x15db67[_0x27fba3(0xa32)]()&&_0x15db67[_0x27fba3(0x242)](),this[_0x27fba3(0x6c0)]();},Game_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0xb00)]=function(){const _0x4c4f2e=_0x5bbf40;let _0xcd50c1='battleUIOffsetX';if(this[_0x4c4f2e(0x513)](_0xcd50c1))return this[_0x4c4f2e(0x3f3)][_0xcd50c1];return this[_0x4c4f2e(0x3f3)][_0xcd50c1]=this[_0x4c4f2e(0x43a)](this[_0x4c4f2e(0x297)]()),this[_0x4c4f2e(0x3f3)][_0xcd50c1];},Game_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0xa2a)]=function(){const _0x33df2a=_0x5bbf40;let _0x556db5=_0x33df2a(0xa2a);if(this[_0x33df2a(0x513)](_0x556db5))return this[_0x33df2a(0x3f3)][_0x556db5];return this['_cache'][_0x556db5]=this[_0x33df2a(0x500)](this[_0x33df2a(0x297)]()),this[_0x33df2a(0x3f3)][_0x556db5];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x3df)]=Game_Enemy['prototype'][_0x5bbf40(0x39b)],Game_Enemy[_0x5bbf40(0x68c)]['setup']=function(_0x3dd23d,_0x30dc9c,_0x47a87d){const _0x285938=_0x5bbf40;_0x3dd23d=DataManager[_0x285938(0xbeb)](_0x3dd23d),VisuMZ[_0x285938(0x7d9)][_0x285938(0x3df)][_0x285938(0x86a)](this,_0x3dd23d,_0x30dc9c,_0x47a87d),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x285938(0x446)](),this[_0x285938(0x76f)](),this[_0x285938(0xbd5)](),Imported['VisuMZ_1_ElementStatusCore']&&this['recoverAll']();},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x76f)]=function(){const _0x491a01=_0x5bbf40,_0x5c13b4=VisuMZ['BattleCore'][_0x491a01(0x8be)][_0x491a01(0x51a)];this[_0x491a01(0xc09)]=_0x5c13b4[_0x491a01(0x22f)],this[_0x491a01(0x5c0)]={},this['resetNameTempVisibility']();},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0xbd5)]=function(){const _0x301a29=_0x5bbf40,_0x336d3b=VisuMZ[_0x301a29(0x7d9)][_0x301a29(0x8be)][_0x301a29(0x51a)],_0x645f4d=this[_0x301a29(0x7f8)]()['note'];this[_0x301a29(0x5c0)]={'name':'','wtypeId':_0x336d3b[_0x301a29(0x374)],'collapse':_0x336d3b[_0x301a29(0xa82)],'motionIdle':_0x336d3b[_0x301a29(0xa18)],'width':_0x336d3b['Width']||0x40,'height':_0x336d3b['Height']||0x40,'anchorX':_0x336d3b[_0x301a29(0xb2f)]||0x0,'anchorY':_0x336d3b[_0x301a29(0x68d)]||0x0,'shadow':_0x336d3b[_0x301a29(0x9d2)]};_0x645f4d['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x301a29(0xc09)]=Number(RegExp['$1']));const _0x4499e1=this[_0x301a29(0x5c0)];if(_0x645f4d['match'](/<SIDEVIEW BATTLER: (.*)>/i))_0x4499e1[_0x301a29(0x4e5)]=String(RegExp['$1']);else{if(_0x645f4d[_0x301a29(0x24d)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0xee496d=String(RegExp['$1'])[_0x301a29(0x728)](/[\r\n]+/)[_0x301a29(0x94f)]('');_0x4499e1[_0x301a29(0x4e5)]=DataManager[_0x301a29(0x42e)](_0xee496d);}}_0x645f4d[_0x301a29(0x24d)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x4499e1[_0x301a29(0x661)]=eval(RegExp['$1']),_0x4499e1[_0x301a29(0x38c)]=eval(RegExp['$2']));if(_0x645f4d[_0x301a29(0x24d)](/<SIDEVIEW COLLAPSE>/i))_0x4499e1['collapse']=!![];else _0x645f4d['match'](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x4499e1['collapse']=![]);if(_0x645f4d['match'](/<SIDEVIEW SHOW SHADOW>/i))_0x4499e1[_0x301a29(0xbe0)]=!![];else _0x645f4d[_0x301a29(0x24d)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x4499e1[_0x301a29(0xbe0)]=![]);if(_0x645f4d[_0x301a29(0x24d)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x4499e1[_0x301a29(0xb40)]=String(RegExp['$1'])[_0x301a29(0x993)]()['trim']();else{if(_0x645f4d['match'](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x31590e=String(RegExp['$1'])['split'](/[\r\n]+/)['remove']('');_0x4499e1['motionIdle']=DataManager[_0x301a29(0x42e)](_0x31590e);}}_0x645f4d[_0x301a29(0x24d)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x4499e1[_0x301a29(0x2fc)]=Number(RegExp['$1']),_0x4499e1[_0x301a29(0x570)]=Number(RegExp['$2']));if(_0x645f4d[_0x301a29(0x24d)](/<SIDEVIEW WEAPON: (.*)>/i))_0x4499e1[_0x301a29(0x6aa)]=DataManager[_0x301a29(0x230)](RegExp['$1']);else{if(_0x645f4d[_0x301a29(0x24d)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x25d52e=String(RegExp['$1'])['split'](/[\r\n]+/)['remove'](''),_0x427cf7=DataManager[_0x301a29(0x42e)](_0x25d52e);_0x4499e1[_0x301a29(0x6aa)]=DataManager[_0x301a29(0x230)](_0x427cf7);}}if(Imported[_0x301a29(0x3cf)]){const _0x3e0df3=this[_0x301a29(0x79a)]();for(const _0x595993 of _0x3e0df3){const _0xa92415=this[_0x301a29(0x5fd)](_0x595993)[_0x301a29(0x2fd)][_0x301a29(0x6ca)]()['trim'](),_0x5b578e=_0x595993[_0x301a29(0x6ca)]()[_0x301a29(0x86c)]();if(_0x645f4d[_0x301a29(0x24d)](VisuMZ[_0x301a29(0x686)][_0x301a29(0x44e)]['SvBattlerSolo-%1-%2'['format'](_0x5b578e,_0xa92415)]))_0x4499e1['name']=String(RegExp['$1']);else{if(_0x645f4d['match'](VisuMZ[_0x301a29(0x686)][_0x301a29(0x44e)][_0x301a29(0xa22)[_0x301a29(0x7c2)](_0x5b578e,_0xa92415)])){const _0x243b34=String(RegExp['$1'])[_0x301a29(0x728)](/[\r\n]+/)['remove']('');_0x4499e1[_0x301a29(0x4e5)]=DataManager['processRandomizedData'](_0x243b34);}}if(_0x645f4d[_0x301a29(0x24d)](VisuMZ[_0x301a29(0x686)][_0x301a29(0x44e)][_0x301a29(0xa7f)[_0x301a29(0x7c2)](_0x5b578e,_0xa92415)]))_0x4499e1[_0x301a29(0x6aa)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x645f4d[_0x301a29(0x24d)](VisuMZ['ElementStatusCore']['RegExp'][_0x301a29(0x364)['format'](_0x5b578e,_0xa92415)])){const _0xdbe42c=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x301a29(0x94f)](''),_0x336836=DataManager[_0x301a29(0x42e)](_0xdbe42c);_0x4499e1[_0x301a29(0x6aa)]=DataManager[_0x301a29(0x230)](_0x336836);}}if(_0x645f4d[_0x301a29(0x24d)](VisuMZ['ElementStatusCore'][_0x301a29(0x44e)][_0x301a29(0x953)[_0x301a29(0x7c2)](_0x5b578e,_0xa92415)]))_0x4499e1[_0x301a29(0xb40)]=String(RegExp['$1'])[_0x301a29(0x993)]()[_0x301a29(0x86c)]();else{if(_0x645f4d['match'](VisuMZ[_0x301a29(0x686)][_0x301a29(0x44e)]['SvMotionIdleMass-%1-%2'[_0x301a29(0x7c2)](_0x5b578e,_0xa92415)])){const _0x5a05e1=String(RegExp['$1'])[_0x301a29(0x728)](/[\r\n]+/)['remove']('');_0x4499e1['motionIdle']=DataManager[_0x301a29(0x42e)](_0x5a05e1);}}}}},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x352)]=function(){const _0x42e0b3=_0x5bbf40;return this[_0x42e0b3(0xc09)]||0x0;},Game_Enemy[_0x5bbf40(0x68c)]['attackAnimationId2']=function(){const _0x10dc0b=_0x5bbf40;return this[_0x10dc0b(0x352)]();},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x910)]=function(_0x5a8f08){const _0x2c5ada=_0x5bbf40;return this[_0x2c5ada(0x352)]();},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x841)]=function(){const _0x1324c9=_0x5bbf40;if(this['enemy']()[_0x1324c9(0x509)][_0x1324c9(0x24d)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x1324c9(0x68c)][_0x1324c9(0x841)][_0x1324c9(0x86a)](this);},Game_Enemy['prototype'][_0x5bbf40(0x4a6)]=function(){const _0x3c438a=_0x5bbf40;if(this[_0x3c438a(0x7f8)]()[_0x3c438a(0x509)][_0x3c438a(0x24d)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x5bbf40(0x68c)]['skills']=function(){const _0x2c1992=_0x5bbf40,_0x2730dd=[];for(const _0x41454d of this[_0x2c1992(0x7f8)]()['actions']){const _0x1e33c8=$dataSkills[_0x41454d[_0x2c1992(0xbd2)]];if(_0x1e33c8&&!_0x2730dd[_0x2c1992(0x608)](_0x1e33c8))_0x2730dd[_0x2c1992(0x9cb)](_0x1e33c8);}return _0x2730dd;},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0xb00)]=function(){const _0x5611c8=_0x5bbf40;let _0x58fa58='battleUIOffsetX';if(this[_0x5611c8(0x513)](_0x58fa58))return this[_0x5611c8(0x3f3)][_0x58fa58];return this[_0x5611c8(0x3f3)][_0x58fa58]=this[_0x5611c8(0x43a)](this[_0x5611c8(0x7f8)]()),this[_0x5611c8(0x3f3)][_0x58fa58];},Game_Enemy[_0x5bbf40(0x68c)]['battleUIOffsetY']=function(){const _0x39cad2=_0x5bbf40;let _0x5e1708='battleUIOffsetY';if(this[_0x39cad2(0x513)](_0x5e1708))return this['_cache'][_0x5e1708];return this[_0x39cad2(0x3f3)][_0x5e1708]=this[_0x39cad2(0x500)](this[_0x39cad2(0x7f8)]()),this[_0x39cad2(0x3f3)][_0x5e1708];},Game_Enemy[_0x5bbf40(0x68c)]['svBattlerData']=function(){const _0x32b266=_0x5bbf40;if(this[_0x32b266(0x5c0)]!==undefined)return this[_0x32b266(0x5c0)];return this[_0x32b266(0xbd5)](),this[_0x32b266(0x5c0)];},Game_Enemy[_0x5bbf40(0x68c)]['hasSvBattler']=function(){const _0x4d3864=_0x5bbf40;return this[_0x4d3864(0x325)]()[_0x4d3864(0x4e5)]!=='';},Game_Enemy[_0x5bbf40(0x68c)]['svBattlerName']=function(){const _0x10969d=_0x5bbf40;return this[_0x10969d(0x325)]()[_0x10969d(0x4e5)];},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x5c1)]=function(){const _0x421f41=_0x5bbf40;return this['hasSvBattler']()?VisuMZ[_0x421f41(0x7d9)][_0x421f41(0x8be)]['Actor']['SmoothImage']:VisuMZ[_0x421f41(0x7d9)][_0x421f41(0x8be)]['Enemy'][_0x421f41(0x753)];},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0xa7a)]=function(_0xce7c23){const _0xcfbc84=_0x5bbf40;Game_Battler[_0xcfbc84(0x68c)]['performAction'][_0xcfbc84(0x86a)](this,_0xce7c23);if(this[_0xcfbc84(0x37f)]())this[_0xcfbc84(0xa93)](_0xce7c23);},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0xc10)]=function(){const _0x5b46f0=_0x5bbf40,_0x44d448=this['svBattlerData']()[_0x5b46f0(0x6aa)]||0x0,_0x18a0b6=$dataSystem[_0x5b46f0(0x96d)][_0x44d448];if(_0x18a0b6){if(_0x18a0b6[_0x5b46f0(0x769)]===0x0)this[_0x5b46f0(0x5e6)](_0x5b46f0(0x4a0));else{if(_0x18a0b6[_0x5b46f0(0x769)]===0x1)this[_0x5b46f0(0x5e6)]('swing');else _0x18a0b6[_0x5b46f0(0x769)]===0x2&&this['requestMotion'](_0x5b46f0(0x5db));}}},Game_Enemy[_0x5bbf40(0x68c)]['performWeaponAnimation']=function(){const _0x15c4f2=_0x5bbf40,_0x2c64b9=this[_0x15c4f2(0x325)]()[_0x15c4f2(0x6aa)]||0x0,_0x5dc028=$dataSystem[_0x15c4f2(0x96d)][_0x2c64b9];_0x5dc028&&this[_0x15c4f2(0x9ea)](_0x5dc028[_0x15c4f2(0xa5b)]);},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x7de)]=function(){const _0x2329b9=_0x5bbf40,_0x4f16ca=this['svBattlerData']()[_0x2329b9(0x6aa)]||0x0;return $dataSystem[_0x2329b9(0x96d)][_0x4f16ca];},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x2e1)]=function(_0x3dd049){const _0x15bd29=_0x5bbf40;return this[_0x15bd29(0x7de)]();},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x819)]=function(){const _0x2bc9a5=_0x5bbf40;Game_Battler[_0x2bc9a5(0x68c)][_0x2bc9a5(0x819)][_0x2bc9a5(0x86a)](this),this[_0x2bc9a5(0x94e)]()&&this[_0x2bc9a5(0x37f)]()&&this[_0x2bc9a5(0x5e6)](_0x2bc9a5(0x9df)),SoundManager[_0x2bc9a5(0x6fb)]();},Game_Enemy['prototype'][_0x5bbf40(0x4ee)]=function(){const _0x348811=_0x5bbf40;Game_Battler[_0x348811(0x68c)]['performEvasion']['call'](this),this[_0x348811(0x5e6)](_0x348811(0x201));},Game_Enemy['prototype'][_0x5bbf40(0x45a)]=function(){const _0x2beaab=_0x5bbf40;Game_Battler['prototype'][_0x2beaab(0x45a)][_0x2beaab(0x86a)](this),this['requestMotion'](_0x2beaab(0x201));},Game_Enemy['prototype'][_0x5bbf40(0x411)]=function(){const _0x5e8485=_0x5bbf40;Game_Battler[_0x5e8485(0x68c)][_0x5e8485(0x411)][_0x5e8485(0x86a)](this),this[_0x5e8485(0xc10)]();},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x4b3)]=function(){const _0x52ac18=_0x5bbf40;if(this[_0x52ac18(0x37f)]()){if(this[_0x52ac18(0x5dc)]()>=0x1)return!![];return this['svBattlerData']()[_0x52ac18(0xa99)];}else return!![];},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0xaf2)]=function(){const _0x3655f8=_0x5bbf40;return this[_0x3655f8(0x325)]()[_0x3655f8(0x661)];},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x501)]=function(){const _0x2aa28b=_0x5bbf40;return this[_0x2aa28b(0x325)]()[_0x2aa28b(0x38c)];},Game_Enemy[_0x5bbf40(0x68c)]['svBattlerShadowVisible']=function(){const _0x24fd31=_0x5bbf40;return this[_0x24fd31(0x325)]()[_0x24fd31(0xbe0)];},VisuMZ['BattleCore']['Game_Enemy_transform']=Game_Enemy['prototype']['transform'],Game_Enemy[_0x5bbf40(0x68c)]['transform']=function(_0x539470){const _0x24b560=_0x5bbf40;VisuMZ[_0x24b560(0x7d9)]['Game_Enemy_transform'][_0x24b560(0x86a)](this,_0x539470),this[_0x24b560(0x76f)](),this[_0x24b560(0xbd5)]();const _0x3d36a0=this[_0x24b560(0xb3a)]();_0x3d36a0&&(_0x3d36a0[_0x24b560(0xa58)]=undefined,_0x3d36a0[_0x24b560(0x286)](this));},Game_Enemy[_0x5bbf40(0x68c)]['resetNameTempVisibility']=function(){const _0x23734c=_0x5bbf40,_0x3936b3=VisuMZ[_0x23734c(0x7d9)]['Settings'][_0x23734c(0x51a)];this['_nameTempVisibleDuration']=_0x3936b3[_0x23734c(0x2f1)]??0x0;},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x903)]=function(){const _0x14597f=_0x5bbf40;return this['_nameTempVisibleDuration']&&this[_0x14597f(0xb59)]>0x0;},Game_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0xc14)]=function(){const _0x52885e=_0x5bbf40;this[_0x52885e(0xb59)]&&this[_0x52885e(0xb59)]>0x0&&this[_0x52885e(0xb59)]--;},Game_Enemy['prototype'][_0x5bbf40(0xbaf)]=function(){this['_nameTempVisibleDuration']=0x0;},Game_Unit['prototype'][_0x5bbf40(0x95c)]=function(_0x57322b){const _0x120612=_0x5bbf40;for(const _0x5e1d79 of this[_0x120612(0x319)]()){if(_0x5e1d79)_0x5e1d79[_0x120612(0x95c)](_0x57322b);}},Game_Unit[_0x5bbf40(0x68c)]['trueRandomTarget']=function(){const _0xac8a3a=_0x5bbf40,_0x5ea68b=this[_0xac8a3a(0xb48)]();return _0x5ea68b[Math[_0xac8a3a(0xac8)](_0x5ea68b[_0xac8a3a(0x348)])];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x2eb)]=Game_Party[_0x5bbf40(0x68c)][_0x5bbf40(0x821)],Game_Party[_0x5bbf40(0x68c)][_0x5bbf40(0x821)]=function(_0x4a2fd3){const _0x48ff16=_0x5bbf40;VisuMZ[_0x48ff16(0x7d9)][_0x48ff16(0x2eb)][_0x48ff16(0x86a)](this,_0x4a2fd3),BattleManager[_0x48ff16(0x3b9)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x5a1)]=Game_Party['prototype'][_0x5bbf40(0x5af)],Game_Party['prototype'][_0x5bbf40(0x5af)]=function(_0x44d37f){const _0x39a424=_0x5bbf40;VisuMZ[_0x39a424(0x7d9)][_0x39a424(0x5a1)]['call'](this,_0x44d37f),BattleManager[_0x39a424(0x3b9)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x367)]=Game_Troop[_0x5bbf40(0x68c)][_0x5bbf40(0x39b)],Game_Troop['prototype']['setup']=function(_0xe6a616){const _0x5b1f18=_0x5bbf40;$gameTemp[_0x5b1f18(0x66c)](),$gameTemp[_0x5b1f18(0x67e)](_0xe6a616),VisuMZ[_0x5b1f18(0x7d9)][_0x5b1f18(0x367)]['call'](this,_0xe6a616),this[_0x5b1f18(0x652)]();},VisuMZ['BattleCore']['Game_Troop_expTotal']=Game_Troop[_0x5bbf40(0x68c)][_0x5bbf40(0x986)],Game_Troop[_0x5bbf40(0x68c)]['expTotal']=function(){const _0x5ed36c=_0x5bbf40;let _0x374a89=VisuMZ[_0x5ed36c(0x7d9)][_0x5ed36c(0x7c8)][_0x5ed36c(0x86a)](this);return this[_0x5ed36c(0x4f9)]&&(_0x374a89*=this[_0x5ed36c(0x4f9)]()),Math['ceil'](_0x374a89);},Game_Troop[_0x5bbf40(0x68c)][_0x5bbf40(0x4f9)]=function(){return 0x1;},Game_Troop[_0x5bbf40(0x68c)][_0x5bbf40(0x652)]=function(){const _0x1a4992=_0x5bbf40,_0x57095b=DataManager[_0x1a4992(0x6c9)](this[_0x1a4992(0x941)]()['id']);if(_0x57095b[_0x1a4992(0x24d)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x2b4581=RegExp['$1']['split'](',')[_0x1a4992(0x6d6)](_0x3a939c=>Number(_0x3a939c));this[_0x1a4992(0x232)](),this[_0x1a4992(0x3cb)](_0x2b4581);}},Game_Troop[_0x5bbf40(0x68c)][_0x5bbf40(0x232)]=function(){const _0x5a4429=_0x5bbf40;let _0x1d33ff=_0x5a4429(0xaeb)+'\x0a';_0x1d33ff+=_0x5a4429(0x78b),Imported[_0x5a4429(0x7f1)]&&(VisuMZ[_0x5a4429(0xa9f)][_0x5a4429(0x77e)]<1.11&&(alert(_0x1d33ff[_0x5a4429(0x7c2)](_0x5a4429(0x87b))),SceneManager['exit']())),Imported[_0x5a4429(0x65e)]&&(VisuMZ['BattleSystemCTB'][_0x5a4429(0x77e)]<1.19&&(alert(_0x1d33ff[_0x5a4429(0x7c2)](_0x5a4429(0x394))),SceneManager[_0x5a4429(0x593)]())),Imported[_0x5a4429(0x4dc)]&&(VisuMZ[_0x5a4429(0x6f0)][_0x5a4429(0x77e)]<1.15&&(alert(_0x1d33ff[_0x5a4429(0x7c2)](_0x5a4429(0x7eb))),SceneManager['exit']()));},Game_Troop[_0x5bbf40(0x68c)][_0x5bbf40(0x3cb)]=function(_0xdbc37c){const _0x269cd2=_0x5bbf40;this[_0x269cd2(0x497)]={};for(const _0x19fbef of this[_0x269cd2(0x319)]()){if(!_0x19fbef)continue;_0x19fbef[_0x269cd2(0x976)]('');}for(const _0x451eb4 of _0xdbc37c){const _0x26e472=$dataTroops[_0x451eb4];if(_0x26e472)this['addExtendedTroopMembers'](_0x26e472);}this[_0x269cd2(0xb44)]();},Game_Troop[_0x5bbf40(0x68c)][_0x5bbf40(0x80e)]=function(_0x3c24b4){const _0x5d3566=_0x5bbf40;for(const _0x28f2e7 of _0x3c24b4[_0x5d3566(0x319)]){if($dataEnemies[_0x28f2e7[_0x5d3566(0x7dc)]]){const _0x4dcd58=_0x28f2e7['enemyId'],_0x41039c=_0x28f2e7['x'],_0x11c64a=_0x28f2e7['y'],_0x35bb54=new Game_Enemy(_0x4dcd58,_0x41039c,_0x11c64a);_0x28f2e7[_0x5d3566(0x522)]&&_0x35bb54[_0x5d3566(0x428)](),this[_0x5d3566(0x8ce)][_0x5d3566(0x9cb)](_0x35bb54);}}},VisuMZ[_0x5bbf40(0x7d9)]['Game_Map_setupBattleback']=Game_Map[_0x5bbf40(0x68c)][_0x5bbf40(0x899)],Game_Map[_0x5bbf40(0x68c)][_0x5bbf40(0x899)]=function(){const _0x131fa1=_0x5bbf40;VisuMZ['BattleCore'][_0x131fa1(0x341)][_0x131fa1(0x86a)](this),this['setupBattlebackBattleCore']();},Game_Map[_0x5bbf40(0x68c)]['setupBattlebackBattleCore']=function(){const _0x5cd5cc=_0x5bbf40;this['_regionBattleback1']={},this[_0x5cd5cc(0x716)]={};if(!$dataMap)return;const _0x36a826=$dataMap[_0x5cd5cc(0x509)];if(!_0x36a826)return;const _0x16ecb7=_0x36a826[_0x5cd5cc(0x24d)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x16ecb7)for(const _0x397206 of _0x16ecb7){_0x397206['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x19e95e=Number(RegExp['$1']),_0x2ad55f=Number(RegExp['$2']),_0x4889b2=_0x2ad55f===0x1?this[_0x5cd5cc(0x219)]:this[_0x5cd5cc(0x716)],_0x43f500=String(RegExp['$3']);_0x4889b2[_0x19e95e]=_0x43f500;}},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x4b1)]=Game_Map[_0x5bbf40(0x68c)][_0x5bbf40(0x5fb)],Game_Map['prototype'][_0x5bbf40(0x5fb)]=function(){const _0x53fe6b=_0x5bbf40;if(!BattleManager[_0x53fe6b(0xc01)]()){const _0x403c49=$gamePlayer[_0x53fe6b(0x46a)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x53fe6b(0x219)]&&this[_0x53fe6b(0x219)][_0x403c49])return this[_0x53fe6b(0x219)][_0x403c49];}return VisuMZ[_0x53fe6b(0x7d9)]['Game_Map_battleback1Name'][_0x53fe6b(0x86a)](this);},VisuMZ['BattleCore']['Game_Map_battleback2Name']=Game_Map[_0x5bbf40(0x68c)][_0x5bbf40(0xa37)],Game_Map[_0x5bbf40(0x68c)][_0x5bbf40(0xa37)]=function(){const _0x318428=_0x5bbf40;if(!BattleManager[_0x318428(0xc01)]()){const _0x17e613=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x318428(0x219)]&&this[_0x318428(0x716)][_0x17e613])return this['_regionBattleback2'][_0x17e613];}return VisuMZ['BattleCore'][_0x318428(0x63e)][_0x318428(0x86a)](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xb5a)]=Game_Map[_0x5bbf40(0x68c)][_0x5bbf40(0xb50)],Game_Map[_0x5bbf40(0x68c)][_0x5bbf40(0xb50)]=function(){const _0x7dbf4e=_0x5bbf40;let _0x1b4ddd=JsonEx[_0x7dbf4e(0xb4b)](VisuMZ[_0x7dbf4e(0x7d9)][_0x7dbf4e(0xb5a)][_0x7dbf4e(0x86a)](this));return VisuMZ[_0x7dbf4e(0x7d9)]['ShuffleArray'](_0x1b4ddd);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x51d)]=function(_0x2ac4f5){const _0x565fc0=_0x5bbf40;var _0x2f6a09,_0x22e4b3,_0x51ed05;for(_0x51ed05=_0x2ac4f5['length']-0x1;_0x51ed05>0x0;_0x51ed05--){_0x2f6a09=Math[_0x565fc0(0x9d6)](Math[_0x565fc0(0x2ff)]()*(_0x51ed05+0x1)),_0x22e4b3=_0x2ac4f5[_0x51ed05],_0x2ac4f5[_0x51ed05]=_0x2ac4f5[_0x2f6a09],_0x2ac4f5[_0x2f6a09]=_0x22e4b3;}return _0x2ac4f5;},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x7ba)]=Game_Interpreter['prototype'][_0x5bbf40(0x498)],Game_Interpreter[_0x5bbf40(0x68c)][_0x5bbf40(0x498)]=function(_0x65ab5a){const _0x9b2749=_0x5bbf40;return $gameTemp[_0x9b2749(0x8d3)](this),VisuMZ[_0x9b2749(0x7d9)][_0x9b2749(0x7ba)]['call'](this,_0x65ab5a);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x2a0)]=Game_Interpreter['prototype'][_0x5bbf40(0x607)],Game_Interpreter[_0x5bbf40(0x68c)][_0x5bbf40(0x607)]=function(){const _0x54e1d0=_0x5bbf40;if(SceneManager[_0x54e1d0(0x277)]())switch(this[_0x54e1d0(0x554)]){case'battleAngle':if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x54e1d0(0x66e)]()[_0x54e1d0(0x6e2)]>0x0)return!![];this[_0x54e1d0(0x554)]='';}break;case _0x54e1d0(0x36d):if(BattleManager[_0x54e1d0(0x3c3)]['isAnimationPlaying']())return!![];this['_waitMode']='';break;case _0x54e1d0(0x4db):if(BattleManager['_spriteset'][_0x54e1d0(0x98c)]())return!![];this[_0x54e1d0(0x554)]='';break;case _0x54e1d0(0x5b9):if(Imported[_0x54e1d0(0x846)]){if($gameScreen['battleCameraData']()['cameraDuration']>0x0)return!![];if($gameScreen[_0x54e1d0(0x66e)]()[_0x54e1d0(0x50e)]>0x0)return!![];this['_waitMode']='';}break;case'battleEffect':if(BattleManager['_spriteset']['isEffecting']())return!![];this['_waitMode']='';break;case _0x54e1d0(0x5a9):if(BattleManager['_spriteset'][_0x54e1d0(0x33c)]())return!![];this[_0x54e1d0(0x554)]='';break;case'battleJump':if(BattleManager[_0x54e1d0(0x3c3)][_0x54e1d0(0xb02)]())return!![];this['_waitMode']='';break;case _0x54e1d0(0xb41):if(BattleManager[_0x54e1d0(0x9e4)][_0x54e1d0(0x8ed)]())return!![];this[_0x54e1d0(0x554)]='';break;case'battleMove':if(BattleManager[_0x54e1d0(0x3c3)][_0x54e1d0(0x6d5)]())return!![];this[_0x54e1d0(0x554)]='';break;case _0x54e1d0(0x51c):if(BattleManager[_0x54e1d0(0x3c3)]['isAnyoneChangingOpacity']())return!![];this[_0x54e1d0(0x554)]='';break;case _0x54e1d0(0x263):if(BattleManager[_0x54e1d0(0x3c3)][_0x54e1d0(0x75d)]())return!![];this['_waitMode']='';break;case _0x54e1d0(0xa38):if(BattleManager['_spriteset'][_0x54e1d0(0x50b)]())return!![];this['_waitMode']='';break;case _0x54e1d0(0x542):if(Imported[_0x54e1d0(0x350)]){if(BattleManager['_spriteset']['isAnyProjectilePresent']())return!![];this['_waitMode']='';}break;case _0x54e1d0(0x35b):if(Imported[_0x54e1d0(0x846)]){if($gameScreen[_0x54e1d0(0x66e)]()['skewDuration']>0x0)return!![];this['_waitMode']='';}break;case _0x54e1d0(0x24c):if(BattleManager[_0x54e1d0(0x3c3)]['isAnyoneSpinning']())return!![];this['_waitMode']='';break;case _0x54e1d0(0xc03):if(Imported[_0x54e1d0(0x846)]){if($gameScreen[_0x54e1d0(0x66e)]()[_0x54e1d0(0x64a)]>0x0)return!![];this[_0x54e1d0(0x554)]='';}break;case _0x54e1d0(0x505):if(Imported['VisuMZ_3_ActSeqImpact']){if(BattleManager['_spriteset']['isAnyoneInjectAniPrepping']){if(BattleManager[_0x54e1d0(0x3c3)][_0x54e1d0(0x538)]())return!![];this[_0x54e1d0(0x554)]=_0x54e1d0(0x683);}else this[_0x54e1d0(0x554)]='';break;}break;case _0x54e1d0(0x683):if(Imported[_0x54e1d0(0x8a8)]){if(BattleManager['_spriteset'][_0x54e1d0(0x9af)]())return!![];this[_0x54e1d0(0x554)]='';}break;}return VisuMZ['BattleCore'][_0x54e1d0(0x2a0)]['call'](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xac3)]=Game_Interpreter[_0x5bbf40(0x68c)][_0x5bbf40(0x7ee)],Game_Interpreter[_0x5bbf40(0x68c)][_0x5bbf40(0x7ee)]=function(_0x1b101f){const _0x31f653=_0x5bbf40;return!$gameParty[_0x31f653(0x670)]()?this[_0x31f653(0xbd0)](_0x1b101f):VisuMZ[_0x31f653(0x7d9)][_0x31f653(0xac3)][_0x31f653(0x86a)](this,_0x1b101f);},Game_Interpreter[_0x5bbf40(0x68c)][_0x5bbf40(0x3a5)]=function(_0x241113){const _0x3ba392=_0x5bbf40;return VisuMZ[_0x3ba392(0x7d9)][_0x3ba392(0xac3)]['call'](this,_0x241113),BattleManager[_0x3ba392(0x461)](_0x242753=>{const _0x1a678f=_0x3ba392;this[_0x1a678f(0x54a)][this[_0x1a678f(0x932)]]=_0x242753;}),!![];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x381)]=function(_0x1783e7){const _0x43cdb4=_0x5bbf40,_0x4f5bb1=$dataCommonEvents[_0x1783e7];if(!_0x4f5bb1)return![];if(_0x4f5bb1[_0x43cdb4(0x62f)]['length']<=0x1)return![];return!![];},Game_Interpreter['prototype'][_0x5bbf40(0xbd0)]=function(_0x4096e1){const _0x1d60c2=_0x5bbf40,_0x2590f8=VisuMZ[_0x1d60c2(0x7d9)][_0x1d60c2(0x8be)][_0x1d60c2(0x815)],_0x321991=_0x2590f8['BattleStartEvent'],_0x42e774=$dataCommonEvents[_0x321991];if(_0x42e774&&VisuMZ[_0x1d60c2(0x7d9)][_0x1d60c2(0x381)](_0x321991)){const _0x55bd76=this[_0x1d60c2(0x82a)]()?this['_eventId']:0x0,_0x366421=_0x42e774[_0x1d60c2(0x62f)];this['setupChild'](_0x366421,_0x55bd76),this[_0x1d60c2(0x528)]=JsonEx['makeDeepCopy'](this[_0x1d60c2(0x528)]);const _0x5c816f={'code':0xbc3,'indent':this[_0x1d60c2(0x932)],'parameters':JsonEx[_0x1d60c2(0xb4b)](_0x4096e1)};return this['_list'][_0x1d60c2(0xb3c)](this[_0x1d60c2(0x433)]+0x1,0x0,_0x5c816f),!![];}else return VisuMZ['BattleCore'][_0x1d60c2(0xac3)][_0x1d60c2(0x86a)](this,_0x4096e1);},VisuMZ['BattleCore'][_0x5bbf40(0x3c4)]=BattleManager[_0x5bbf40(0x1fa)],BattleManager['onEncounter']=function(){const _0x518745=_0x5bbf40;VisuMZ[_0x518745(0x7d9)]['BattleManager_onEncounter'][_0x518745(0x86a)](this),this['onEncounterBattleCore']();},BattleManager[_0x5bbf40(0x265)]=function(){const _0x2f9cf3=_0x5bbf40,_0x3f92b6=VisuMZ[_0x2f9cf3(0x7d9)]['Settings'][_0x2f9cf3(0x815)],_0x193074=_0x3f92b6['BattleStartEvent'];_0x193074&&VisuMZ[_0x2f9cf3(0x7d9)]['CheckMapBattleEventValid'](_0x193074)&&(this[_0x2f9cf3(0x491)]=!![],$gameTemp['reserveCommonEvent'](_0x3f92b6[_0x2f9cf3(0x9de)]),$gameMap[_0x2f9cf3(0x7ed)](),$gameMap['_interpreter'][_0x2f9cf3(0xbd6)]=!![]),_0x3f92b6['DefeatEvent']>0x0&&(this[_0x2f9cf3(0xaec)]=!![]);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x712)]=Scene_Map['prototype'][_0x5bbf40(0x503)],Scene_Map[_0x5bbf40(0x68c)][_0x5bbf40(0x503)]=function(){const _0x4b1ab1=_0x5bbf40;if(BattleManager['_battleCoreBattleStartEvent'])return;VisuMZ[_0x4b1ab1(0x7d9)]['Scene_Map_updateCallMenu']['call'](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x211)]=Scene_Map[_0x5bbf40(0x68c)][_0x5bbf40(0x317)],Scene_Map[_0x5bbf40(0x68c)][_0x5bbf40(0x317)]=function(){const _0x1fad56=_0x5bbf40;BattleManager[_0x1fad56(0x491)]?this[_0x1fad56(0x50a)]():VisuMZ['BattleCore']['Scene_Map_launchBattle']['call'](this);},Scene_Map[_0x5bbf40(0x68c)][_0x5bbf40(0x50a)]=function(){this['_active']=!![];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x703)]=SceneManager['isSceneChanging'],SceneManager[_0x5bbf40(0x9b9)]=function(){const _0x5baaf1=_0x5bbf40;if(BattleManager['_battleCoreBattleStartEvent'])return![];return VisuMZ[_0x5baaf1(0x7d9)][_0x5baaf1(0x703)]['call'](this);},VisuMZ[_0x5bbf40(0x7d9)]['Game_Interpreter_terminate']=Game_Interpreter['prototype'][_0x5bbf40(0x779)],Game_Interpreter[_0x5bbf40(0x68c)][_0x5bbf40(0x779)]=function(){const _0x27830e=_0x5bbf40;VisuMZ[_0x27830e(0x7d9)][_0x27830e(0x663)]['call'](this),this['_preBattleCommonEvent']&&(this['_preBattleCommonEvent']=undefined,SceneManager[_0x27830e(0x2f2)]['battleCoreResumeLaunchBattle']());},Scene_Map[_0x5bbf40(0x68c)][_0x5bbf40(0x236)]=function(){const _0x3bf905=_0x5bbf40;BattleManager[_0x3bf905(0x491)]=undefined,BattleManager[_0x3bf905(0x9da)]=!![],this[_0x3bf905(0x997)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x84a)]=Scene_Map['prototype'][_0x5bbf40(0x3bb)],Scene_Map['prototype'][_0x5bbf40(0x3bb)]=function(){const _0x51825e=_0x5bbf40;VisuMZ[_0x51825e(0x7d9)][_0x51825e(0x84a)][_0x51825e(0x86a)](this),BattleManager[_0x51825e(0x9da)]&&(this[_0x51825e(0xbdd)]=!![],BattleManager[_0x51825e(0x9da)]=undefined);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x436)]=Scene_Map[_0x5bbf40(0x68c)][_0x5bbf40(0x3bb)],Scene_Map[_0x5bbf40(0x68c)]['initialize']=function(){const _0x2841f3=_0x5bbf40;VisuMZ[_0x2841f3(0x7d9)][_0x2841f3(0x436)][_0x2841f3(0x86a)](this),$gameTemp[_0x2841f3(0x66c)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x5f3)]=Scene_ItemBase[_0x5bbf40(0x68c)][_0x5bbf40(0x961)],Scene_ItemBase[_0x5bbf40(0x68c)][_0x5bbf40(0x961)]=function(){const _0x8932f8=_0x5bbf40;VisuMZ[_0x8932f8(0x7d9)][_0x8932f8(0x5f3)][_0x8932f8(0x86a)](this);if(this[_0x8932f8(0x92e)]()['note'][_0x8932f8(0x24d)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x8932f8(0x92e)]()[_0x8932f8(0x509)][_0x8932f8(0x24d)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x8932f8(0x382)]=[]),DataManager['checkAutoCustomActionSequenceNotetagEffect'](this[_0x8932f8(0x92e)]())&&($gameTemp[_0x8932f8(0x382)]=[]);},VisuMZ['BattleCore'][_0x5bbf40(0x23d)]=Scene_Options[_0x5bbf40(0x68c)]['maxCommands'],Scene_Options[_0x5bbf40(0x68c)][_0x5bbf40(0xa8f)]=function(){const _0x55ca99=_0x5bbf40;let _0x451dcb=VisuMZ[_0x55ca99(0x7d9)][_0x55ca99(0x23d)][_0x55ca99(0x86a)](this);const _0x51c986=VisuMZ[_0x55ca99(0x7d9)][_0x55ca99(0x8be)];if(_0x51c986[_0x55ca99(0x51e)][_0x55ca99(0x852)]&&_0x51c986[_0x55ca99(0x51e)][_0x55ca99(0x510)])_0x451dcb+=0x2;if(_0x51c986[_0x55ca99(0x430)][_0x55ca99(0x852)]&&_0x51c986[_0x55ca99(0x430)][_0x55ca99(0x510)])_0x451dcb+=0x1;return _0x451dcb;},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xad0)]=Scene_Battle[_0x5bbf40(0x68c)]['initialize'],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x3bb)]=function(){const _0x17db6b=_0x5bbf40;VisuMZ['BattleCore']['Scene_Battle_initialize']['call'](this),this[_0x17db6b(0x357)]();},VisuMZ['BattleCore'][_0x5bbf40(0xb76)]=Scene_Battle['prototype'][_0x5bbf40(0x213)],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x213)]=function(){const _0xa54db=_0x5bbf40;SceneManager[_0xa54db(0x735)]()?(Scene_Message[_0xa54db(0x68c)]['start'][_0xa54db(0x86a)](this),this[_0xa54db(0x3c3)]&&this[_0xa54db(0x3c3)][_0xa54db(0x69a)](),BattleManager[_0xa54db(0x1ee)]&&BattleManager['revertTpbCachedActor']()):(VisuMZ[_0xa54db(0x7d9)][_0xa54db(0xb76)]['call'](this),$gameTroop[_0xa54db(0x4b7)]());},VisuMZ['BattleCore'][_0x5bbf40(0x5f0)]=Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x997)],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x997)]=function(){const _0x57e09d=_0x5bbf40;SceneManager[_0x57e09d(0x518)]()?Scene_Message[_0x57e09d(0x68c)]['stop'][_0x57e09d(0x86a)](this):VisuMZ[_0x57e09d(0x7d9)]['Scene_Battle_stop']['call'](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x9e6)]=Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x779)],Scene_Battle[_0x5bbf40(0x68c)]['terminate']=function(){const _0x52dc6b=_0x5bbf40;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message[_0x52dc6b(0x68c)]['terminate']['call'](this):VisuMZ[_0x52dc6b(0x7d9)]['Scene_Battle_terminate'][_0x52dc6b(0x86a)](this),$gameTemp[_0x52dc6b(0x7b7)](),this['clearOnceParallelInterpreters']();},Scene_Battle[_0x5bbf40(0x68c)]['isRightInputMode']=function(){const _0x42a275=_0x5bbf40;if(ConfigManager[_0x42a275(0x887)]&&ConfigManager[_0x42a275(0x204)]!==undefined)return ConfigManager['uiInputPosition'];else{if(this[_0x42a275(0x6e0)]()===_0x42a275(0x7e8))return![];else{return Scene_Message[_0x42a275(0x68c)][_0x42a275(0xc0c)]['call'](this);;}}},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x655)]=Scene_Battle['prototype']['createAllWindows'],Scene_Battle['prototype']['createAllWindows']=function(){const _0x4b68e1=_0x5bbf40;this[_0x4b68e1(0x261)](),VisuMZ[_0x4b68e1(0x7d9)]['Scene_Battle_createAllWindows'][_0x4b68e1(0x86a)](this),this[_0x4b68e1(0x24a)]();},VisuMZ[_0x5bbf40(0x7d9)]['Scene_Battle_createEnemyWindow']=Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0xa52)],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0xa52)]=function(){const _0x2135dc=_0x5bbf40;VisuMZ[_0x2135dc(0x7d9)]['Scene_Battle_createEnemyWindow']['call'](this),this['createMultiTargetWindows']();},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x32e)]=function(){const _0x4ea69d=_0x5bbf40;this[_0x4ea69d(0x627)](!![]),this[_0x4ea69d(0x627)](![]);},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x39c)]=function(_0x403a96){const _0x2bd38f=_0x5bbf40,_0x59b16e=Window_BattleMultiTarget[_0x2bd38f(0x9e5)],_0x20145a=this['calcWindowHeight'](0x1,!![]);let _0x42b8b2=_0x403a96?Graphics['boxWidth']-_0x59b16e:0x0;_0x42b8b2+=_0x403a96?Window_BattleMultiTarget[_0x2bd38f(0x6f8)]:Window_BattleMultiTarget[_0x2bd38f(0x97c)];const _0x11e735=['frontview_ui']['includes'](this[_0x2bd38f(0x6e0)]())?0x0:this['_statusWindow'][_0x2bd38f(0x570)];let _0x302c67=Graphics[_0x2bd38f(0xa4b)]-_0x11e735-_0x20145a;return _0x302c67+=_0x403a96?Window_BattleMultiTarget[_0x2bd38f(0x207)]:Window_BattleMultiTarget['ENEMY_OFFSET_Y'],new Rectangle(_0x42b8b2,_0x302c67,_0x59b16e,_0x20145a);},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x627)]=function(_0x15d356){const _0x4c41a7=_0x5bbf40,_0x3be174=this[_0x4c41a7(0x39c)](_0x15d356),_0x10446f=new Window_BattleMultiTarget(_0x3be174,_0x15d356);this['addWindow'](_0x10446f),_0x15d356?this[_0x4c41a7(0x732)]=_0x10446f:this[_0x4c41a7(0x744)]=_0x10446f;},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x856)]=Scene_Battle[_0x5bbf40(0x68c)]['createCancelButton'],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x9c9)]=function(){const _0xf878cc=_0x5bbf40;VisuMZ[_0xf878cc(0x7d9)]['Scene_Battle_createCancelButton'][_0xf878cc(0x86a)](this),this['battleLayoutStyle']()===_0xf878cc(0x7e8)&&this[_0xf878cc(0x368)]();},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x30a)]=function(_0x338a70){const _0x56d1a9=_0x5bbf40;_0x338a70?(this[_0x56d1a9(0x7ae)]['x']=(Graphics[_0x56d1a9(0x2fc)]-Graphics[_0x56d1a9(0x99d)])/0x2,this[_0x56d1a9(0x7ae)]['y']=(Graphics['height']-Graphics[_0x56d1a9(0xa4b)])/0x2):(this[_0x56d1a9(0x7ae)]['x']=Graphics[_0x56d1a9(0x2fc)]*0xa,this[_0x56d1a9(0x7ae)]['y']=Graphics[_0x56d1a9(0x570)]*0xa);},VisuMZ['BattleCore'][_0x5bbf40(0x636)]=Scene_Battle['prototype'][_0x5bbf40(0x29e)],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x29e)]=function(){const _0x4fe51d=_0x5bbf40,_0x4c1fc1=BattleManager[_0x4fe51d(0x297)]();VisuMZ['BattleCore']['Scene_Battle_selectNextCommand'][_0x4fe51d(0x86a)](this);if(_0x4c1fc1){if(_0x4c1fc1===BattleManager['actor']())return;if(_0x4c1fc1===BattleManager['_subject'])return;if(_0x4c1fc1[_0x4fe51d(0xb3a)]())_0x4c1fc1['battler']()[_0x4fe51d(0x916)]();}},VisuMZ['BattleCore']['Scene_Battle_selectPreviousCommand']=Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0xa78)],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0xa78)]=function(){const _0x3a950a=_0x5bbf40,_0x370ee8=BattleManager[_0x3a950a(0x297)]();if(_0x370ee8&&_0x370ee8['battler'])_0x370ee8[_0x3a950a(0xb3a)]()['stepBack']();VisuMZ[_0x3a950a(0x7d9)][_0x3a950a(0x338)]['call'](this);},VisuMZ[_0x5bbf40(0x7d9)]['Scene_Battle_logWindowRect']=Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x623)],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x623)]=function(){const _0x2b0667=_0x5bbf40;if(VisuMZ[_0x2b0667(0x7d9)][_0x2b0667(0x8be)]['BattleLog'][_0x2b0667(0x680)])return VisuMZ['BattleCore'][_0x2b0667(0x8be)][_0x2b0667(0x567)][_0x2b0667(0x680)]['call'](this);return VisuMZ[_0x2b0667(0x7d9)]['Scene_Battle_logWindowRect'][_0x2b0667(0x86a)](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x27c)]=Scene_Battle[_0x5bbf40(0x68c)]['createPartyCommandWindow'],Scene_Battle['prototype'][_0x5bbf40(0xbc8)]=function(){const _0x422e60=_0x5bbf40;VisuMZ['BattleCore'][_0x422e60(0x27c)]['call'](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle['prototype'][_0x5bbf40(0x4c9)]=function(){const _0xb199dd=_0x5bbf40,_0x552c0f=this[_0xb199dd(0x3ba)];_0x552c0f[_0xb199dd(0x243)](_0xb199dd(0x938),this[_0xb199dd(0x33d)]['bind'](this)),_0x552c0f[_0xb199dd(0x243)](_0xb199dd(0x598),this['commandOptions'][_0xb199dd(0x840)](this));const _0x3b3a41=this['battleLayoutStyle']();switch(_0x3b3a41){case'xp':case _0xb199dd(0x20a):return this['_partyCommandWindow'][_0xb199dd(0x225)](0x1);break;}},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x33d)]=function(){const _0x4cf423=_0x5bbf40;BattleManager[_0x4cf423(0x614)]=!![],$gameParty[_0x4cf423(0x7dd)](),this[_0x4cf423(0x29e)](),BattleManager[_0x4cf423(0x860)]()&&(BattleManager[_0x4cf423(0x557)]=![]);},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x29c)]=function(){const _0x205209=_0x5bbf40;this[_0x205209(0x50d)]()?(this[_0x205209(0x2ca)]=!![],this[_0x205209(0x9e4)][_0x205209(0x9cb)](_0x205209(0x770),VisuMZ[_0x205209(0x7d9)][_0x205209(0x8be)]['PartyCmd']['ActiveTpbOptionsMessage'])):this[_0x205209(0xa00)]();},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x50d)]=function(){const _0x3cd620=_0x5bbf40;return BattleManager[_0x3cd620(0x41a)]();},Scene_Battle[_0x5bbf40(0x68c)]['callOptions']=function(){const _0x1329ab=_0x5bbf40;this[_0x1329ab(0x2ca)]=![],this['_spriteset'][_0x1329ab(0x69a)](),this[_0x1329ab(0x7ae)][_0x1329ab(0x74c)]=![];if(BattleManager[_0x1329ab(0xc01)]())($dataSystem[_0x1329ab(0x5fb)]||$dataSystem['battleback2Name'])&&SceneManager[_0x1329ab(0x2d6)]();else($gameMap[_0x1329ab(0x5fb)]()||$gameMap[_0x1329ab(0xa37)]())&&SceneManager[_0x1329ab(0x2d6)]();SceneManager['push'](Scene_Options),BattleManager[_0x1329ab(0x860)]()&&(BattleManager[_0x1329ab(0x1ee)]=BattleManager[_0x1329ab(0x297)]());},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8f0)]=Scene_Battle[_0x5bbf40(0x68c)]['updateBattleProcess'],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0xb30)]=function(){const _0x111198=_0x5bbf40;VisuMZ[_0x111198(0x7d9)]['Scene_Battle_updateBattleProcess'][_0x111198(0x86a)](this);if(this[_0x111198(0x2ca)]&&!BattleManager[_0x111198(0xb88)])this[_0x111198(0xa00)]();},VisuMZ[_0x5bbf40(0x7d9)]['Scene_Battle_update']=Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x69a)],Scene_Battle['prototype'][_0x5bbf40(0x69a)]=function(){const _0x5acd09=_0x5bbf40;VisuMZ[_0x5acd09(0x7d9)][_0x5acd09(0xabf)][_0x5acd09(0x86a)](this),this[_0x5acd09(0x787)]();},Scene_Battle['prototype'][_0x5bbf40(0x24a)]=function(){const _0x472439=_0x5bbf40,_0x1d266b=this['autoBattleWindowRect']();this['_autoBattleWindow']=new Window_AutoBattleCancel(_0x1d266b),this[_0x472439(0x1f8)][_0x472439(0x428)](),this[_0x472439(0x512)](this['_autoBattleWindow']);},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x6df)]=function(){const _0x1ae1d7=_0x5bbf40;return VisuMZ['BattleCore'][_0x1ae1d7(0x8be)][_0x1ae1d7(0x51e)][_0x1ae1d7(0x8ca)]['call'](this);},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x357)]=function(){const _0x2e5c6a=_0x5bbf40;this[_0x2e5c6a(0x91b)]=[];},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x787)]=function(){const _0x21c6a6=_0x5bbf40;if(!this[_0x21c6a6(0x91b)])return;for(const _0x14c898 of this[_0x21c6a6(0x91b)]){_0x14c898&&_0x14c898[_0x21c6a6(0x69a)]();}},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x8ae)]=function(_0x51f2dd){const _0x36cc4c=_0x5bbf40,_0x5dce6e=$dataCommonEvents[_0x51f2dd];if(!_0x5dce6e)return;const _0x3eb061=new Game_BattleOnceParallelInterpreter();this[_0x36cc4c(0x6ce)](_0x3eb061),_0x3eb061['setCommonEvent'](_0x51f2dd);},Scene_Battle['prototype'][_0x5bbf40(0x6ce)]=function(_0x47c8b5){const _0x3348dd=_0x5bbf40;this[_0x3348dd(0x91b)]=this[_0x3348dd(0x91b)]||[],this[_0x3348dd(0x91b)][_0x3348dd(0x9cb)](_0x47c8b5);},Scene_Battle[_0x5bbf40(0x68c)]['removeOnceParallelInterpreter']=function(_0x227f98){const _0xb2ba75=_0x5bbf40;this[_0xb2ba75(0x91b)]=this[_0xb2ba75(0x91b)]||[],this[_0xb2ba75(0x91b)][_0xb2ba75(0x94f)](_0x227f98);},Game_Troop['prototype'][_0x5bbf40(0x4b7)]=function(){const _0x5b2760=_0x5bbf40;for(const _0x423209 of this[_0x5b2760(0x941)]()[_0x5b2760(0x9bb)]){if(!this['doesPageHaveOnceParallelStart'](_0x423209))continue;SceneManager[_0x5b2760(0x2f2)]['playOnceParallelTroopPage'](_0x423209);}},Game_Troop['prototype'][_0x5bbf40(0x603)]=function(_0x1478ba){const _0x5525be=_0x5bbf40;if(!_0x1478ba)return;for(const _0x3eaa76 of _0x1478ba[_0x5525be(0x62f)]){if([0x6c,0x198][_0x5525be(0x608)](_0x3eaa76[_0x5525be(0x96f)])){const _0x24aef2=_0x3eaa76[_0x5525be(0xa05)][0x0];if(_0x24aef2[_0x5525be(0x24d)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle['prototype'][_0x5bbf40(0x40f)]=function(_0xb47ba1){const _0x4b46bb=_0x5bbf40;if(!_0xb47ba1)return;const _0x20d0aa=new Game_BattleOnceParallelInterpreter();this[_0x4b46bb(0x6ce)](_0x20d0aa),_0x20d0aa[_0x4b46bb(0xad3)](_0xb47ba1);};function Game_BattleOnceParallelInterpreter(){const _0x1b60e2=_0x5bbf40;this[_0x1b60e2(0x3bb)](...arguments);}Game_BattleOnceParallelInterpreter[_0x5bbf40(0x68c)]=Object[_0x5bbf40(0x6c2)](Game_Interpreter['prototype']),Game_BattleOnceParallelInterpreter[_0x5bbf40(0x68c)][_0x5bbf40(0xaad)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x5bbf40(0x68c)]['setCommonEvent']=function(_0x2aeb22){const _0x5cd6a5=_0x5bbf40,_0x120fc9=$dataCommonEvents[_0x2aeb22];_0x120fc9?this[_0x5cd6a5(0x39b)](_0x120fc9[_0x5cd6a5(0x62f)],0x0):this['terminate']();},Game_BattleOnceParallelInterpreter['prototype'][_0x5bbf40(0x779)]=function(){const _0x46f738=_0x5bbf40;if(!SceneManager[_0x46f738(0x277)]())return;SceneManager[_0x46f738(0x2f2)][_0x46f738(0x2f4)](this),Game_Interpreter[_0x46f738(0x68c)]['terminate'][_0x46f738(0x86a)](this);},Game_BattleOnceParallelInterpreter[_0x5bbf40(0x68c)][_0x5bbf40(0xad3)]=function(_0x40b5dd){const _0x4e785d=_0x5bbf40;_0x40b5dd?this[_0x4e785d(0x39b)](_0x40b5dd[_0x4e785d(0x62f)],0x0):this['terminate']();},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x441)]=function(){const _0x43ea35=_0x5bbf40;return VisuMZ['BattleCore']['Settings'][_0x43ea35(0x8e3)][_0x43ea35(0x90b)];},VisuMZ['BattleCore']['Scene_Battle_startPartyCommandSelection']=Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x926)],Scene_Battle['prototype'][_0x5bbf40(0x926)]=function(){const _0x1675ed=_0x5bbf40;this[_0x1675ed(0x441)]()?this[_0x1675ed(0x8a4)]():VisuMZ['BattleCore'][_0x1675ed(0x448)][_0x1675ed(0x86a)](this);},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x8a4)]=function(){const _0x114493=_0x5bbf40;if(BattleManager[_0x114493(0x32b)]())this['selectNextCommand']();else BattleManager[_0x114493(0x860)]()&&VisuMZ['BattleCore'][_0x114493(0x448)][_0x114493(0x86a)](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x49e)]=Scene_Battle['prototype'][_0x5bbf40(0xaf5)],Scene_Battle[_0x5bbf40(0x68c)]['commandFight']=function(){const _0x3ab999=_0x5bbf40;BattleManager[_0x3ab999(0x860)]()?(this[_0x3ab999(0x475)](),this['startActorCommandSelection']()):VisuMZ[_0x3ab999(0x7d9)][_0x3ab999(0x49e)][_0x3ab999(0x86a)](this);},Scene_Battle['prototype']['tpbCommandFight']=function(){const _0x1cf24d=_0x5bbf40;if(!VisuMZ['BattleCore'][_0x1cf24d(0x282)])return;if(Imported[_0x1cf24d(0x65e)]&&BattleManager[_0x1cf24d(0x3e0)]())return;const _0xb0145c=$gameParty[_0x1cf24d(0xb48)]()['filter'](_0x34c31e=>_0x34c31e[_0x1cf24d(0x8db)]()&&_0x34c31e[_0x1cf24d(0x9e1)]());BattleManager['_currentActor']=_0xb0145c[0x0]||null,BattleManager[_0x1cf24d(0x4ea)]&&BattleManager[_0x1cf24d(0x4ea)][_0x1cf24d(0x52f)](_0x1cf24d(0x483));},VisuMZ[_0x5bbf40(0x7d9)]['Scene_Battle_commandEscape']=Scene_Battle[_0x5bbf40(0x68c)]['commandEscape'],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x5bd)]=function(){const _0x3894a8=_0x5bbf40;VisuMZ[_0x3894a8(0x7d9)]['Scene_Battle_commandEscape'][_0x3894a8(0x86a)](this);if(!BattleManager['isTpb']())BattleManager['_currentActor']=null;},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x869)]=Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x454)],Scene_Battle['prototype'][_0x5bbf40(0x454)]=function(){const _0x435aa4=_0x5bbf40;VisuMZ[_0x435aa4(0x7d9)][_0x435aa4(0x869)][_0x435aa4(0x86a)](this),this[_0x435aa4(0x241)]();},Scene_Battle[_0x5bbf40(0x68c)]['createActorCommandWindowBattleCore']=function(){const _0x3cea37=_0x5bbf40,_0x4a0e30=this[_0x3cea37(0xa91)];_0x4a0e30[_0x3cea37(0x243)](_0x3cea37(0x8f3),this[_0x3cea37(0xa44)]['bind'](this)),_0x4a0e30[_0x3cea37(0x243)](_0x3cea37(0x938),this['actorCommandAutoBattle']['bind'](this)),_0x4a0e30['setHandler'](_0x3cea37(0x311),this['actorCommandSingleSkill'][_0x3cea37(0x840)](this)),BattleManager['isTpb']()&&(this[_0x3cea37(0x441)]()?delete _0x4a0e30[_0x3cea37(0x619)][_0x3cea37(0x8bc)]:_0x4a0e30[_0x3cea37(0x243)]('cancel',this[_0x3cea37(0x855)][_0x3cea37(0x840)](this)));},Scene_Battle[_0x5bbf40(0x68c)]['actorCommandEscape']=function(){const _0x293a75=_0x5bbf40;this[_0x293a75(0x5bd)]();},Scene_Battle[_0x5bbf40(0x68c)]['actorCommandAutoBattle']=function(){const _0xce741a=_0x5bbf40;BattleManager[_0xce741a(0x297)]()[_0xce741a(0x298)](),BattleManager[_0xce741a(0x754)](),BattleManager[_0xce741a(0x6b1)](),this[_0xce741a(0x89a)]();},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x88b)]=function(){const _0x46d543=_0x5bbf40,_0xefe96e=BattleManager['inputtingAction'](),_0x59d3d0=this['_actorCommandWindow'][_0x46d543(0x710)]();_0xefe96e[_0x46d543(0x9eb)](_0x59d3d0),BattleManager['actor']()[_0x46d543(0x2be)]($dataSkills[_0x59d3d0]),this['onSelectAction']();},Scene_Battle[_0x5bbf40(0x68c)]['actorCommandCancelTPB']=function(){const _0x57141e=_0x5bbf40;this[_0x57141e(0x739)]()?this['performTpbActiveCheckSwitch']():this[_0x57141e(0x6a6)]();},VisuMZ['BattleCore']['TpbActiveChangeEnabled']=![],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x739)]=function(){const _0x32e961=_0x5bbf40;if(Imported[_0x32e961(0x65e)]&&BattleManager[_0x32e961(0x3e0)]())return![];else{if(!VisuMZ['BattleCore'][_0x32e961(0x282)])return![];const _0x4b4718=$gameParty[_0x32e961(0xb48)]()['filter'](_0x3c577b=>_0x3c577b['isTpbCharged']()&&_0x3c577b[_0x32e961(0x9e1)]());return _0x4b4718[_0x32e961(0x348)]>0x0&&BattleManager[_0x32e961(0x297)]()!==_0x4b4718[_0x4b4718[_0x32e961(0x348)]-0x1];}},Scene_Battle['prototype'][_0x5bbf40(0x3d2)]=function(){const _0x15c882=_0x5bbf40,_0x33788f=BattleManager[_0x15c882(0x297)](),_0x3d07d6=_0x33788f['battler']();if(_0x3d07d6)_0x3d07d6['stepBack']();const _0x4d30b7=$gameParty[_0x15c882(0xb48)]()[_0x15c882(0xafb)](_0x41e91f=>_0x41e91f[_0x15c882(0x8db)]()&&_0x41e91f[_0x15c882(0x9e1)]()),_0x2611ab=_0x4d30b7[_0x15c882(0x5c9)](_0x33788f),_0x5ed226=_0x4d30b7[_0x2611ab+0x1];BattleManager[_0x15c882(0x4ea)]=_0x5ed226||null;if(_0x5ed226)_0x5ed226[_0x15c882(0x52f)](_0x15c882(0x483));_0x33788f[_0x15c882(0x52f)](_0x15c882(0xaaa)),this[_0x15c882(0x89a)]();},Scene_Battle['prototype'][_0x5bbf40(0x6a6)]=function(){const _0x85735e=_0x5bbf40;this['_partyCommandWindow']['setup'](),this['_actorCommandWindow'][_0x85735e(0x8d2)]();if(!VisuMZ[_0x85735e(0x7d9)][_0x85735e(0x282)])return;if(Imported[_0x85735e(0x65e)]&&BattleManager['isCTB']())return;if(BattleManager[_0x85735e(0x4ea)]){BattleManager[_0x85735e(0x4ea)][_0x85735e(0x52f)](_0x85735e(0xaaa));const _0x37c3c2=BattleManager[_0x85735e(0x4ea)][_0x85735e(0xb3a)]();if(_0x37c3c2)_0x37c3c2['stepBack']();}BattleManager[_0x85735e(0x4ea)]=null;},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x816)]=Scene_Battle['prototype'][_0x5bbf40(0x496)],Scene_Battle[_0x5bbf40(0x68c)]['createHelpWindow']=function(){const _0x1a04b7=_0x5bbf40;VisuMZ[_0x1a04b7(0x7d9)][_0x1a04b7(0x816)][_0x1a04b7(0x86a)](this),this['createHelpWindowBattleCore']();},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x29b)]=function(){const _0x475301=_0x5bbf40;this[_0x475301(0xa91)]['setHelpWindow'](this['_helpWindow']),this[_0x475301(0x3ba)][_0x475301(0x9fb)](this[_0x475301(0x465)]);},Scene_Battle[_0x5bbf40(0x68c)]['battleLayoutStyle']=function(){const _0x582acb=_0x5bbf40;if($gameTemp[_0x582acb(0xb12)]!==undefined)return $gameTemp['_forcedBattleLayout'];if(this[_0x582acb(0x506)])return this[_0x582acb(0x506)];return this[_0x582acb(0x506)]=VisuMZ[_0x582acb(0x7d9)][_0x582acb(0x8be)]['BattleLayout'][_0x582acb(0xbbf)][_0x582acb(0x993)]()[_0x582acb(0x86c)](),this[_0x582acb(0x506)]===_0x582acb(0x2a9)&&!Imported[_0x582acb(0x71f)]&&(this[_0x582acb(0x506)]=_0x582acb(0x81f)),this[_0x582acb(0x506)]===_0x582acb(0x247)&&!Imported[_0x582acb(0x78a)]&&(this['_battleLayoutStyle']=_0x582acb(0x81f)),this['_battleLayoutStyle'];},VisuMZ[_0x5bbf40(0x7d9)]['Scene_Battle_windowAreaHeight']=Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x8ef)],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x8ef)]=function(){const _0x2fcce5=_0x5bbf40,_0x5bbd76=this[_0x2fcce5(0x6e0)]();switch(_0x5bbd76){case _0x2fcce5(0x62f):return this['calcWindowHeight'](Math[_0x2fcce5(0xb10)](0x1,$gameParty[_0x2fcce5(0x57f)]()),!![]);break;default:return VisuMZ[_0x2fcce5(0x7d9)][_0x2fcce5(0x71d)][_0x2fcce5(0x86a)](this);break;}},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x60e)]=Scene_Battle['prototype']['helpWindowRect'],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x5d0)]=function(){const _0x16d0d1=_0x5bbf40,_0x8d40e9=this[_0x16d0d1(0x6e0)]();switch(_0x8d40e9){case _0x16d0d1(0x7e8):return this['helpWindowRectBorderStyle']();break;case _0x16d0d1(0x81f):case _0x16d0d1(0x62f):case'xp':case _0x16d0d1(0x20a):default:return VisuMZ['BattleCore'][_0x16d0d1(0x60e)][_0x16d0d1(0x86a)](this);break;}},Scene_Battle['prototype']['statusWindowRect']=function(){const _0x36b41f=_0x5bbf40,_0x54d2ce=this[_0x36b41f(0x6e0)]();switch(_0x54d2ce){case'xp':case _0x36b41f(0x20a):return this[_0x36b41f(0xaa5)]();break;case _0x36b41f(0x7e8):return this[_0x36b41f(0x944)]();break;case _0x36b41f(0x81f):case'list':default:return this[_0x36b41f(0x1f4)]();break;}},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x991)]=Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x1f3)],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x1f3)]=function(){const _0x5d6e17=_0x5bbf40,_0x17c528=this['battleLayoutStyle']();switch(_0x17c528){case'xp':case'portrait':return this['partyCommandWindowRectXPStyle']();break;case _0x5d6e17(0x7e8):return this[_0x5d6e17(0x4a8)]();case _0x5d6e17(0x81f):case _0x5d6e17(0x62f):default:return this['partyCommandWindowRectDefaultStyle']();break;}},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x458)]=function(){const _0x7474f4=_0x5bbf40,_0x296a8d=VisuMZ[_0x7474f4(0x7d9)][_0x7474f4(0x8be)][_0x7474f4(0x5c3)],_0x56d1ff=_0x296a8d[_0x7474f4(0x495)]||0xc0,_0x30799c=this[_0x7474f4(0x8ef)](),_0x4bdab7=this[_0x7474f4(0xc0c)]()?Graphics[_0x7474f4(0x99d)]-_0x56d1ff:0x0,_0x3d4c4f=Graphics[_0x7474f4(0xa4b)]-_0x30799c;return new Rectangle(_0x4bdab7,_0x3d4c4f,_0x56d1ff,_0x30799c);},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x911)]=function(){const _0x48bb01=_0x5bbf40;return this[_0x48bb01(0x1f3)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x4fe)]=Scene_Battle[_0x5bbf40(0x68c)]['updateStatusWindowPosition'],Scene_Battle[_0x5bbf40(0x68c)]['updateStatusWindowPosition']=function(){const _0x2cb9d6=_0x5bbf40,_0x1b9197=this['battleLayoutStyle']();switch(_0x1b9197){case'xp':case _0x2cb9d6(0x20a):case _0x2cb9d6(0x7e8):break;case _0x2cb9d6(0x81f):case _0x2cb9d6(0x62f):default:VisuMZ['BattleCore']['Scene_Battle_updateStatusWindowPosition'][_0x2cb9d6(0x86a)](this);break;}},VisuMZ['BattleCore'][_0x5bbf40(0xa61)]=Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x335)],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x335)]=function(){const _0x551290=_0x5bbf40;VisuMZ['BattleCore'][_0x551290(0xa61)][_0x551290(0x86a)](this),this[_0x551290(0x83e)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x6c3)]=Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0xc06)],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0xc06)]=function(){const _0x22d6bf=_0x5bbf40;VisuMZ[_0x22d6bf(0x7d9)][_0x22d6bf(0x6c3)]['call'](this),this[_0x22d6bf(0xa7e)][_0x22d6bf(0x7cd)](),this['makeTargetSelectionMoreVisible']();},Scene_Battle['prototype']['makeTargetSelectionMoreVisible']=function(){const _0xe4f764=_0x5bbf40,_0x1900bb=this[_0xe4f764(0x6e0)]();['xp',_0xe4f764(0x20a),'border'][_0xe4f764(0x608)](_0x1900bb)&&this[_0xe4f764(0xa91)][_0xe4f764(0x8d2)](),(_0x1900bb==='border'||this['isSkillItemWindowsMiddle']())&&(this[_0xe4f764(0x674)][_0xe4f764(0x8d2)](),this[_0xe4f764(0xbfa)][_0xe4f764(0x8d2)]());},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x59f)]=Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x2e0)],Scene_Battle[_0x5bbf40(0x68c)]['onActorOk']=function(){const _0x4306dd=_0x5bbf40;VisuMZ[_0x4306dd(0x7d9)][_0x4306dd(0x59f)][_0x4306dd(0x86a)](this),this[_0x4306dd(0xb67)]();},Scene_Battle['prototype'][_0x5bbf40(0xad7)]=function(){const _0x52ebc6=_0x5bbf40;return[_0x52ebc6(0x3d5),_0x52ebc6(0x2c0),_0x52ebc6(0x311)][_0x52ebc6(0x608)](this['_actorCommandWindow'][_0x52ebc6(0x972)]());},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x690)]=Scene_Battle['prototype'][_0x5bbf40(0x36e)],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x36e)]=function(){const _0xfe6564=_0x5bbf40;this[_0xfe6564(0xad7)]()?(this[_0xfe6564(0x861)]['show'](),this[_0xfe6564(0x351)]['hide'](),this[_0xfe6564(0xa91)]['activate']()):VisuMZ[_0xfe6564(0x7d9)]['Scene_Battle_onActorCancel'][_0xfe6564(0x86a)](this),this[_0xfe6564(0x81c)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x3c2)]=Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x909)],Scene_Battle[_0x5bbf40(0x68c)]['onEnemyOk']=function(){const _0x3a9f5f=_0x5bbf40;if(!this[_0x3a9f5f(0xa7e)][_0x3a9f5f(0x7f8)]()){this[_0x3a9f5f(0xa7e)][_0x3a9f5f(0xbc2)]();return;}const _0x30fe38=BattleManager[_0x3a9f5f(0x482)]();_0x30fe38[_0x3a9f5f(0x262)](this[_0x3a9f5f(0xa7e)]['enemy']()),this[_0x3a9f5f(0xa7e)][_0x3a9f5f(0x5ec)](),VisuMZ[_0x3a9f5f(0x7d9)][_0x3a9f5f(0x3c2)][_0x3a9f5f(0x86a)](this),this[_0x3a9f5f(0xb67)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x427)]=Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x208)],Scene_Battle['prototype'][_0x5bbf40(0x208)]=function(){const _0x47772e=_0x5bbf40;this['isNonSubmenuCancel']()?(this[_0x47772e(0x861)][_0x47772e(0xab4)](),this[_0x47772e(0xa7e)]['hide'](),this[_0x47772e(0xa91)]['activate']()):VisuMZ[_0x47772e(0x7d9)][_0x47772e(0x427)][_0x47772e(0x86a)](this),this['cancelTargetSelectionVisibility'](),this[_0x47772e(0xa7e)]['closeBattleActorWindow']();},Scene_Battle['prototype'][_0x5bbf40(0xb67)]=function(){const _0x1b4a75=_0x5bbf40,_0x3d6999=this[_0x1b4a75(0x6e0)]();(_0x3d6999==='border'||this['isSkillItemWindowsMiddle']())&&(this[_0x1b4a75(0x674)]['open'](),this[_0x1b4a75(0x674)][_0x1b4a75(0xb16)]&&this[_0x1b4a75(0x674)][_0x1b4a75(0xab4)](),this[_0x1b4a75(0xbfa)]['open'](),this[_0x1b4a75(0xbfa)][_0x1b4a75(0xb16)]&&this[_0x1b4a75(0xbfa)]['show']());},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x81c)]=function(){const _0x36157f=_0x5bbf40,_0x31a9de=this[_0x36157f(0x6e0)]();['xp',_0x36157f(0x20a),_0x36157f(0x7e8)][_0x36157f(0x608)](_0x31a9de)&&this['_actorCommandWindow'][_0x36157f(0x405)](),this[_0x36157f(0xb67)]();},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x1f4)]=function(){const _0x48b14b=_0x5bbf40,_0x14c959=VisuMZ[_0x48b14b(0x7d9)][_0x48b14b(0x8be)][_0x48b14b(0x5c3)],_0xafc211=Window_BattleStatus[_0x48b14b(0x68c)][_0x48b14b(0x44d)](),_0x3cef72=Graphics[_0x48b14b(0x99d)]-(_0x14c959['CommandWidth']||0xc0),_0x5ad5ab=this['windowAreaHeight']()+_0xafc211,_0x192251=this[_0x48b14b(0xc0c)]()?0x0:Graphics['boxWidth']-_0x3cef72,_0x56885b=Graphics['boxHeight']-_0x5ad5ab+_0xafc211;return new Rectangle(_0x192251,_0x56885b,_0x3cef72,_0x5ad5ab);},Scene_Battle['prototype'][_0x5bbf40(0xaa5)]=function(){const _0x469f4e=_0x5bbf40,_0x2421a5=Window_BattleStatus[_0x469f4e(0x68c)][_0x469f4e(0x44d)](),_0x10e370=Graphics[_0x469f4e(0x99d)],_0x5f1fbd=this[_0x469f4e(0x8ef)]()+_0x2421a5,_0x3114a4=0x0,_0x553b90=Graphics['boxHeight']-_0x5f1fbd+_0x2421a5;return new Rectangle(_0x3114a4,_0x553b90,_0x10e370,_0x5f1fbd);},Scene_Battle['prototype']['partyCommandWindowRectXPStyle']=function(){const _0x510ec5=_0x5bbf40,_0x4072da=Graphics[_0x510ec5(0x99d)]/0x2,_0x2e4d68=this['calcWindowHeight'](VisuMZ[_0x510ec5(0x7d9)]['Settings'][_0x510ec5(0x5c3)][_0x510ec5(0x59b)],!![]),_0x1cfcd4=Math['round']((Graphics[_0x510ec5(0x99d)]-_0x4072da)/0x2),_0x9c5076=Graphics[_0x510ec5(0xa4b)]-_0x2e4d68-this[_0x510ec5(0xaa5)]()[_0x510ec5(0x570)];return new Rectangle(_0x1cfcd4,_0x9c5076,_0x4072da,_0x2e4d68);},Scene_Battle['prototype']['helpWindowRectBorderStyle']=function(){const _0x3f55f2=_0x5bbf40,_0xfb179c=Graphics['width'],_0x555df6=Math['round']((Graphics[_0x3f55f2(0x99d)]-_0xfb179c)/0x2),_0x28a3ca=this[_0x3f55f2(0x1fb)](),_0x1cb72d=(Graphics['height']-Graphics[_0x3f55f2(0xa4b)])/-0x2;return new Rectangle(_0x555df6,_0x1cb72d,_0xfb179c,_0x28a3ca);},Scene_Battle[_0x5bbf40(0x68c)]['statusWindowRectBorderStyle']=function(){const _0x5369df=_0x5bbf40,_0x17daad=Graphics[_0x5369df(0x2fc)],_0x268962=Math[_0x5369df(0x6ea)]((Graphics['boxWidth']-_0x17daad)/0x2),_0x575b3f=this[_0x5369df(0x5ae)](0x4,!![]),_0x1c8568=Graphics[_0x5369df(0xa4b)]-_0x575b3f+(Graphics[_0x5369df(0x570)]-Graphics['boxHeight'])/0x2;return new Rectangle(_0x268962,_0x1c8568,_0x17daad,_0x575b3f);},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x4a8)]=function(){const _0x390cbd=_0x5bbf40,_0x2261d9=Math[_0x390cbd(0x9d6)](Graphics[_0x390cbd(0x2fc)]/0x3),_0xdfcf64=this[_0x390cbd(0xc0c)]()?(Graphics[_0x390cbd(0x2fc)]+Graphics[_0x390cbd(0x99d)])/0x2-_0x2261d9:(Graphics[_0x390cbd(0x2fc)]-Graphics[_0x390cbd(0x99d)])/-0x2,_0x533852=this[_0x390cbd(0x77a)](),_0x28cf3d=_0x533852['y']+_0x533852[_0x390cbd(0x570)],_0xab73c9=this[_0x390cbd(0x944)](),_0x46037f=_0xab73c9['y']-_0x28cf3d;return new Rectangle(_0xdfcf64,_0x28cf3d,_0x2261d9,_0x46037f);},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x5a7)]=function(){const _0x41c6d9=_0x5bbf40,_0x2eda40=Math[_0x41c6d9(0x95e)](Graphics[_0x41c6d9(0x2fc)]/0x3),_0x331264=Math[_0x41c6d9(0x6ea)]((Graphics['boxWidth']-_0x2eda40)/0x2),_0x106e9d=this['partyCommandWindowRectBorderStyle'](),_0x559288=_0x106e9d['y'],_0x404b1e=_0x106e9d[_0x41c6d9(0x570)];return new Rectangle(_0x331264,_0x559288,_0x2eda40,_0x404b1e);},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x368)]=function(){const _0x50b188=_0x5bbf40;this[_0x50b188(0x2f8)]['y']=this[_0x50b188(0x465)]['y']+this[_0x50b188(0x465)][_0x50b188(0x570)],this[_0x50b188(0xc0c)]()?this[_0x50b188(0x6e0)]()===_0x50b188(0x7e8)?this['_cancelButton']['x']=0x8:this[_0x50b188(0x2f8)]['x']=-this['_cancelButton'][_0x50b188(0x2fc)]-0x4:this[_0x50b188(0x2f8)]['x']=Graphics[_0x50b188(0x2fc)]-(Graphics[_0x50b188(0x2fc)]-Graphics['boxWidth'])/0x2-this[_0x50b188(0x2f8)][_0x50b188(0x2fc)]-0x4;},VisuMZ[_0x5bbf40(0x7d9)]['Scene_Battle_skillWindowRect']=Scene_Battle['prototype'][_0x5bbf40(0x857)],Scene_Battle['prototype'][_0x5bbf40(0x857)]=function(){const _0x442d86=_0x5bbf40;if(this[_0x442d86(0x6e0)]()==='border')return this[_0x442d86(0x5a7)]();else return this[_0x442d86(0xb62)]()?this['skillItemWindowRectMiddle']():VisuMZ['BattleCore'][_0x442d86(0x628)][_0x442d86(0x86a)](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x47a)]=Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0xa26)],Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0xa26)]=function(){const _0x853f7e=_0x5bbf40;if(this['battleLayoutStyle']()===_0x853f7e(0x7e8))return this[_0x853f7e(0x5a7)]();else return this[_0x853f7e(0xb62)]()?this[_0x853f7e(0x837)]():VisuMZ['BattleCore'][_0x853f7e(0x47a)][_0x853f7e(0x86a)](this);},Scene_Battle[_0x5bbf40(0x68c)]['isSkillItemWindowsMiddle']=function(){const _0x171dc5=_0x5bbf40;return VisuMZ[_0x171dc5(0x7d9)][_0x171dc5(0x8be)][_0x171dc5(0x5c3)][_0x171dc5(0xb1b)];},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x837)]=function(){const _0x7d25f1=_0x5bbf40,_0x12128b=Sprite_Button[_0x7d25f1(0x68c)][_0x7d25f1(0x862)]()*0x2+0x4;let _0x48e84d=Graphics[_0x7d25f1(0x99d)]-_0x12128b;Imported[_0x7d25f1(0x25a)]&&SceneManager['isSideButtonLayout']()&&(_0x48e84d+=_0x12128b);const _0xb88619=this['helpAreaBottom'](),_0x42b0f0=Graphics['boxHeight']-_0xb88619-this[_0x7d25f1(0x641)]()[_0x7d25f1(0x570)]+Window_BattleStatus[_0x7d25f1(0x68c)][_0x7d25f1(0x44d)](),_0x2ec8f3=0x0;return new Rectangle(_0x2ec8f3,_0xb88619,_0x48e84d,_0x42b0f0);},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x261)]=function(){const _0x1deb24=_0x5bbf40;if(!VisuMZ['BattleCore']['Settings']['Enemy']['NameLegacy'])return;this[_0x1deb24(0x9f6)]=new Sprite(),this[_0x1deb24(0x9f6)]['x']=this['_windowLayer']['x'],this['_enemyNameContainer']['y']=this[_0x1deb24(0x7ae)]['y'];const _0x45f161=this['children'][_0x1deb24(0x5c9)](this['_windowLayer']);this[_0x1deb24(0xa06)](this[_0x1deb24(0x9f6)],_0x45f161);for(let _0x30dc89=0x0;_0x30dc89<0x8;_0x30dc89++){const _0x3ac735=new Window_EnemyName(_0x30dc89);this[_0x1deb24(0x9f6)][_0x1deb24(0x512)](_0x3ac735);}},Sprite_Battler[_0x5bbf40(0x58f)]=VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8be)][_0x5bbf40(0x9a5)][_0x5bbf40(0x2ba)],VisuMZ['BattleCore'][_0x5bbf40(0x334)]=Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x64e)],Sprite_Battler[_0x5bbf40(0x68c)]['initMembers']=function(){const _0x30c91f=_0x5bbf40;VisuMZ[_0x30c91f(0x7d9)][_0x30c91f(0x334)][_0x30c91f(0x86a)](this),this['initMembersBattleCore']();if(this['constructor']===Sprite_Enemy)this[_0x30c91f(0x552)]();this[_0x30c91f(0x921)]();},Sprite_Battler['prototype']['initMembersBattleCore']=function(){const _0x5ab809=_0x5bbf40;this['_baseX']=0x0,this['_baseY']=0x0,this[_0x5ab809(0xb54)]=0x0,this[_0x5ab809(0x33a)]=0x0,this[_0x5ab809(0x656)]=0x0,this[_0x5ab809(0x596)]=0x0,this['_floatEasing']=_0x5ab809(0x54c),this[_0x5ab809(0x4d3)]=0x0,this[_0x5ab809(0x52b)]=0x0,this[_0x5ab809(0x3d0)]=0x0,this[_0x5ab809(0x813)]=0x0,this['_targetOpacity']=0xff,this[_0x5ab809(0x88a)]=0x0,this[_0x5ab809(0x59e)]=0x0,this[_0x5ab809(0x988)]=_0x5ab809(0x54c),this[_0x5ab809(0x957)]=0x0,this[_0x5ab809(0x3cd)]=0x0,this['_angleDuration']=0x0,this[_0x5ab809(0xbfd)]=0x0,this[_0x5ab809(0xa6e)]=_0x5ab809(0x54c),this[_0x5ab809(0x486)]=!![],this['_skewX']=0x0,this['_skewY']=0x0,this[_0x5ab809(0x985)]=0x0,this['_targetSkewY']=0x0,this['_skewDuration']=0x0,this[_0x5ab809(0x47e)]=0x0,this[_0x5ab809(0x825)]=_0x5ab809(0x54c),this[_0x5ab809(0x98b)]=0x1,this[_0x5ab809(0xa1e)]=0x1,this['_targetGrowX']=0x1,this[_0x5ab809(0x2c3)]=0x1,this[_0x5ab809(0x5f9)]=0x0,this[_0x5ab809(0x996)]=0x0,this[_0x5ab809(0x8ee)]=_0x5ab809(0x54c),this[_0x5ab809(0x766)]=0x1,this[_0x5ab809(0xb57)]=0x0,this[_0x5ab809(0xa48)]=0x0,this[_0x5ab809(0x39d)]=0x0,this[_0x5ab809(0x85f)]=0x0,this[_0x5ab809(0x4de)]=_0x5ab809(0x54c),this['_shakeFlinchDuration']=0x0,this['_shakeFlinchPower']=0x0;},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x552)]=function(){const _0x15bac4=_0x5bbf40;this[_0x15bac4(0x895)]=new Sprite(),this[_0x15bac4(0x895)]['bitmap']=ImageManager[_0x15bac4(0x535)](_0x15bac4(0xab3)),this['_shadowSprite'][_0x15bac4(0xaa1)][_0x15bac4(0x827)]=VisuMZ['BattleCore'][_0x15bac4(0x8be)]['Actor'][_0x15bac4(0x753)],this['_shadowSprite'][_0x15bac4(0x600)]['x']=0.5,this[_0x15bac4(0x895)]['anchor']['y']=0.5,this[_0x15bac4(0x895)]['y']=-0x2,this[_0x15bac4(0x895)][_0x15bac4(0x74c)]=![],this['addChild'](this[_0x15bac4(0x895)]);},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x921)]=function(){const _0x383db9=_0x5bbf40;this['_distortionSprite']=new Sprite(),this[_0x383db9(0x48d)]['anchor']['x']=0.5,this[_0x383db9(0x48d)][_0x383db9(0x600)]['y']=0.5,this[_0x383db9(0x512)](this[_0x383db9(0x48d)]);},Sprite_Battler['prototype']['_updateColorFilter']=function(){const _0x215861=_0x5bbf40;if(this[_0x215861(0xb6d)]&&this[_0x215861(0xb6d)]()){Sprite[_0x215861(0x68c)]['_updateColorFilter'][_0x215861(0x86a)](this);return;}const _0x41268e=this['_distortionSprite'];if(!_0x41268e)return;!_0x41268e['_colorFilter']&&_0x41268e['_createColorFilter'](),_0x41268e[_0x215861(0x7b0)][_0x215861(0xafa)](this[_0x215861(0xb19)]),_0x41268e[_0x215861(0x7b0)][_0x215861(0x609)](this['_blendColor']),_0x41268e[_0x215861(0x7b0)]['setColorTone'](this[_0x215861(0x2fe)]);},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x328)]=function(){const _0x3ce677=_0x5bbf40;if(!this[_0x3ce677(0x48d)])return;if(this[_0x3ce677(0x895)]){const _0x1b399f=this['getChildIndex'](this[_0x3ce677(0x48d)]);this['addChildAt'](this['_shadowSprite'],_0x1b399f),this['updateShadowVisibility']();}this[_0x3ce677(0xb25)]&&this[_0x3ce677(0x48d)][_0x3ce677(0x512)](this[_0x3ce677(0xb25)]),this[_0x3ce677(0x9ba)]&&this[_0x3ce677(0x48d)]['addChild'](this['_weaponSprite']),this[_0x3ce677(0x24b)]&&this[_0x3ce677(0x48d)][_0x3ce677(0x512)](this[_0x3ce677(0x24b)]),this['_injectAnimationSprite']&&this['_distortionSprite'][_0x3ce677(0x512)](this[_0x3ce677(0xa56)]),this[_0x3ce677(0x23f)]&&this[_0x3ce677(0x48d)][_0x3ce677(0x512)](this[_0x3ce677(0x23f)]);},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x9b1)]=function(){const _0x528227=_0x5bbf40;if(!this['_shadowSprite'])return;if(this[_0x528227(0xb9d)]&&this[_0x528227(0xb9d)][_0x528227(0x6e1)]()){const _0x3fda73=this[_0x528227(0x895)][_0x528227(0xaa1)];this['_shadowSprite'][_0x528227(0x92c)](0x0,0x0,_0x3fda73[_0x528227(0x2fc)],_0x3fda73[_0x528227(0x570)]);}else this[_0x528227(0x895)][_0x528227(0x92c)](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype']['damageContainer']=function(){const _0x5de9f5=_0x5bbf40;return SceneManager[_0x5de9f5(0x277)]()?SceneManager['_scene'][_0x5de9f5(0x3c3)]['_damageContainer']:this[_0x5de9f5(0x25e)];},Sprite_Battler['prototype'][_0x5bbf40(0x7b2)]=function(_0x388b6b,_0x267ebe){const _0x5876b3=_0x5bbf40;if(!this['_battler'][_0x5876b3(0x94e)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0xbb554=VisuMZ[_0x5876b3(0x7d9)][_0x5876b3(0x8be)][_0x5876b3(0x363)],_0x34c3df=new Sprite_Damage();_0x34c3df[_0x5876b3(0xa41)]=_0xbb554[_0x5876b3(0x2c7)],this['sortDamageSprites'](_0x34c3df),_0x34c3df['setupTextPopup'](_0x388b6b,_0x267ebe),this[_0x5876b3(0x920)](_0x34c3df);},Sprite_Battler['prototype'][_0x5bbf40(0xa3d)]=function(_0x275e34,_0x40e98a,_0x1999c2){const _0x296715=_0x5bbf40;if(!this['_battler']['isSpriteVisible']())return;if(BattleManager[_0x296715(0x824)]())return;const _0x587055=VisuMZ[_0x296715(0x7d9)]['Settings'][_0x296715(0x363)],_0x1316ca=new Sprite_Damage();_0x1316ca[_0x296715(0xa41)]=_0x587055[_0x296715(0x2c7)],this[_0x296715(0x5c2)](_0x1316ca),_0x1316ca['setupIconTextPopup'](_0x275e34,_0x40e98a,_0x1999c2),this[_0x296715(0x920)](_0x1316ca);},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xa70)]=function(){const _0x3c3787=_0x5bbf40;if(!this[_0x3c3787(0xb9d)][_0x3c3787(0xaa9)]())return;while(this[_0x3c3787(0xb9d)][_0x3c3787(0xaa9)]()){this[_0x3c3787(0xb9d)][_0x3c3787(0x94e)]()&&this[_0x3c3787(0x32c)]();}this[_0x3c3787(0xb9d)][_0x3c3787(0x8d4)](),this[_0x3c3787(0xb9d)][_0x3c3787(0x951)]();},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x32c)]=function(){const _0x39f9e4=_0x5bbf40;if(BattleManager[_0x39f9e4(0x824)]())return;const _0x384525=VisuMZ[_0x39f9e4(0x7d9)][_0x39f9e4(0x8be)][_0x39f9e4(0x363)],_0x1f085a=new Sprite_Damage();_0x1f085a['_duration']=_0x384525[_0x39f9e4(0x2c7)],this['sortDamageSprites'](_0x1f085a),_0x1f085a['setup'](this['_battler']),_0x1f085a[_0x39f9e4(0x94c)](this[_0x39f9e4(0xb9d)]),this[_0x39f9e4(0x920)](_0x1f085a);},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x920)]=function(_0xdd927b){const _0x3723c2=_0x5bbf40;this[_0x3723c2(0xa11)][_0x3723c2(0x9cb)](_0xdd927b);if(this[_0x3723c2(0xb5e)]()){const _0x1abc65=SceneManager['_scene'][_0x3723c2(0x861)];if(_0x1abc65)_0x1abc65[_0x3723c2(0x920)](_0xdd927b,this[_0x3723c2(0xb9d)]);}else{this['damageContainer']()[_0x3723c2(0x512)](_0xdd927b);if(SceneManager['isBattleFlipped']())_0xdd927b[_0x3723c2(0x5f5)]['x']=-0x1;}},Sprite_Battler['prototype']['isShownOnBattlePortrait']=function(){const _0x5d1006=_0x5bbf40;return!$gameSystem[_0x5d1006(0xb7a)]()&&this[_0x5d1006(0xb9d)]&&this[_0x5d1006(0xb9d)]['isActor']();return!$gameSystem[_0x5d1006(0xb7a)]()&&this[_0x5d1006(0xb9d)]&&this[_0x5d1006(0xb9d)]['isActor']()&&Window_BattleStatus[_0x5d1006(0x68c)][_0x5d1006(0x6e0)]()===_0x5d1006(0x20a);},Sprite_Battler['prototype'][_0x5bbf40(0x5c2)]=function(_0x2843d9){const _0x4d07aa=_0x5bbf40;this['alignBattleCoreDamageSprite'](_0x2843d9,!![]);const _0x1c88d1=VisuMZ['BattleCore'][_0x4d07aa(0x8be)][_0x4d07aa(0x363)],_0x53e96e=SceneManager[_0x4d07aa(0x5f7)]()?-0x1:0x1;if(_0x1c88d1[_0x4d07aa(0x73c)])for(const _0x4fe34f of this[_0x4d07aa(0xa11)]){_0x4fe34f['x']+=_0x1c88d1['PopupShiftX']*_0x53e96e,_0x4fe34f['y']+=_0x1c88d1[_0x4d07aa(0x69f)];}else{const _0x35cbc1=this[_0x4d07aa(0xa11)][this['_damages'][_0x4d07aa(0x348)]-0x1];_0x35cbc1&&(_0x2843d9['x']=_0x35cbc1['x']+_0x1c88d1['PopupShiftX']*_0x53e96e,_0x2843d9['y']=_0x35cbc1['y']+_0x1c88d1[_0x4d07aa(0x69f)]);}},Sprite_Battler['prototype'][_0x5bbf40(0xb96)]=function(_0x38799e,_0x45d1e1){const _0x2abe69=_0x5bbf40,_0x3384ac=SceneManager['isBattleFlipped']()?-0x1:0x1;let _0x2367ce=this[_0x2abe69(0x72f)];_0x2367ce+=this[_0x2abe69(0xa5c)]();let _0x28c4e8=this['_baseY'];const _0x3c59c4=this[_0x2abe69(0x48d)][_0x2abe69(0x5f5)]['y'];_0x28c4e8+=this[_0x2abe69(0x788)]();const _0x2061e8=SceneManager[_0x2abe69(0x2f2)][_0x2abe69(0x861)];if(_0x2061e8&&this[_0x2abe69(0x25e)]===_0x2061e8){_0x2367ce+=_0x2061e8['x']-this[_0x2abe69(0x31c)]();const _0x122898=_0x2061e8['lineHeight']()*0x3/0x4;_0x28c4e8=_0x2061e8['y']+_0x122898,_0x28c4e8=Math[_0x2abe69(0xaf8)](_0x28c4e8,_0x2061e8['y']+this['y']-this[_0x2abe69(0x570)]+_0x122898);}_0x38799e['x']=Math[_0x2abe69(0x6ea)](_0x2367ce+this[_0x2abe69(0x31c)]()*_0x3384ac),_0x38799e['y']=Math[_0x2abe69(0x6ea)](_0x28c4e8+this[_0x2abe69(0x99c)]());},VisuMZ['BattleCore'][_0x5bbf40(0xa1a)]=Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x31c)],Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x31c)]=function(){const _0x2e0cc2=_0x5bbf40;let _0x177d6f=VisuMZ[_0x2e0cc2(0x7d9)][_0x2e0cc2(0xa1a)][_0x2e0cc2(0x86a)](this),_0x1f5ea9=VisuMZ[_0x2e0cc2(0x7d9)][_0x2e0cc2(0x8be)][_0x2e0cc2(0x363)][_0x2e0cc2(0xbb4)]||0x0;return Math['round'](_0x177d6f+_0x1f5ea9);},VisuMZ['BattleCore']['Sprite_Battler_damageOffsetY']=Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x99c)],Sprite_Battler[_0x5bbf40(0x68c)]['damageOffsetY']=function(){const _0x50a863=_0x5bbf40;let _0x100e85=VisuMZ[_0x50a863(0x7d9)][_0x50a863(0x337)]['call'](this);switch(VisuMZ[_0x50a863(0x7d9)][_0x50a863(0x8be)][_0x50a863(0x363)][_0x50a863(0x995)]){case _0x50a863(0x237):_0x100e85-=this['height']*this[_0x50a863(0x5f5)]['y'];break;case _0x50a863(0x572):_0x100e85-=this['height']*this[_0x50a863(0x5f5)]['y']*0.5;break;}let _0x52811d=VisuMZ['BattleCore'][_0x50a863(0x8be)][_0x50a863(0x363)][_0x50a863(0x6ed)]||0x0;return Math[_0x50a863(0x6ea)](_0x100e85+_0x52811d);},Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x31c)]=function(){const _0x252bdc=_0x5bbf40;return Sprite_Battler[_0x252bdc(0x68c)][_0x252bdc(0x31c)][_0x252bdc(0x86a)](this);},Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x99c)]=function(){const _0x5c3f96=_0x5bbf40;return Sprite_Battler[_0x5c3f96(0x68c)]['damageOffsetY'][_0x5c3f96(0x86a)](this);},Sprite_Battler['prototype'][_0x5bbf40(0x870)]=function(_0x4912b1){const _0x65c74a=_0x5bbf40;this['isShownOnBattlePortrait']()?SceneManager[_0x65c74a(0x2f2)][_0x65c74a(0x861)][_0x65c74a(0xc17)](_0x4912b1):(this[_0x65c74a(0x7d3)]()['removeChild'](_0x4912b1),this[_0x65c74a(0xa11)][_0x65c74a(0x94f)](_0x4912b1),_0x4912b1[_0x65c74a(0x517)]());},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x84c)]=Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x850)],Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x850)]=function(_0x258059,_0x5d7da4){const _0x25840b=_0x5bbf40,_0x571578=VisuMZ['BattleCore'][_0x25840b(0x8be)];if(this[_0x25840b(0xaad)]===Sprite_Actor)_0x258059+=_0x571578[_0x25840b(0x9a5)][_0x25840b(0x294)]||0x0,_0x5d7da4+=_0x571578['Actor'][_0x25840b(0x41b)]||0x0;else this['constructor']===Sprite_Enemy&&(_0x258059+=_0x571578['Enemy']['OffsetX']||0x0,_0x5d7da4+=_0x571578[_0x25840b(0x51a)][_0x25840b(0x41b)]||0x0);this[_0x25840b(0xb9d)]&&(_0x258059=this['_battler'][_0x25840b(0x868)]??_0x258059,_0x5d7da4=this[_0x25840b(0xb9d)][_0x25840b(0x73b)]??_0x5d7da4),VisuMZ[_0x25840b(0x7d9)][_0x25840b(0x84c)][_0x25840b(0x86a)](this,_0x258059,_0x5d7da4),this[_0x25840b(0xb57)]=this[_0x25840b(0x8f6)],this[_0x25840b(0xa48)]=this[_0x25840b(0x54e)],this[_0x25840b(0x39d)]=0x0,this[_0x25840b(0x85f)]=0x0,this[_0x25840b(0x4de)]=_0x25840b(0x54c);},VisuMZ['BattleCore'][_0x5bbf40(0x2f7)]=Sprite_Battler['prototype']['update'],Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x69a)]=function(){const _0x52e241=_0x5bbf40;VisuMZ['BattleCore']['Sprite_Battler_update']['call'](this),!this[_0x52e241(0xb9d)]&&this['_hpGaugeSprite']&&(this['_hpGaugeSprite'][_0x52e241(0x74c)]=![]);},VisuMZ[_0x5bbf40(0x7d9)]['Sprite_Battler_updateMain']=Sprite_Battler[_0x5bbf40(0x68c)]['updateMain'],Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x437)]=function(){const _0x12e5ad=_0x5bbf40;this['updateScale'](),this[_0x12e5ad(0x78f)](),this[_0x12e5ad(0xb26)](),this[_0x12e5ad(0x618)](),VisuMZ[_0x12e5ad(0x7d9)][_0x12e5ad(0x331)][_0x12e5ad(0x86a)](this),this[_0x12e5ad(0x6a4)](),this[_0x12e5ad(0xbd1)]();if(this[_0x12e5ad(0xaad)]===Sprite_Enemy)this[_0x12e5ad(0x5cb)]();},VisuMZ[_0x5bbf40(0x7d9)]['Sprite_Battler_updatePosition']=Sprite_Battler['prototype'][_0x5bbf40(0x390)],Sprite_Battler[_0x5bbf40(0x68c)]['updatePosition']=function(){const _0x416071=_0x5bbf40;this[_0x416071(0x715)](),VisuMZ[_0x416071(0x7d9)][_0x416071(0x966)][_0x416071(0x86a)](this),this['updatePositionBattleCore'](),this[_0x416071(0x651)]();},Sprite_Battler['prototype']['updateSelectionEffect']=function(){const _0x19059f=_0x5bbf40,_0x424084=this[_0x19059f(0x2a7)]();if(this['_battler']['isSelected']())this['_selectionEffectCount']++,Graphics[_0x19059f(0x9a3)]%0x1e<0xf?_0x424084[_0x19059f(0x609)]([0xff,0xff,0xff,0x40]):_0x424084[_0x19059f(0x609)]([0x0,0x0,0x0,0x0]);else this[_0x19059f(0x5e3)]>0x0&&(this['_selectionEffectCount']=0x0,_0x424084[_0x19059f(0x609)]([0x0,0x0,0x0,0x0]));},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x5d7)]=function(_0x4a2a19,_0x3757fd){const _0x357ddd=_0x5bbf40,_0x4017d8=VisuMZ[_0x357ddd(0x7d9)][_0x357ddd(0x8be)];if(this['constructor']===Sprite_Actor)_0x4a2a19+=_0x4017d8[_0x357ddd(0x9a5)]['OffsetX']||0x0,_0x3757fd+=_0x4017d8[_0x357ddd(0x9a5)][_0x357ddd(0x41b)]||0x0;else this[_0x357ddd(0xaad)]===Sprite_Enemy&&(_0x4a2a19+=_0x4017d8[_0x357ddd(0x51a)][_0x357ddd(0x294)]||0x0,_0x3757fd+=_0x4017d8[_0x357ddd(0x51a)][_0x357ddd(0x41b)]||0x0);const _0x109c97=_0x4a2a19-this[_0x357ddd(0x8f6)],_0x2afa2c=_0x3757fd-this[_0x357ddd(0x54e)];this[_0x357ddd(0x8f6)]=_0x4a2a19,this['_homeY']=_0x3757fd,this[_0x357ddd(0x5e1)]-=_0x109c97,this['_offsetY']-=_0x2afa2c,this[_0x357ddd(0xaa4)]-=_0x109c97,this[_0x357ddd(0x830)]-=_0x2afa2c,this['updatePosition']();},Sprite_Battler['prototype'][_0x5bbf40(0xa5a)]=function(_0x1ea0d2,_0x40a218,_0x5c44c1,_0x15d8ca){const _0x145680=_0x5bbf40,_0x50294d=VisuMZ[_0x145680(0x7d9)]['Settings'];if(this[_0x145680(0xaad)]===Sprite_Actor)_0x1ea0d2+=_0x50294d['Actor'][_0x145680(0x294)]||0x0,_0x40a218+=_0x50294d[_0x145680(0x9a5)][_0x145680(0x41b)]||0x0;else this[_0x145680(0xaad)]===Sprite_Enemy&&(_0x1ea0d2+=_0x50294d['Enemy'][_0x145680(0x294)]||0x0,_0x40a218+=_0x50294d['Enemy']['OffsetY']||0x0);(this['_targetHomeX']!==_0x1ea0d2||this[_0x145680(0xa48)]!==_0x40a218)&&(this[_0x145680(0xb57)]=_0x1ea0d2,this['_targetHomeY']=_0x40a218,this[_0x145680(0x39d)]=_0x5c44c1,this[_0x145680(0x85f)]=_0x5c44c1,this[_0x145680(0x4de)]=_0x15d8ca,_0x5c44c1<=0x0&&this[_0x145680(0x3ae)]());},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x715)]=function(){const _0xdd80ee=_0x5bbf40;if(this[_0xdd80ee(0x39d)]<=0x0)return;const _0x584ccc=this[_0xdd80ee(0x39d)],_0x3e57f2=this[_0xdd80ee(0x85f)],_0x20c71c=this[_0xdd80ee(0x4de)];Imported[_0xdd80ee(0x25a)]?(this[_0xdd80ee(0x8f6)]=this[_0xdd80ee(0x8d7)](this[_0xdd80ee(0x8f6)],this[_0xdd80ee(0xb57)],_0x584ccc,_0x3e57f2,_0x20c71c),this[_0xdd80ee(0x54e)]=this[_0xdd80ee(0x8d7)](this['_homeY'],this[_0xdd80ee(0xa48)],_0x584ccc,_0x3e57f2,_0x20c71c)):(this[_0xdd80ee(0x8f6)]=(this[_0xdd80ee(0x8f6)]*(_0x584ccc-0x1)+this[_0xdd80ee(0xb57)])/_0x584ccc,this['_homeY']=(this[_0xdd80ee(0x54e)]*(_0x584ccc-0x1)+this[_0xdd80ee(0xa48)])/_0x584ccc);this[_0xdd80ee(0x39d)]--;if(this[_0xdd80ee(0x39d)]<=0x0)this[_0xdd80ee(0x3ae)]();},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x3ae)]=function(){const _0x5c1f90=_0x5bbf40;this[_0x5c1f90(0x8f6)]=this[_0x5c1f90(0xb57)],this[_0x5c1f90(0x54e)]=this[_0x5c1f90(0xa48)];},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x4be)]=function(){const _0x42f3c9=_0x5bbf40;this[_0x42f3c9(0x72f)]=this['x'],this[_0x42f3c9(0x4f3)]=this['y'],this[_0x42f3c9(0x664)](),this['updateJump'](),this['x']+=this[_0x42f3c9(0xa5c)](),this['y']+=this[_0x42f3c9(0x788)](),this['y']+=this['extraPositionScaledY'](),this['x']=Math[_0x42f3c9(0x9d6)](this['x']),this['y']=Math[_0x42f3c9(0x9d6)](this['y']);},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xa5c)]=function(){let _0x50638b=0x0;return _0x50638b;},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x788)]=function(){const _0x1553d5=_0x5bbf40;let _0x282476=0x0;return this['_battler']&&!this['_battler'][_0x1553d5(0x4a6)]()&&(_0x282476-=this[_0x1553d5(0xb54)],_0x282476-=this['_jumpHeight']),_0x282476;},Sprite_Battler[_0x5bbf40(0x68c)]['extraPositionScaledY']=function(){const _0x14877b=_0x5bbf40;let _0x25fe50=0x0;if(this['_distortionSprite']&&this[_0x14877b(0xaad)]!==Sprite_SvEnemy){const _0x4c99a9=this[_0x14877b(0x48d)][_0x14877b(0x5f5)]['y'];_0x25fe50-=(_0x4c99a9-0x1)*this[_0x14877b(0x570)];}return _0x25fe50;},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x618)]=function(){const _0x49095b=_0x5bbf40,_0x7030a4=this[_0x49095b(0xb9d)]&&this[_0x49095b(0xb9d)][_0x49095b(0xa04)]();this[_0x49095b(0x766)]=(_0x7030a4?-0x1:0x1)*Math[_0x49095b(0x2c8)](this['scale']['x']);},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x2d7)]=function(_0x3b8b41,_0x15a6ed,_0x1286ca){const _0x2201fb=_0x5bbf40;if(!this[_0x2201fb(0x809)]())return;if(this[_0x2201fb(0x33a)]===_0x3b8b41)return;this['_targetFloatHeight']=_0x3b8b41,this[_0x2201fb(0x656)]=_0x15a6ed,this[_0x2201fb(0x596)]=_0x15a6ed,this[_0x2201fb(0x914)]=_0x1286ca||_0x2201fb(0x54c);if(_0x15a6ed<=0x0)this[_0x2201fb(0xb54)]=_0x3b8b41;},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x664)]=function(){const _0x2ce7cf=_0x5bbf40;if(this['_floatDuration']<=0x0)return;const _0x4a6765=this[_0x2ce7cf(0x656)],_0x514607=this[_0x2ce7cf(0x596)],_0x1a65cb=this[_0x2ce7cf(0x914)];Imported[_0x2ce7cf(0x25a)]?this[_0x2ce7cf(0xb54)]=this['applyEasing'](this[_0x2ce7cf(0xb54)],this['_targetFloatHeight'],_0x4a6765,_0x514607,_0x1a65cb):this['_floatHeight']=(this[_0x2ce7cf(0xb54)]*(_0x4a6765-0x1)+this[_0x2ce7cf(0x33a)])/_0x4a6765;this[_0x2ce7cf(0x656)]--;if(this['_floatDuration']<=0x0)this[_0x2ce7cf(0x72e)]();},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x72e)]=function(){const _0x19a0cd=_0x5bbf40;this[_0x19a0cd(0xb54)]=this['_targetFloatHeight'];},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x67b)]=function(){return this['_floatDuration']>0x0;},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x8d5)]=function(_0x26de5f,_0x298695){const _0x546565=_0x5bbf40;if(!this[_0x546565(0x809)]())return;if(_0x298695<=0x0)return;this[_0x546565(0x52b)]=_0x26de5f,this[_0x546565(0x3d0)]=_0x298695,this[_0x546565(0x813)]=_0x298695;},Sprite_Battler['prototype']['updateJump']=function(){const _0xbb3d43=_0x5bbf40;if(this[_0xbb3d43(0x3d0)]<=0x0)return;const _0x5894de=this[_0xbb3d43(0x813)]-this[_0xbb3d43(0x3d0)],_0x480f59=this[_0xbb3d43(0x813)]/0x2,_0x13fdea=this[_0xbb3d43(0x52b)],_0x392dda=-_0x13fdea/Math[_0xbb3d43(0x49d)](_0x480f59,0x2);this[_0xbb3d43(0x4d3)]=_0x392dda*Math['pow'](_0x5894de-_0x480f59,0x2)+_0x13fdea,this[_0xbb3d43(0x3d0)]--;if(this[_0xbb3d43(0x3d0)]<=0x0)return this[_0xbb3d43(0x43e)]();},Sprite_Battler['prototype']['onJumpEnd']=function(){const _0x1d7566=_0x5bbf40;this[_0x1d7566(0x4d3)]=0x0;},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x8cc)]=function(){const _0x44e53f=_0x5bbf40;return this[_0x44e53f(0x3d0)]>0x0;},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x7bc)]=function(_0x4ac5b1,_0xac163e,_0x1991cc){const _0x21ed71=_0x5bbf40;if(this['_targetOpacity']===_0x4ac5b1)return;this[_0x21ed71(0x92f)]=_0x4ac5b1,this[_0x21ed71(0x88a)]=_0xac163e,this['_opacityWholeDuration']=_0xac163e,this[_0x21ed71(0x988)]=_0x1991cc||'Linear';if(_0xac163e<=0x0)this[_0x21ed71(0x5d3)]=_0x4ac5b1;},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x651)]=function(){const _0x142ebe=_0x5bbf40;if(this[_0x142ebe(0xaad)][_0x142ebe(0x4e5)]===_0x142ebe(0xb2a))return;if(this[_0x142ebe(0x88a)]<=0x0)return;const _0x3e4a4d=this[_0x142ebe(0x88a)],_0x4f3b60=this[_0x142ebe(0x59e)],_0x3a68e4=this[_0x142ebe(0x988)];Imported[_0x142ebe(0x25a)]?this['opacity']=this[_0x142ebe(0x8d7)](this['opacity'],this[_0x142ebe(0x92f)],_0x3e4a4d,_0x4f3b60,_0x3a68e4):this[_0x142ebe(0x5d3)]=(this[_0x142ebe(0x5d3)]*(_0x3e4a4d-0x1)+this[_0x142ebe(0x92f)])/_0x3e4a4d;this[_0x142ebe(0x88a)]--;if(this[_0x142ebe(0x88a)]<=0x0)this['onOpacityEnd']();},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xb17)]=function(){const _0x52b231=_0x5bbf40;this['opacity']=this[_0x52b231(0x92f)];},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x5e4)]=function(){const _0x416ce7=_0x5bbf40;return this[_0x416ce7(0x88a)]>0x0;},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x5cb)]=function(){const _0x153ec1=_0x5bbf40;this[_0x153ec1(0x895)]['visible']=this[_0x153ec1(0xb9d)][_0x153ec1(0x37f)](),this['updateShadowPosition']();},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x313)]=function(){const _0x225c64=_0x5bbf40;if(!this[_0x225c64(0x895)])return;this[_0x225c64(0x895)]['y']=this['_baseY']-this['y']-0x2;},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x854)]=function(){const _0x29602a=_0x5bbf40;if(!this[_0x29602a(0xb9d)])return;this[_0x29602a(0x3fb)]=this[_0x29602a(0xb9d)][_0x29602a(0x759)](),this[_0x29602a(0x3c1)]=this[_0x29602a(0xb9d)]['battlerShadowScaleY']();},Game_BattlerBase['prototype'][_0x5bbf40(0x759)]=function(){const _0x183ba0=_0x5bbf40,_0x3b13b0=this[_0x183ba0(0xa32)]()?this[_0x183ba0(0x297)]():this[_0x183ba0(0x7f8)]();if(_0x3b13b0){const _0x5477c1=_0x3b13b0[_0x183ba0(0x509)];if(_0x5477c1[_0x183ba0(0x24d)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x5477c1[_0x183ba0(0x24d)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x5bbf40(0x68c)]['battlerShadowScaleY']=function(){const _0x26e31a=_0x5bbf40,_0x3ce4a1=this[_0x26e31a(0xa32)]()?this['actor']():this[_0x26e31a(0x7f8)]();if(_0x3ce4a1){const _0x217523=_0x3ce4a1['note'];if(_0x217523['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x217523[_0x26e31a(0x24d)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xb72)]=function(){const _0x1425d3=_0x5bbf40;if(this[_0x1425d3(0xaad)]===Sprite_SvEnemy)return;this['updateGrow'](),this[_0x1425d3(0x89c)]();},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x89c)]=function(){const _0x442298=_0x5bbf40,_0xf513c0=this[_0x442298(0x48d)];_0xf513c0&&(_0xf513c0[_0x442298(0x5f5)]['x']=this['mainSpriteScaleX'](),_0xf513c0[_0x442298(0x5f5)]['y']=this[_0x442298(0xa20)]());},Sprite_Battler['prototype'][_0x5bbf40(0x3d6)]=function(){const _0x2f13fb=_0x5bbf40;let _0x5178f0=0x1;return _0x5178f0*=this[_0x2f13fb(0x766)],_0x5178f0*=this[_0x2f13fb(0x98b)],_0x5178f0;},Sprite_Battler[_0x5bbf40(0x68c)]['mainSpriteScaleY']=function(){const _0x5c45ed=_0x5bbf40;return 0x1*this[_0x5c45ed(0xa1e)];},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x344)]=function(){const _0x5883bc=_0x5bbf40;return this[_0x5883bc(0x2fc)]*this[_0x5883bc(0x3d6)]();},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x3db)]=function(){const _0x18368f=_0x5bbf40;return this['height']*this[_0x18368f(0xa20)]();},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xa86)]=function(_0x12fb7c,_0x153a82,_0x394abe,_0x188eb5){const _0x347134=_0x5bbf40;if(!this['canMove']())return;if(!this[_0x347134(0x48d)])return;if(this['_targetGrowX']===_0x12fb7c&&this[_0x347134(0x2c3)]===_0x153a82)return;this[_0x347134(0xb7d)]=_0x12fb7c,this[_0x347134(0x2c3)]=_0x153a82,this['_growDuration']=_0x394abe,this[_0x347134(0x996)]=_0x394abe,this[_0x347134(0x8ee)]=_0x188eb5||_0x347134(0x54c),_0x394abe<=0x0&&(this[_0x347134(0x98b)]=this['_targetGrowX'],this['_growY']=this[_0x347134(0x2c3)]);},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x4df)]=function(){const _0x289c10=_0x5bbf40;if(this[_0x289c10(0x5f9)]<=0x0)return;if(!this[_0x289c10(0x48d)])return;const _0x317595=this['_growDuration'],_0x15d3a5=this[_0x289c10(0x996)],_0x4c0a60=this[_0x289c10(0x8ee)];Imported[_0x289c10(0x25a)]?(this[_0x289c10(0x98b)]=this[_0x289c10(0x8d7)](this[_0x289c10(0x98b)],this[_0x289c10(0xb7d)],_0x317595,_0x15d3a5,_0x4c0a60),this['_growY']=this['applyEasing'](this[_0x289c10(0xa1e)],this[_0x289c10(0x2c3)],_0x317595,_0x15d3a5,_0x4c0a60)):(this[_0x289c10(0x98b)]=(this[_0x289c10(0x98b)]*(_0x317595-0x1)+this[_0x289c10(0xb7d)])/_0x317595,this[_0x289c10(0xa1e)]=(this[_0x289c10(0xa1e)]*(_0x317595-0x1)+this[_0x289c10(0x2c3)])/_0x317595);this[_0x289c10(0x5f9)]--;if(this[_0x289c10(0x5f9)]<=0x0)this[_0x289c10(0x6de)]();},Sprite_Battler[_0x5bbf40(0x68c)]['onGrowEnd']=function(){const _0x2d272b=_0x5bbf40;this[_0x2d272b(0x98b)]=this[_0x2d272b(0xb7d)],this['_growY']=this[_0x2d272b(0x2c3)];},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x307)]=function(){const _0x5a4a54=_0x5bbf40;return this[_0x5a4a54(0x5f9)]>0x0;},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x9b7)]=function(_0x15d097,_0x550f94,_0xefdc9b,_0x1a63c8){const _0x2d8608=_0x5bbf40;if(!this[_0x2d8608(0x809)]())return;if(!this[_0x2d8608(0x48d)])return;if(this[_0x2d8608(0x985)]===_0x15d097&&this[_0x2d8608(0x295)]===_0x550f94)return;this['_targetSkewX']=_0x15d097,this[_0x2d8608(0x295)]=_0x550f94,this[_0x2d8608(0xafe)]=_0xefdc9b,this[_0x2d8608(0x47e)]=_0xefdc9b,this[_0x2d8608(0x825)]=_0x1a63c8||_0x2d8608(0x54c),_0xefdc9b<=0x0&&(this[_0x2d8608(0x48d)][_0x2d8608(0xb18)]['x']=this[_0x2d8608(0x985)],this[_0x2d8608(0x48d)][_0x2d8608(0xb18)]['y']=this[_0x2d8608(0x295)]);},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x78f)]=function(){const _0xa34ae2=_0x5bbf40;if(this[_0xa34ae2(0xafe)]<=0x0)return;if(!this[_0xa34ae2(0x48d)])return;const _0x41d2be=this[_0xa34ae2(0xafe)],_0x147477=this[_0xa34ae2(0x47e)],_0x46555b=this[_0xa34ae2(0x825)],_0x2259aa=this[_0xa34ae2(0x48d)];Imported[_0xa34ae2(0x25a)]?(_0x2259aa[_0xa34ae2(0xb18)]['x']=this['applyEasing'](_0x2259aa[_0xa34ae2(0xb18)]['x'],this['_targetSkewX'],_0x41d2be,_0x147477,_0x46555b),_0x2259aa[_0xa34ae2(0xb18)]['y']=this[_0xa34ae2(0x8d7)](_0x2259aa[_0xa34ae2(0xb18)]['y'],this['_targetSkewY'],_0x41d2be,_0x147477,_0x46555b)):(_0x2259aa[_0xa34ae2(0xb18)]['x']=(_0x2259aa[_0xa34ae2(0xb18)]['x']*(_0x41d2be-0x1)+this[_0xa34ae2(0x985)])/_0x41d2be,_0x2259aa['skew']['y']=(_0x2259aa[_0xa34ae2(0xb18)]['y']*(_0x41d2be-0x1)+this[_0xa34ae2(0x295)])/_0x41d2be);this[_0xa34ae2(0xafe)]--;if(this[_0xa34ae2(0xafe)]<=0x0)this[_0xa34ae2(0x8b0)]();},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x8b0)]=function(){const _0x2b2c4c=_0x5bbf40;this[_0x2b2c4c(0x48d)][_0x2b2c4c(0xb18)]['x']=this['_targetSkewX'],this['_distortionSprite'][_0x2b2c4c(0xb18)]['y']=this[_0x2b2c4c(0x295)];},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x397)]=function(){const _0x4c0570=_0x5bbf40;return this[_0x4c0570(0xafe)]>0x0;},Sprite_Battler['prototype'][_0x5bbf40(0x3a6)]=function(_0x31f675,_0x1088b4,_0x1b7b3d,_0x23834d){const _0x1e356d=_0x5bbf40;if(!this[_0x1e356d(0x809)]())return;if(!this[_0x1e356d(0x48d)])return;if(this[_0x1e356d(0x3cd)]===_0x31f675)return;this[_0x1e356d(0x3cd)]=_0x31f675,this[_0x1e356d(0x521)]=_0x1088b4,this[_0x1e356d(0xbfd)]=_0x1088b4,this[_0x1e356d(0xa6e)]=_0x1b7b3d||_0x1e356d(0x54c),this[_0x1e356d(0x486)]=_0x23834d,this[_0x1e356d(0x486)]===undefined&&(this[_0x1e356d(0x486)]=!![]),_0x1088b4<=0x0&&(this[_0x1e356d(0x957)]=_0x31f675,this[_0x1e356d(0x486)]&&(this[_0x1e356d(0x3cd)]=0x0,this['_currentAngle']=0x0));},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xb26)]=function(){this['updateAngleCalculations'](),this['applyAngleChange']();},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x979)]=function(){const _0x3227a4=_0x5bbf40;if(this[_0x3227a4(0x521)]<=0x0)return;const _0x39f41b=this[_0x3227a4(0x521)],_0x2ab309=this[_0x3227a4(0xbfd)],_0x8713b1=this[_0x3227a4(0xa6e)];Imported[_0x3227a4(0x25a)]?this[_0x3227a4(0x957)]=this[_0x3227a4(0x8d7)](this['_currentAngle'],this['_targetAngle'],_0x39f41b,_0x2ab309,_0x8713b1):this[_0x3227a4(0x957)]=(this[_0x3227a4(0x957)]*(_0x39f41b-0x1)+this[_0x3227a4(0x3cd)])/_0x39f41b;this[_0x3227a4(0x521)]--;if(this[_0x3227a4(0x521)]<=0x0)this[_0x3227a4(0x5ed)]();},Sprite_Battler[_0x5bbf40(0x68c)]['onAngleEnd']=function(){const _0x87373=_0x5bbf40;this[_0x87373(0x957)]=this[_0x87373(0x3cd)],this[_0x87373(0x486)]&&(this[_0x87373(0x3cd)]=0x0,this['_currentAngle']=0x0);},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x8b6)]=function(){return this['_angleDuration']>0x0;},Sprite_Battler['prototype']['applyAngleChange']=function(){const _0x57529a=_0x5bbf40;if(!this[_0x57529a(0x48d)])return;const _0x6cbfec=this[_0x57529a(0x957)],_0x434d1a=this[_0x57529a(0x5f5)]['x'],_0x207f4f=this[_0x57529a(0xb9d)]['isActor']()?-0x1:0x1;this['_distortionSprite']['angle']=_0x6cbfec*_0x434d1a*_0x207f4f;const _0x20ca3c=this['_distortionSprite'][_0x57529a(0x5f5)]['y'];this[_0x57529a(0x48d)]['y']=this[_0x57529a(0x570)]*-0.5*(0x2-_0x20ca3c),this[_0x57529a(0x48d)]['y']=Math[_0x57529a(0x95e)](this['_distortionSprite']['y']);const _0x344b27=[this[_0x57529a(0x24b)],this['_svBattlerSprite'],this[_0x57529a(0x23f)]];for(const _0x34e2eb of _0x344b27){if(!_0x34e2eb)continue;_0x34e2eb['y']=this[_0x57529a(0x570)]*0.5;}this[_0x57529a(0x895)]&&(this[_0x57529a(0x3fb)]=this['_shadowScaleX']??0x1,this[_0x57529a(0x3c1)]=this[_0x57529a(0x3c1)]??0x1,this[_0x57529a(0x895)]['scale']['x']=this['_distortionSprite'][_0x57529a(0x5f5)]['x']*this['_shadowScaleX'],this[_0x57529a(0x895)][_0x57529a(0x5f5)]['y']=this[_0x57529a(0x48d)][_0x57529a(0x5f5)]['y']*this[_0x57529a(0x3c1)]);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xa25)]=Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0xbf4)],Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0xbf4)]=function(){const _0x12a365=_0x5bbf40;VisuMZ[_0x12a365(0x7d9)]['Sprite_Actor_createStateSprite'][_0x12a365(0x86a)](this),VisuMZ[_0x12a365(0x7d9)][_0x12a365(0x8be)][_0x12a365(0x430)][_0x12a365(0x5c7)]&&this[_0x12a365(0x50f)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x252)]=Sprite_Enemy['prototype'][_0x5bbf40(0xbc3)],Sprite_Enemy[_0x5bbf40(0x68c)]['createStateIconSprite']=function(){const _0x4df5dd=_0x5bbf40;VisuMZ[_0x4df5dd(0x7d9)][_0x4df5dd(0x8be)][_0x4df5dd(0x430)][_0x4df5dd(0x6b0)]&&this['createHpGaugeSprite'](),VisuMZ[_0x4df5dd(0x7d9)][_0x4df5dd(0x252)]['call'](this);},Sprite_Battler['prototype'][_0x5bbf40(0x50f)]=function(){const _0x12ce8d=_0x5bbf40;if(!ConfigManager['visualHpGauge'])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x423021=VisuMZ[_0x12ce8d(0x7d9)][_0x12ce8d(0x8be)]['HpGauge'],_0x4d1609=new Sprite_HpGauge();_0x4d1609[_0x12ce8d(0x600)]['x']=_0x423021[_0x12ce8d(0xb2f)],_0x4d1609['anchor']['y']=_0x423021['AnchorY'],_0x4d1609[_0x12ce8d(0x5f5)]['x']=_0x4d1609['scale']['y']=_0x423021[_0x12ce8d(0x756)],this[_0x12ce8d(0xc02)]=_0x4d1609,this[_0x12ce8d(0x512)](this[_0x12ce8d(0xc02)]),Spriteset_Battle[_0x12ce8d(0x502)]&&BattleManager[_0x12ce8d(0xb5b)](this[_0x12ce8d(0xc02)]);},VisuMZ['BattleCore']['Sprite_Battler_setBattler']=Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x286)],Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x286)]=function(_0x324772){const _0x4e9ade=_0x5bbf40,_0x32e83c=this[_0x4e9ade(0xb9d)];VisuMZ[_0x4e9ade(0x7d9)][_0x4e9ade(0x865)][_0x4e9ade(0x86a)](this,_0x324772),this[_0x4e9ade(0x2d4)](_0x324772);if(_0x32e83c!==_0x324772)this[_0x4e9ade(0x854)]();},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x2d4)]=function(_0x8f572c){const _0x474870=_0x5bbf40;if(!_0x8f572c)return;if(!this['_hpGaugeSprite'])return;if(_0x8f572c[_0x474870(0xa32)]()){}else{if(_0x8f572c[_0x474870(0x37d)]()){if(this[_0x474870(0xaad)]===Sprite_SvEnemy&&!_0x8f572c[_0x474870(0x37f)]())return;}}this['_hpGaugeSprite'][_0x474870(0x39b)](_0x8f572c,'hp');},Sprite_Battler['prototype'][_0x5bbf40(0xac7)]=function(){const _0x418bdf=_0x5bbf40;return this[_0x418bdf(0xb9d)]&&this[_0x418bdf(0xb9d)][_0x418bdf(0xac7)]();},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x29d)]=function(){const _0x4ce9a8=_0x5bbf40,_0x1367ec=this[_0x4ce9a8(0x24b)][_0x4ce9a8(0xaa1)];if(!_0x1367ec)return;const _0x3d411b=_0x1367ec['width'];let _0x570504=_0x1367ec[_0x4ce9a8(0x570)];if(this['_battler']['isDead']()){if(this[_0x4ce9a8(0x7ce)])_0x570504=Math[_0x4ce9a8(0xb10)](0x0,this[_0x4ce9a8(0x7ce)][_0x4ce9a8(0x570)]-0x4);}this['_mainSprite'][_0x4ce9a8(0x92c)](0x0,0x0,_0x3d411b,_0x570504),this['setFrame'](0x0,0x0,_0x3d411b,_0x570504);},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x6a4)]=function(){const _0x25906e=_0x5bbf40;if(!this[_0x25906e(0xb9d)])return;if(!this[_0x25906e(0xc02)])return;const _0x4acd00=VisuMZ[_0x25906e(0x7d9)]['Settings'][_0x25906e(0x430)],_0xa6d8b8=this['_hpGaugeSprite'];_0xa6d8b8[_0x25906e(0x74c)]=this[_0x25906e(0x44b)]();const _0x129474=_0x4acd00[_0x25906e(0x294)],_0x14c69c=_0x4acd00[_0x25906e(0x41b)];_0xa6d8b8['x']=_0x129474,_0xa6d8b8['x']+=this[_0x25906e(0xb9d)][_0x25906e(0xb00)](),_0xa6d8b8['y']=-this[_0x25906e(0x570)]+_0x14c69c,_0xa6d8b8['y']+=this[_0x25906e(0xb9d)]['battleUIOffsetY'](),Spriteset_Battle[_0x25906e(0x502)]&&SceneManager[_0x25906e(0x2f2)][_0x25906e(0x3c3)]&&(_0xa6d8b8['x']+=this['x'],_0xa6d8b8['y']+=this['y']);},Sprite_Battler['prototype'][_0x5bbf40(0x44b)]=function(){const _0x5c0e05=_0x5bbf40;if(!this[_0x5c0e05(0xb9d)])return![];if(this[_0x5c0e05(0xb9d)][_0x5c0e05(0xa32)]())return!![];if(this[_0x5c0e05(0xb9d)][_0x5c0e05(0x847)]())return![];if(this[_0x5c0e05(0x5d3)]<=0x0)return![];const _0x3229b7=this[_0x5c0e05(0xb9d)][_0x5c0e05(0x7f8)]()[_0x5c0e05(0x509)];if(_0x3229b7[_0x5c0e05(0x24d)](/<SHOW HP GAUGE>/i))return!![];if(_0x3229b7[_0x5c0e05(0x24d)](/<HIDE HP GAUGE>/i))return![];const _0x2c6066=VisuMZ[_0x5c0e05(0x7d9)][_0x5c0e05(0x8be)][_0x5c0e05(0x430)];if(_0x2c6066[_0x5c0e05(0x930)]){if(_0x2c6066['BTestBypass']&&BattleManager[_0x5c0e05(0xc01)]())return!![];if(this[_0x5c0e05(0xb9d)][_0x5c0e05(0xac9)])return![];return this[_0x5c0e05(0xb9d)][_0x5c0e05(0xb7f)]();}return!![];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x987)]=Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x224)],Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x224)]=function(){const _0x6da505=_0x5bbf40;if(!this[_0x6da505(0xb9d)])return![];if(this[_0x6da505(0x39d)]>0x0)return!![];return VisuMZ[_0x6da505(0x7d9)][_0x6da505(0x987)][_0x6da505(0x86a)](this);},VisuMZ['BattleCore'][_0x5bbf40(0x7d1)]=Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x2bf)],Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x2bf)]=function(_0x1b18dd,_0x599b90,_0x1e0a6f){const _0xf88726=_0x5bbf40;this[_0xf88726(0x809)]()&&VisuMZ['BattleCore'][_0xf88726(0x7d1)][_0xf88726(0x86a)](this,_0x1b18dd,_0x599b90,_0x1e0a6f);},Sprite_Battler['prototype'][_0x5bbf40(0x809)]=function(){const _0x5eb774=_0x5bbf40;if(this[_0x5eb774(0xb9d)]&&this[_0x5eb774(0xb9d)][_0x5eb774(0x724)]())return![];if(this[_0x5eb774(0xb9d)]&&!this[_0x5eb774(0xb9d)][_0x5eb774(0x841)]())return![];return $gameSystem['isSideView']();},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x3f0)]=function(){},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x916)]=function(){const _0x5238b1=_0x5bbf40;this[_0x5238b1(0x2bf)](0x0,0x0,0xc);},Sprite_Battler['prototype']['retreat']=function(){},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0x2b9)]=function(){const _0x346d0d=_0x5bbf40,_0x441bdd=VisuMZ['BattleCore'][_0x346d0d(0x8be)][_0x346d0d(0x9a5)],_0x4ee08b=this['_battler']&&this[_0x346d0d(0xb9d)][_0x346d0d(0xa32)]()?0x1:-0x1,_0x504a5e=this[_0x346d0d(0x72f)]-this[_0x346d0d(0x8f6)]+_0x4ee08b*_0x441bdd['FlinchDistanceX'],_0x4aaa1b=this[_0x346d0d(0x4f3)]-this[_0x346d0d(0x54e)]+_0x4ee08b*_0x441bdd[_0x346d0d(0x989)],_0x6ab3f2=_0x441bdd['FlinchDuration'];this['startMove'](_0x504a5e,_0x4aaa1b,_0x6ab3f2);},Sprite_Battler['prototype']['startShakeFlinch']=function(_0x446b56,_0x3a36e1){const _0x11dcf3=_0x5bbf40,_0x4e7caf=VisuMZ[_0x11dcf3(0x7d9)][_0x11dcf3(0x8be)][_0x11dcf3(0x9a5)];this[_0x11dcf3(0x844)]=Math[_0x11dcf3(0x95e)]((_0x4e7caf['ShakeFlinchDuration']??0x18)*_0x3a36e1),this[_0x11dcf3(0x239)]=Math[_0x11dcf3(0xb10)](this[_0x11dcf3(0x239)],_0x446b56);},Sprite_Battler[_0x5bbf40(0x68c)][_0x5bbf40(0xbd1)]=function(){const _0x246e74=_0x5bbf40,_0x1d660b=VisuMZ['BattleCore']['Settings']['Actor'];if(!(_0x1d660b[_0x246e74(0xb52)]??![]))return;if(this['_shakeFlinchDuration']>0x0){const _0x462a3f=this[_0x246e74(0x844)];this[_0x246e74(0x239)]=this[_0x246e74(0x239)]*(_0x462a3f-0x1)/_0x462a3f,this[_0x246e74(0x844)]--,this[_0x246e74(0x844)]<=0x0&&(this['_shakeFlinchPower']=0x0);}this['_shakeFlinchPower']>0x0?(this[_0x246e74(0x24b)]['x']=Math[_0x246e74(0xac8)](this[_0x246e74(0x239)])*(Math[_0x246e74(0x2ff)]()<0.5?-0x1:0x1),this['_baseY']!==this['y']&&(this[_0x246e74(0x24b)]['y']=this[_0x246e74(0x570)]*0.5,this[_0x246e74(0x24b)]['y']+=Math[_0x246e74(0xac8)](this[_0x246e74(0x239)])*(Math['random']()<0.5?-0x1:0x1))):(this['_mainSprite']['x']=0x0,this['_mainSprite']['y']=this[_0x246e74(0x570)]*0.5);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x63f)]=Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x64e)],Sprite_Actor['prototype'][_0x5bbf40(0x64e)]=function(){const _0x12abb3=_0x5bbf40;VisuMZ[_0x12abb3(0x7d9)][_0x12abb3(0x63f)][_0x12abb3(0x86a)](this),this['attachSpritesToDistortionSprite']();},Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x2a7)]=function(){const _0x5c3824=_0x5bbf40;return this[_0x5c3824(0x48d)]||this[_0x5c3824(0x24b)]||this;},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x53d)]=Sprite_Actor['prototype'][_0x5bbf40(0x859)],Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x859)]=function(){},Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0xa02)]=function(_0x2bb4d5){const _0x44764d=_0x5bbf40;if(SceneManager[_0x44764d(0x735)]())return;if(!_0x2bb4d5)return;if(!_0x2bb4d5[_0x44764d(0x809)]())return;VisuMZ[_0x44764d(0x7d9)][_0x44764d(0x53d)][_0x44764d(0x86a)](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xb13)]=Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x2c9)],Sprite_Actor['prototype'][_0x5bbf40(0x2c9)]=function(_0x40e4ca){const _0x575d09=_0x5bbf40;VisuMZ['BattleCore'][_0x575d09(0x8be)][_0x575d09(0x9a5)][_0x575d09(0x40b)]?VisuMZ['BattleCore'][_0x575d09(0x8be)][_0x575d09(0x9a5)][_0x575d09(0x40b)][_0x575d09(0x86a)](this,_0x40e4ca):VisuMZ[_0x575d09(0x7d9)]['Sprite_Actor_setActorHome'][_0x575d09(0x86a)](this,_0x40e4ca);},VisuMZ[_0x5bbf40(0x7d9)]['Sprite_Actor_setBattler']=Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x286)],Sprite_Actor[_0x5bbf40(0x68c)]['setBattler']=function(_0x1a849c){const _0x4aaf96=_0x5bbf40;VisuMZ[_0x4aaf96(0x7d9)][_0x4aaf96(0x9f3)][_0x4aaf96(0x86a)](this,_0x1a849c),this['setBattlerBattleCore'](_0x1a849c);},Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x772)]=function(_0x6e31d){const _0x18cfb7=_0x5bbf40;if(!_0x6e31d)return;if(!this[_0x18cfb7(0x24b)])return;this[_0x18cfb7(0x24b)]['anchor']['x']=this[_0x18cfb7(0x8b9)]['svBattlerAnchorX'](),this[_0x18cfb7(0x24b)][_0x18cfb7(0x600)]['y']=this[_0x18cfb7(0x8b9)][_0x18cfb7(0x501)](),this[_0x18cfb7(0x9b1)]();},VisuMZ['BattleCore'][_0x5bbf40(0xb45)]=Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x69a)],Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x69a)]=function(){const _0xbacc6e=_0x5bbf40;VisuMZ[_0xbacc6e(0x7d9)]['Sprite_Actor_update'][_0xbacc6e(0x86a)](this),this[_0xbacc6e(0x8b9)]&&(this[_0xbacc6e(0x93f)](),this[_0xbacc6e(0x7d2)]());},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x35e)]=Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x775)],Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x775)]=function(){const _0x3d4dea=_0x5bbf40;VisuMZ[_0x3d4dea(0x7d9)][_0x3d4dea(0x35e)][_0x3d4dea(0x86a)](this),this[_0x3d4dea(0x24b)]&&this[_0x3d4dea(0x24b)][_0x3d4dea(0xaa1)]&&this['_battler']&&(this[_0x3d4dea(0x24b)]['bitmap'][_0x3d4dea(0x827)]!==this[_0x3d4dea(0xb9d)][_0x3d4dea(0x5c1)]()&&(this[_0x3d4dea(0x24b)][_0x3d4dea(0xaa1)]['smooth']=this['_battler'][_0x3d4dea(0x5c1)]()));},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x743)]=Sprite_Actor['prototype'][_0x5bbf40(0x5cb)],Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x5cb)]=function(){const _0x536e3e=_0x5bbf40;VisuMZ['BattleCore'][_0x536e3e(0x743)][_0x536e3e(0x86a)](this),this[_0x536e3e(0x682)]();},Sprite_Actor['prototype'][_0x5bbf40(0x682)]=function(){const _0x551e66=_0x5bbf40;if(!this['_mainSprite'])return;if(!this[_0x551e66(0x895)])return;this[_0x551e66(0x9b1)](),this[_0x551e66(0x313)]();},Sprite_Actor[_0x5bbf40(0x68c)]['updateStateSprite']=function(){const _0x219b0e=_0x5bbf40;{this[_0x219b0e(0x85d)][_0x219b0e(0x5f5)]['x']=0x1/(this[_0x219b0e(0x5f5)]['x']||0.001),this['_stateSprite']['scale']['y']=0x1/(this['scale']['y']||0.001);}{this['_stateSprite']['x']=0x0,this['_stateSprite']['y']=-this[_0x219b0e(0x570)]-0x20+0x60;const _0x4cf2f8=VisuMZ['BattleCore'][_0x219b0e(0x8be)]['Actor'];this[_0x219b0e(0x85d)]['x']+=_0x4cf2f8[_0x219b0e(0x76d)]??0x0,this[_0x219b0e(0x85d)]['y']+=_0x4cf2f8[_0x219b0e(0x5d2)]??0x0;}},Sprite_Actor[_0x5bbf40(0x68c)]['updateStyleOpacity']=function(){const _0x8e399e=_0x5bbf40;if(!$gameSystem[_0x8e399e(0xb7a)]()&&this[_0x8e399e(0xaad)]===Sprite_Actor){const _0x1392cd=Scene_Battle['prototype'][_0x8e399e(0x6e0)]();[_0x8e399e(0x81f),_0x8e399e(0x62f),_0x8e399e(0x20a),_0x8e399e(0x7e8)][_0x8e399e(0x608)](_0x1392cd)&&(this[_0x8e399e(0x5d3)]=0x0);}},Sprite_Actor['prototype'][_0x5bbf40(0xb74)]=function(){const _0x26a28a=_0x5bbf40,_0x1572cb=this[_0x26a28a(0x8b9)];if(_0x1572cb){if(_0x1572cb[_0x26a28a(0x796)])return;const _0x51f9dd=_0x1572cb[_0x26a28a(0xbe6)]();if(_0x1572cb[_0x26a28a(0x818)]()||_0x1572cb[_0x26a28a(0xb7e)]())this[_0x26a28a(0xb49)]('walk');else{if(_0x51f9dd===0x3)this['startMotion'](_0x26a28a(0x8b2));else{if(_0x51f9dd===0x2)this[_0x26a28a(0xb49)](_0x26a28a(0x250));else{if(this[_0x26a28a(0x831)])this[_0x26a28a(0xb49)](_0x26a28a(0x8f3));else{if(_0x1572cb['isCharging']())this['startMotion'](_0x26a28a(0x7f0));else{if(_0x1572cb['isChanting']())this['startMotion'](_0x26a28a(0x6d7));else{if(_0x1572cb['isGuard']()||_0x1572cb[_0x26a28a(0xa90)]())this[_0x26a28a(0xb49)](_0x26a28a(0x2c0));else{if(_0x51f9dd===0x1)this['startMotion'](_0x26a28a(0x9ee));else{if(_0x1572cb[_0x26a28a(0x4e6)]())this[_0x26a28a(0xb49)](_0x26a28a(0x745));else{if(_0x1572cb[_0x26a28a(0x33f)]())this[_0x26a28a(0xb49)](_0x26a28a(0x672));else _0x1572cb[_0x26a28a(0x452)]()?this[_0x26a28a(0xb49)](_0x26a28a(0x7f0)):this[_0x26a28a(0xb49)](_0x26a28a(0x672));}}}}}}}}}}},Sprite_Actor['prototype'][_0x5bbf40(0x36f)]=function(){const _0x3079e5=_0x5bbf40,_0x5b2f36=0xa,_0x363e6a=0x12c*_0x5b2f36,_0x9cfda7=0x1e*_0x5b2f36;this[_0x3079e5(0x2bf)](_0x363e6a,0x0,_0x9cfda7);},Sprite_Actor['prototype'][_0x5bbf40(0x2e3)]=function(){const _0x762cec=_0x5bbf40;Sprite_Battler[_0x762cec(0x68c)][_0x762cec(0x2e3)][_0x762cec(0x86a)](this);},Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0xb98)]=function(){const _0x5f0ace=_0x5bbf40;return Sprite_Battler[_0x5f0ace(0x58f)];},Sprite_Weapon[_0x5bbf40(0x68c)]['animationWait']=function(){const _0x462a45=_0x5bbf40;return Sprite_Battler[_0x462a45(0x58f)];},Sprite_Actor['prototype'][_0x5bbf40(0x38b)]=function(){},Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x8d8)]=function(){},Sprite_Actor['prototype'][_0x5bbf40(0x7c4)]=function(){const _0x4a53ac=_0x5bbf40;if(this[_0x4a53ac(0xae0)]&&++this[_0x4a53ac(0xb1a)]>=this[_0x4a53ac(0xb98)]()){if(this['_motion'][_0x4a53ac(0x3bd)])this['_pattern']=(this[_0x4a53ac(0x85a)]+0x1)%0x4;else{if(this[_0x4a53ac(0x85a)]<0x2)this['_pattern']++;else{const _0x155e01=this[_0x4a53ac(0x8b9)];if(_0x155e01)_0x155e01[_0x4a53ac(0x796)]=undefined;this['refreshMotion']();}}this[_0x4a53ac(0xb1a)]=0x0;}},Sprite_Actor[_0x5bbf40(0x68c)]['forceMotion']=function(_0x1fc02d){const _0x291825=_0x5bbf40;if(this[_0x291825(0xb9d)]&&this[_0x291825(0xb9d)][_0x291825(0x724)]()){this[_0x291825(0xae0)]=Sprite_Actor[_0x291825(0x3ff)][_0x291825(0x8b2)];return;}const _0x314e85=Sprite_Actor[_0x291825(0x3ff)][_0x1fc02d];this[_0x291825(0xae0)]=_0x314e85,this[_0x291825(0xb1a)]=0x0,this[_0x291825(0x85a)]=0x0;},Sprite_Actor['prototype'][_0x5bbf40(0x68b)]=function(_0x3a062f){const _0x1e1f91=_0x5bbf40;if(this['hasStaticSvBattler']())return;this['adjustWeaponSpriteOffset'](),this[_0x1e1f91(0x9ba)][_0x1e1f91(0x39b)](_0x3a062f),this[_0x1e1f91(0x8b9)]['clearWeaponAnimation']();},Sprite_Actor[_0x5bbf40(0x68c)]['adjustWeaponSpriteOffset']=function(){const _0x245bbd=_0x5bbf40;let _0x3d0b42=-0x10,_0x55b044=this[_0x245bbd(0x570)]*0.5;const _0x1a57b7=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x2d276e=this[_0x245bbd(0xb9d)][_0x245bbd(0x4c8)]()[_0x245bbd(0x6d6)](_0x26671d=>_0x26671d&&_0x26671d[_0x245bbd(0x509)][_0x245bbd(0x24d)](_0x1a57b7)?Number(RegExp['$1']):0x0),_0x4efce0=this['_battler'][_0x245bbd(0x4c8)]()[_0x245bbd(0x6d6)](_0x270ec6=>_0x270ec6&&_0x270ec6[_0x245bbd(0x509)][_0x245bbd(0x24d)](_0x1a57b7)?Number(RegExp['$2']):0x0);_0x3d0b42=_0x2d276e[_0x245bbd(0xb3f)]((_0x35ee8b,_0xbaca0)=>_0x35ee8b+_0xbaca0,_0x3d0b42),_0x55b044=_0x4efce0[_0x245bbd(0xb3f)]((_0x1e689b,_0x2e4424)=>_0x1e689b+_0x2e4424,_0x55b044),this[_0x245bbd(0x9ba)]['x']=_0x3d0b42,this['_weaponSprite']['y']=_0x55b044,this[_0x245bbd(0x9ba)][_0x245bbd(0x69a)]();},Sprite_Weapon['prototype'][_0x5bbf40(0x39b)]=function(_0x131253){const _0x16e0e5=_0x5bbf40;this['_weaponImageId']=_0x131253,this[_0x16e0e5(0xb43)]=-0x1,this[_0x16e0e5(0x85a)]=0x0,this['loadBitmap'](),this[_0x16e0e5(0x21f)]();},Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x80a)]=function(){},Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x3f0)]=function(){const _0x2d1bc4=_0x5bbf40,_0xf63a4f=VisuMZ[_0x2d1bc4(0x7d9)][_0x2d1bc4(0x8be)][_0x2d1bc4(0x410)],_0x1f8ae5=_0xf63a4f[_0x2d1bc4(0x96b)],_0x3c63ee=_0xf63a4f[_0x2d1bc4(0x6bd)],_0x34d7c7=_0xf63a4f[_0x2d1bc4(0x309)];this[_0x2d1bc4(0x2bf)](-_0x1f8ae5,-_0x3c63ee,_0x34d7c7);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x2d0)]=Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x21f)],Sprite_Actor['prototype']['updateFrame']=function(){const _0x5da220=_0x5bbf40;this['hasStaticSvBattler']()?this[_0x5da220(0x29d)]():(this[_0x5da220(0x41c)](),VisuMZ[_0x5da220(0x7d9)][_0x5da220(0x2d0)]['call'](this));},Sprite_Actor[_0x5bbf40(0x68c)][_0x5bbf40(0x41c)]=function(){const _0x2f7b2c=_0x5bbf40;if(this[_0x2f7b2c(0xb9d)]&&this[_0x2f7b2c(0xb9d)][_0x2f7b2c(0x3c5)]){const _0x201187=this[_0x2f7b2c(0xb9d)][_0x2f7b2c(0x3c5)];this['_motion']=Sprite_Actor[_0x2f7b2c(0x3ff)][_0x201187[_0x2f7b2c(0x9db)]],this['_pattern']=_0x201187[_0x2f7b2c(0xa88)];const _0x515503=this[_0x2f7b2c(0x9ba)];_0x515503[_0x2f7b2c(0xa67)](_0x201187[_0x2f7b2c(0xa5b)],_0x201187['pattern']),this[_0x2f7b2c(0xa7c)]();}},Sprite_Weapon[_0x5bbf40(0x68c)][_0x5bbf40(0xa67)]=function(_0x35e3d3,_0x55c370){const _0x1afa77=_0x5bbf40;this[_0x1afa77(0x2c4)]=_0x35e3d3,this['_animationCount']=-Infinity,this[_0x1afa77(0x85a)]=_0x55c370,this['loadBitmap'](),this[_0x1afa77(0x21f)]();},Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x64e)]=function(){const _0x335a53=_0x5bbf40;Sprite_Battler[_0x335a53(0x68c)][_0x335a53(0x64e)][_0x335a53(0x86a)](this),this['_enemy']=null,this[_0x335a53(0x4b6)]=![],this[_0x335a53(0xa58)]='',this[_0x335a53(0x396)]=0x0,this[_0x335a53(0x4b5)]=null,this[_0x335a53(0x3e7)]=0x0,this['_shake']=0x0,this[_0x335a53(0x7ca)](),this[_0x335a53(0xbc3)]();},VisuMZ['BattleCore'][_0x5bbf40(0x673)]=Sprite_Enemy['prototype'][_0x5bbf40(0x69a)],Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x69a)]=function(){const _0x9ede29=_0x5bbf40;VisuMZ[_0x9ede29(0x7d9)][_0x9ede29(0x673)][_0x9ede29(0x86a)](this),this[_0x9ede29(0x9b1)](),this[_0x9ede29(0xc14)]();},Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x7ca)]=function(){const _0xd211e5=_0x5bbf40;this[_0xd211e5(0x24b)]=new Sprite(),this[_0xd211e5(0x24b)][_0xd211e5(0x600)]['x']=0.5,this['_mainSprite']['anchor']['y']=0x1,this[_0xd211e5(0x512)](this[_0xd211e5(0x24b)]),this[_0xd211e5(0x328)]();},Sprite_Enemy['prototype']['mainSprite']=function(){const _0x2a9b2a=_0x5bbf40;return this[_0x2a9b2a(0x48d)]||this['_mainSprite']||this;},Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x3c6)]=function(_0x1fc79a){const _0x31cbe8=_0x5bbf40;this[_0x31cbe8(0xaa1)]=new Bitmap(0x1,0x1);if(this['hasSvBattler']()){const _0x7cf674=this[_0x31cbe8(0x3ca)][_0x31cbe8(0x325)]();this[_0x31cbe8(0xaa1)]=new Bitmap(_0x7cf674['width'],_0x7cf674['height']),this['_mainSprite']['bitmap']=new Bitmap(0x1,0x1);}else{if($gameSystem['isSideView']()){const _0x2db4b9=ImageManager['loadSvEnemy'](_0x1fc79a);_0x2db4b9[_0x31cbe8(0x64f)](this[_0x31cbe8(0x4d7)][_0x31cbe8(0x840)](this,_0x2db4b9));}else{const _0x4e0b5d=ImageManager[_0x31cbe8(0x2b8)](_0x1fc79a);_0x4e0b5d[_0x31cbe8(0x64f)](this[_0x31cbe8(0x4d7)][_0x31cbe8(0x840)](this,_0x4e0b5d));}}},Sprite_Enemy['prototype'][_0x5bbf40(0x4d7)]=function(_0xf7d450){const _0x3c8e8c=_0x5bbf40;this['_mainSprite'][_0x3c8e8c(0xaa1)]=_0xf7d450,this[_0x3c8e8c(0xaa1)]=new Bitmap(_0xf7d450['width'],_0xf7d450[_0x3c8e8c(0x570)]);},VisuMZ['BattleCore'][_0x5bbf40(0xbb8)]=Sprite_Enemy['prototype'][_0x5bbf40(0xafa)],Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0xafa)]=function(_0x38fcce){const _0x4bd785=_0x5bbf40;this[_0x4bd785(0x24b)]&&this[_0x4bd785(0x24b)][_0x4bd785(0xafa)](_0x38fcce);},VisuMZ['BattleCore']['Sprite_Enemy_initVisibility']=Sprite_Enemy['prototype'][_0x5bbf40(0xaea)],Sprite_Enemy[_0x5bbf40(0x68c)]['initVisibility']=function(){const _0x36955c=_0x5bbf40;this[_0x36955c(0x4b3)]()?VisuMZ['BattleCore'][_0x36955c(0x874)]['call'](this):(this[_0x36955c(0x4b6)]=!this[_0x36955c(0x3ca)][_0x36955c(0x847)](),!this[_0x36955c(0x4b6)]&&(this[_0x36955c(0x5d3)]=0x0));},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x540)]=Sprite_Enemy[_0x5bbf40(0x68c)]['updateCollapse'],Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x2a4)]=function(){const _0x2e4e48=_0x5bbf40;if(this[_0x2e4e48(0x4b3)]())VisuMZ['BattleCore'][_0x2e4e48(0x540)]['call'](this);},Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x21f)]=function(){const _0x48eebe=_0x5bbf40;Sprite_Battler[_0x48eebe(0x68c)][_0x48eebe(0x21f)][_0x48eebe(0x86a)](this);const _0x1ac77b=this[_0x48eebe(0x2a7)]()||this;if(!_0x1ac77b)return;!_0x1ac77b['bitmap']&&(_0x1ac77b[_0x48eebe(0xaa1)]=new Bitmap(this[_0x48eebe(0x2fc)]||0x1,this[_0x48eebe(0x570)]||0x1));if(this[_0x48eebe(0x4b5)]===_0x48eebe(0x9ad))this['_mainSprite'][_0x48eebe(0x92c)](0x0,0x0,this[_0x48eebe(0x24b)]['width']||0x1,this['_effectDuration']);else{let _0x4380ad=0x1;if(_0x1ac77b&&_0x1ac77b[_0x48eebe(0xaa1)])_0x4380ad=_0x1ac77b[_0x48eebe(0xaa1)][_0x48eebe(0x2fc)];let _0x5eba82=0x1;if(this[_0x48eebe(0xaa1)])_0x5eba82=this[_0x48eebe(0xaa1)][_0x48eebe(0x570)];_0x1ac77b[_0x48eebe(0x92c)](0x0,0x0,_0x4380ad,_0x5eba82);}},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x45e)]=Sprite_Enemy['prototype'][_0x5bbf40(0x49a)],Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x49a)]=function(){const _0x4d24a1=_0x5bbf40;if(this[_0x4d24a1(0x4b3)]())VisuMZ['BattleCore'][_0x4d24a1(0x45e)][_0x4d24a1(0x86a)](this);},Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x224)]=function(){const _0x985f59=_0x5bbf40;return Sprite_Battler[_0x985f59(0x68c)][_0x985f59(0x224)]['call'](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xa6d)]=Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x93f)],Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x93f)]=function(){const _0x3f576d=_0x5bbf40;VisuMZ['BattleCore']['Sprite_Enemy_updateStateSprite'][_0x3f576d(0x86a)](this),this[_0x3f576d(0x626)]();},Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x626)]=function(){const _0x2476d3=_0x5bbf40,_0x3f6dc3=VisuMZ[_0x2476d3(0x7d9)][_0x2476d3(0x8be)][_0x2476d3(0x51a)];if(_0x3f6dc3['NameAttachStateIcon']&&!_0x3f6dc3[_0x2476d3(0x6eb)]){this[_0x2476d3(0xa19)][_0x2476d3(0x5d3)]=0x0;return;}this['_stateIconSprite']['x']=0x0,this['_stateIconSprite']['x']+=this[_0x2476d3(0xb9d)][_0x2476d3(0xb00)]();let _0x3decef=0x1;if(this['bitmap'])_0x3decef=this[_0x2476d3(0xaa1)][_0x2476d3(0x570)];this[_0x2476d3(0xa19)]['y']=-_0x3decef-this[_0x2476d3(0xa19)]['height']-0x4,this[_0x2476d3(0xa19)]['y']+=this[_0x2476d3(0xb9d)][_0x2476d3(0xa2a)](),this[_0x2476d3(0xa19)]['scale']['x']=0x1/(this['scale']['x']||0.001),this[_0x2476d3(0xa19)][_0x2476d3(0x5f5)]['y']=0x1/(this[_0x2476d3(0x5f5)]['y']||0.001),this[_0x2476d3(0x37f)]()&&(this[_0x2476d3(0xb25)]['_stateSprite'][_0x2476d3(0x5f5)]['x']=-0x1/(this[_0x2476d3(0x5f5)]['x']||0.001),this[_0x2476d3(0xb25)][_0x2476d3(0x85d)][_0x2476d3(0x5f5)]['y']=0x1/(this['scale']['y']||0.001));},Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0xc14)]=function(){const _0x2bc1eb=_0x5bbf40;this[_0x2bc1eb(0xb9d)]&&this[_0x2bc1eb(0xb9d)][_0x2bc1eb(0xc14)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xa03)]=Sprite_Enemy[_0x5bbf40(0x68c)]['setBattler'],Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x286)]=function(_0x19701f){const _0x2b23dd=_0x5bbf40;VisuMZ['BattleCore'][_0x2b23dd(0xa03)][_0x2b23dd(0x86a)](this,_0x19701f),this[_0x2b23dd(0x453)](_0x19701f);},Sprite_Enemy['prototype'][_0x5bbf40(0x453)]=function(_0x3bad90){const _0x212eed=_0x5bbf40;!this['_svBattlerSprite']&&(this[_0x212eed(0xb25)]=new Sprite_SvEnemy(_0x3bad90),this[_0x212eed(0x328)]()),this[_0x212eed(0xb25)][_0x212eed(0x286)](_0x3bad90);},Sprite_Enemy[_0x5bbf40(0x68c)]['hasSvBattler']=function(){const _0x3866cb=_0x5bbf40;return this['_enemy']&&this[_0x3866cb(0x3ca)][_0x3866cb(0x37f)]();},Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x4b3)]=function(){const _0x26822b=_0x5bbf40;return this['hasSvBattler']()?this[_0x26822b(0x3ca)]['allowCollapse']():!![];},Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0xb74)]=function(){const _0x552155=_0x5bbf40;this['hasSvBattler']()&&this[_0x552155(0xb25)][_0x552155(0xb74)]();},Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0xbe2)]=function(_0x10fbfc){const _0xd19ef8=_0x5bbf40;if(this[_0xd19ef8(0x37f)]())this['_svBattlerSprite']['forceMotion'](_0x10fbfc);},Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x68b)]=function(_0x21b7be){const _0x308cd9=_0x5bbf40;if(this[_0x308cd9(0x37f)]())this[_0x308cd9(0xb25)]['forceWeaponAnimation'](_0x21b7be);},Sprite_Enemy[_0x5bbf40(0x68c)][_0x5bbf40(0x3f0)]=function(){const _0x32872d=_0x5bbf40,_0x5adf8d=VisuMZ['BattleCore'][_0x32872d(0x8be)][_0x32872d(0x410)],_0x5e8ec4=_0x5adf8d[_0x32872d(0x96b)],_0x5e5df4=_0x5adf8d['StepDistanceY'],_0x5c1af8=_0x5adf8d[_0x32872d(0x309)];this[_0x32872d(0x2bf)](_0x5e8ec4,_0x5e5df4,_0x5c1af8);};function Sprite_SvEnemy(){const _0x20bebd=_0x5bbf40;this[_0x20bebd(0x3bb)](...arguments);}Sprite_SvEnemy[_0x5bbf40(0x68c)]=Object[_0x5bbf40(0x6c2)](Sprite_Actor[_0x5bbf40(0x68c)]),Sprite_SvEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0xaad)]=Sprite_SvEnemy,Sprite_SvEnemy['prototype'][_0x5bbf40(0x3bb)]=function(_0xf8a7a){const _0x3dd1f7=_0x5bbf40;Sprite_Actor['prototype'][_0x3dd1f7(0x3bb)]['call'](this,_0xf8a7a),this['scale']['x']=-0x1,this[_0x3dd1f7(0x85d)][_0x3dd1f7(0x5f5)]['x']=-0x1;},Sprite_SvEnemy[_0x5bbf40(0x68c)]['createShadowSprite']=function(){},Sprite_SvEnemy[_0x5bbf40(0x68c)]['moveToStartPosition']=function(){},Sprite_SvEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0x2c9)]=function(_0x500360){},Sprite_SvEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0x5cb)]=function(){},Sprite_SvEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0x313)]=function(){},Sprite_SvEnemy['prototype'][_0x5bbf40(0x93f)]=function(){const _0x38775c=_0x5bbf40;this[_0x38775c(0x85d)][_0x38775c(0x74c)]=![];},Sprite_SvEnemy['prototype'][_0x5bbf40(0x775)]=function(){const _0x19681b=_0x5bbf40;Sprite_Battler[_0x19681b(0x68c)][_0x19681b(0x775)]['call'](this);const _0x1537c8=this[_0x19681b(0x8b9)][_0x19681b(0x6fd)]();this[_0x19681b(0xa58)]!==_0x1537c8&&(this[_0x19681b(0xa58)]=_0x1537c8,this[_0x19681b(0x24b)][_0x19681b(0xaa1)]=ImageManager[_0x19681b(0x35a)](_0x1537c8)),this[_0x19681b(0x24b)]&&this['_mainSprite']['bitmap']&&this['_battler']&&(this['_mainSprite'][_0x19681b(0xaa1)][_0x19681b(0x827)]!==this[_0x19681b(0xb9d)][_0x19681b(0x5c1)]()&&(this['_mainSprite'][_0x19681b(0xaa1)][_0x19681b(0x827)]=this['_battler'][_0x19681b(0x5c1)]()));},Sprite_SvEnemy['prototype'][_0x5bbf40(0x36f)]=function(){},Sprite_SvEnemy[_0x5bbf40(0x68c)]['startMove']=function(_0x2ce2b3,_0xd077a8,_0x38e696){const _0x31a686=_0x5bbf40;if(this['parent'])this[_0x31a686(0x25e)][_0x31a686(0x2bf)](_0x2ce2b3,_0xd077a8,_0x38e696);},Sprite_SvEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0xb74)]=function(){const _0x1152b9=_0x5bbf40,_0x4b2716=this[_0x1152b9(0x8b9)];if(_0x4b2716){const _0x26fb2c=_0x4b2716[_0x1152b9(0xbe6)]();if(_0x4b2716[_0x1152b9(0x818)]()||_0x4b2716[_0x1152b9(0xb7e)]())this[_0x1152b9(0xb49)](_0x1152b9(0x672));else{if(_0x26fb2c===0x3)this[_0x1152b9(0xb49)](_0x1152b9(0x8b2));else{if(_0x26fb2c===0x2)this[_0x1152b9(0xb49)](_0x1152b9(0x250));else{if(_0x4b2716[_0x1152b9(0x5ea)]())this[_0x1152b9(0xb49)](_0x1152b9(0x6d7));else{if(_0x4b2716[_0x1152b9(0x2d2)]()||_0x4b2716['isGuardWaiting']())this['startMotion'](_0x1152b9(0x2c0));else{if(_0x26fb2c===0x1)this['startMotion'](_0x1152b9(0x9ee));else{if(_0x4b2716[_0x1152b9(0x4e6)]())this['startMotion'](_0x1152b9(0x745));else _0x4b2716[_0x1152b9(0x33f)]()?this['startMotion'](_0x1152b9(0x672)):this['startMotion'](_0x4b2716[_0x1152b9(0x325)]()[_0x1152b9(0xb40)]||_0x1152b9(0x672));}}}}}}}},Sprite_SvEnemy['prototype'][_0x5bbf40(0x6f5)]=function(){const _0x1b5272=_0x5bbf40;return this['parent']?this[_0x1b5272(0x25e)][_0x1b5272(0x5e1)]===0x0&&this[_0x1b5272(0x25e)][_0x1b5272(0x974)]===0x0:!![];},Sprite_SvEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0x618)]=function(){},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x571)]=Sprite_Animation[_0x5bbf40(0x68c)][_0x5bbf40(0x9a6)],Sprite_Animation[_0x5bbf40(0x68c)][_0x5bbf40(0x9a6)]=function(_0x412f41){const _0x4dc4e3=_0x5bbf40;return _0x412f41[_0x4dc4e3(0x48d)]?this[_0x4dc4e3(0xbb1)](_0x412f41):VisuMZ[_0x4dc4e3(0x7d9)][_0x4dc4e3(0x571)][_0x4dc4e3(0x86a)](this,_0x412f41);},Sprite_Animation[_0x5bbf40(0x68c)]['targetDistortionSpritePosition']=function(_0x32e2b2){const _0x5d3a9e=_0x5bbf40;let _0x1dd554=_0x32e2b2['x'],_0x3497de=_0x32e2b2['y'],_0x6adf48=_0x32e2b2['height'],_0x339d00=_0x32e2b2[_0x5d3a9e(0x48d)][_0x5d3a9e(0x5f5)]['y'];_0x32e2b2['x']=_0x32e2b2['_baseX']+_0x32e2b2['extraPositionX'](),_0x32e2b2['y']=_0x32e2b2[_0x5d3a9e(0x4f3)]+_0x32e2b2[_0x5d3a9e(0x788)](),_0x32e2b2[_0x5d3a9e(0x570)]*=_0x339d00;let _0x4f23f8=VisuMZ[_0x5d3a9e(0x7d9)][_0x5d3a9e(0x571)][_0x5d3a9e(0x86a)](this,_0x32e2b2);return _0x32e2b2['x']=_0x1dd554,_0x32e2b2['y']=_0x3497de,_0x32e2b2[_0x5d3a9e(0x570)]=_0x6adf48,_0x4f23f8;},VisuMZ[_0x5bbf40(0x7d9)]['Sprite_AnimationMV_updatePosition']=Sprite_AnimationMV[_0x5bbf40(0x68c)][_0x5bbf40(0x390)],Sprite_AnimationMV['prototype'][_0x5bbf40(0x390)]=function(){const _0x30b1fa=_0x5bbf40;VisuMZ[_0x30b1fa(0x7d9)][_0x30b1fa(0x28c)][_0x30b1fa(0x86a)](this);if(!SceneManager[_0x30b1fa(0x277)]())return;if(this[_0x30b1fa(0x6cd)][_0x30b1fa(0x25d)]===0x3)this['x']=Math['round'](Graphics[_0x30b1fa(0x99d)]/0x2),this['y']=Math[_0x30b1fa(0x6ea)](Graphics[_0x30b1fa(0xa4b)]/0x2);else{if(this['battleStatusSprite'])return;}},Sprite_Damage[_0x5bbf40(0x68c)][_0x5bbf40(0x94c)]=function(_0x3e6394){const _0x172d48=_0x5bbf40,_0x1b2af9=_0x3e6394['getNextDamagePopup']()||_0x3e6394[_0x172d48(0xb82)]();if(_0x1b2af9['missed']||_0x1b2af9[_0x172d48(0x777)])this[_0x172d48(0x55a)]=0x0,this[_0x172d48(0x946)]();else{if(_0x1b2af9['hpAffected'])this[_0x172d48(0x55a)]=_0x1b2af9[_0x172d48(0xb65)]>=0x0?0x0:0x1,this[_0x172d48(0x6a8)](_0x1b2af9[_0x172d48(0xb65)]);else _0x3e6394[_0x172d48(0x706)]()&&_0x1b2af9[_0x172d48(0xaff)]!==0x0&&(this[_0x172d48(0x55a)]=_0x1b2af9[_0x172d48(0xaff)]>=0x0?0x2:0x3,this[_0x172d48(0x6a8)](_0x1b2af9[_0x172d48(0xaff)]));}_0x1b2af9[_0x172d48(0x89d)]&&this[_0x172d48(0x231)]();},Sprite_Damage[_0x5bbf40(0x68c)]['setup']=function(_0x23329e){},Sprite_Damage[_0x5bbf40(0x68c)][_0x5bbf40(0x6a8)]=function(_0x2057be){const _0x4e4d5f=_0x5bbf40;let _0x5a9568=this[_0x4e4d5f(0x66f)](_0x2057be);const _0x1cca80=this[_0x4e4d5f(0x23a)](),_0x4ca5fd=Math['floor'](_0x1cca80*0.75);for(let _0x125d70=0x0;_0x125d70<_0x5a9568[_0x4e4d5f(0x348)];_0x125d70++){const _0x1e5da5=this[_0x4e4d5f(0x2ce)](_0x4ca5fd,_0x1cca80);_0x1e5da5['bitmap']['drawText'](_0x5a9568[_0x125d70],0x0,0x0,_0x4ca5fd,_0x1cca80,_0x4e4d5f(0x572)),_0x1e5da5['x']=(_0x125d70-(_0x5a9568[_0x4e4d5f(0x348)]-0x1)/0x2)*_0x4ca5fd,_0x1e5da5['dy']=-_0x125d70;}},Sprite_Damage[_0x5bbf40(0x68c)]['createString']=function(_0x345cce){const _0x1a4afe=_0x5bbf40;let _0x430bef=Math[_0x1a4afe(0x2c8)](_0x345cce)[_0x1a4afe(0x43c)]();this[_0x1a4afe(0x587)]()&&(_0x430bef=VisuMZ['GroupDigits'](_0x430bef));const _0x341c06=VisuMZ[_0x1a4afe(0x7d9)][_0x1a4afe(0x8be)][_0x1a4afe(0x363)];let _0x3740c1='',_0x1ff411='';switch(this[_0x1a4afe(0x55a)]){case 0x0:_0x3740c1=_0x341c06[_0x1a4afe(0xb95)]||_0x1a4afe(0x580),_0x1ff411=TextManager['hp'];if(_0x345cce===0x0)_0x3740c1='%1';break;case 0x1:_0x3740c1=_0x341c06[_0x1a4afe(0xb6b)]||'+%1',_0x1ff411=TextManager['hp'];break;case 0x2:_0x3740c1=_0x341c06[_0x1a4afe(0x520)]||'-%1\x20MP',_0x1ff411=TextManager['mp'];break;case 0x3:_0x3740c1=_0x341c06[_0x1a4afe(0xadf)]||'+%1\x20MP',_0x1ff411=TextManager['mp'];break;}return _0x3740c1[_0x1a4afe(0x7c2)](_0x430bef,_0x1ff411)[_0x1a4afe(0x86c)]();},Sprite_Damage[_0x5bbf40(0x68c)][_0x5bbf40(0x587)]=function(){const _0x45750f=_0x5bbf40;return Imported['VisuMZ_0_CoreEngine']?VisuMZ[_0x45750f(0x25b)]['Settings'][_0x45750f(0xc04)][_0x45750f(0x8cd)]:![];},Sprite_Damage[_0x5bbf40(0x68c)][_0x5bbf40(0x231)]=function(){const _0x5aa34c=_0x5bbf40,_0x1a4ae2=VisuMZ[_0x5aa34c(0x7d9)][_0x5aa34c(0x8be)][_0x5aa34c(0x363)];_0x1a4ae2['CriticalColor']=_0x1a4ae2[_0x5aa34c(0xbbc)]||[0x0,0x0,0x0,0x0],this['_flashColor']=_0x1a4ae2[_0x5aa34c(0xbbc)]['slice'](0x0),this[_0x5aa34c(0x49f)]=_0x1a4ae2['CriticalDuration']||0x1;},Sprite_Damage[_0x5bbf40(0x68c)]['setupTextPopup']=function(_0x22a33b,_0x54563f){const _0x1b4365=_0x5bbf40;this[_0x1b4365(0x9b0)]=_0x54563f[_0x1b4365(0x849)]||[0x0,0x0,0x0,0x0],this[_0x1b4365(0x9b0)]=JsonEx[_0x1b4365(0xb4b)](this['_flashColor']),this[_0x1b4365(0x49f)]=_0x54563f[_0x1b4365(0x9d1)]||0x0;const _0x584808=this[_0x1b4365(0x23a)](),_0x1905de=Math[_0x1b4365(0x9d6)](_0x584808*0x1e),_0x42291a=this[_0x1b4365(0x2ce)](_0x1905de,_0x584808);_0x42291a[_0x1b4365(0xaa1)][_0x1b4365(0x6b9)]=ColorManager['getColor'](_0x54563f[_0x1b4365(0x6b9)]),_0x42291a['bitmap'][_0x1b4365(0x892)](_0x22a33b,0x0,0x0,_0x1905de,_0x584808,_0x1b4365(0x572)),_0x42291a['dy']=0x0;},Sprite_Damage['prototype'][_0x5bbf40(0xa3d)]=function(_0x3e82c3,_0x56a2c4,_0x5e4c32){const _0x2b4a75=_0x5bbf40,_0xc4e569=Math['max'](this[_0x2b4a75(0x23a)](),ImageManager[_0x2b4a75(0x790)]),_0x35600f=Math[_0x2b4a75(0x9d6)](_0xc4e569*0x1e),_0x50e817=this[_0x2b4a75(0x2ce)](_0x35600f,_0xc4e569),_0x2393d8=ImageManager[_0x2b4a75(0x64d)]/0x2,_0x15df26=_0x50e817['bitmap'][_0x2b4a75(0x5c6)](_0x56a2c4+'\x20');_0x50e817[_0x2b4a75(0xaa1)][_0x2b4a75(0x6b9)]=ColorManager['getColor'](_0x5e4c32[_0x2b4a75(0x6b9)]),_0x50e817[_0x2b4a75(0xaa1)][_0x2b4a75(0x892)](_0x56a2c4,_0x2393d8,0x0,_0x35600f-_0x2393d8,_0xc4e569,_0x2b4a75(0x572));const _0x336972=Math[_0x2b4a75(0x6ea)]((_0xc4e569-ImageManager[_0x2b4a75(0x790)])/0x2),_0x4aebf5=_0x35600f/0x2-ImageManager[_0x2b4a75(0x64d)]-_0x15df26/0x2+_0x2393d8/0x2,_0x243ed0=ImageManager['loadSystem'](_0x2b4a75(0xaa8)),_0x3d21cd=ImageManager[_0x2b4a75(0x64d)],_0x24c6bb=ImageManager[_0x2b4a75(0x790)],_0x52f968=_0x3e82c3%0x10*_0x3d21cd,_0x1d6986=Math[_0x2b4a75(0x9d6)](_0x3e82c3/0x10)*_0x24c6bb;_0x50e817[_0x2b4a75(0xaa1)]['blt'](_0x243ed0,_0x52f968,_0x1d6986,_0x3d21cd,_0x24c6bb,_0x4aebf5,_0x336972),this[_0x2b4a75(0x9b0)]=_0x5e4c32['flashColor']||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx['makeDeepCopy'](this[_0x2b4a75(0x9b0)]),this['_flashDuration']=_0x5e4c32['flashDuration']||0x0,_0x50e817['dy']=0x0,_0x5e4c32['offsetX']&&(_0x50e817['x']+=_0x5e4c32['offsetX']),_0x5e4c32[_0x2b4a75(0xb22)]&&(_0x50e817['dy']+=_0x5e4c32['offsetY']);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xa73)]=Sprite_Damage['prototype'][_0x5bbf40(0x2ce)],Sprite_Damage[_0x5bbf40(0x68c)]['createChildSprite']=function(_0x22c8ea,_0x194eed){const _0xe80a2a=_0x5bbf40;return _0x194eed=Math[_0xe80a2a(0x6ea)](_0x194eed*1.2),VisuMZ[_0xe80a2a(0x7d9)][_0xe80a2a(0xa73)]['call'](this,_0x22c8ea,_0x194eed);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xc08)]=Sprite_StateIcon[_0x5bbf40(0x68c)][_0x5bbf40(0x21f)],Sprite_StateIcon[_0x5bbf40(0x68c)][_0x5bbf40(0x21f)]=function(){const _0x4c43d8=_0x5bbf40;VisuMZ[_0x4c43d8(0x7d9)][_0x4c43d8(0xc08)][_0x4c43d8(0x86a)](this),this['opacity']=this[_0x4c43d8(0x563)]>0x0?0xff:0x0;},VisuMZ[_0x5bbf40(0x7d9)]['Sprite_Weapon_loadBitmap']=Sprite_Weapon['prototype'][_0x5bbf40(0x3c6)],Sprite_Weapon['prototype'][_0x5bbf40(0x3c6)]=function(){const _0x4686cb=_0x5bbf40;VisuMZ[_0x4686cb(0x7d9)]['Sprite_Weapon_loadBitmap'][_0x4686cb(0x86a)](this),this[_0x4686cb(0xaa1)]&&(this[_0x4686cb(0xaa1)][_0x4686cb(0x827)]=VisuMZ[_0x4686cb(0x7d9)][_0x4686cb(0x8be)][_0x4686cb(0x9a5)][_0x4686cb(0x753)]);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x34c)]=Sprite_Gauge[_0x5bbf40(0x68c)][_0x5bbf40(0x4cd)],Sprite_Gauge[_0x5bbf40(0x68c)][_0x5bbf40(0x4cd)]=function(){const _0x33394b=_0x5bbf40;return this[_0x33394b(0x9dd)]!=='time'?VisuMZ[_0x33394b(0x7d9)]['Settings']['HpGauge'][_0x33394b(0xa31)]??0x14:VisuMZ[_0x33394b(0x7d9)]['Sprite_Gauge_smoothness'][_0x33394b(0x86a)](this);};function Sprite_HpGauge(){const _0x4fd143=_0x5bbf40;this[_0x4fd143(0x3bb)](...arguments);}function _0x5048(_0x343588,_0x423c07){const _0x32df0a=_0x32df();return _0x5048=function(_0x50484e,_0x350387){_0x50484e=_0x50484e-0x1ee;let _0x745e28=_0x32df0a[_0x50484e];return _0x745e28;},_0x5048(_0x343588,_0x423c07);}Sprite_HpGauge[_0x5bbf40(0x68c)]=Object[_0x5bbf40(0x6c2)](Sprite_Gauge[_0x5bbf40(0x68c)]),Sprite_HpGauge[_0x5bbf40(0x68c)][_0x5bbf40(0xaad)]=Sprite_HpGauge,Sprite_HpGauge[_0x5bbf40(0x68c)][_0x5bbf40(0x3bb)]=function(){const _0x3aadf1=_0x5bbf40;Sprite_Gauge[_0x3aadf1(0x68c)]['initialize'][_0x3aadf1(0x86a)](this);},Sprite_HpGauge[_0x5bbf40(0x68c)]['gaugeX']=function(){return 0x0;},Sprite_HpGauge[_0x5bbf40(0x68c)][_0x5bbf40(0x2de)]=function(){const _0x18771d=_0x5bbf40;this[_0x18771d(0xaa1)]['clear']();const _0x1b2c86=this[_0x18771d(0x713)]();!isNaN(_0x1b2c86)&&this[_0x18771d(0xaf6)]();};function Sprite_EnemyName(){const _0x218e59=_0x5bbf40;this[_0x218e59(0x3bb)](...arguments);}function _0x32df(){const _0x481dd6=['setBattleSkew','customFontFace','_commandNameWindow','ext','numberFontFace','_flinched','battler','float','splice','ActSeq_Movement_BattleStep','ActSeq_Movement_MoveBy','reduce','motionIdle','battlelog','Parse_Notetags_Action','_animationCount','makeUniqueNames','Sprite_Actor_update','WaitForJump','Override','aliveMembers','startMotion','onBattleEnd','makeDeepCopy','Game_Action_numRepeats','Game_Action_setItem','attackSkillId','Game_Action_isForOne','encounterList','VisuMZ_2_BattleSystemATB','ShakeFlinch','attackStatesRate','_floatHeight','ShowPopup','ActSeq_Animation_ChangeBattlePortrait','_targetHomeX','FaceDirection','_nameTempVisibleDuration','Game_Map_encounterList','addChildToUiContainer','getBattlePortraitFilename','removeAnimationFromContainer','isShownOnBattlePortrait','forActor','cutinExit','Targets1','isSkillItemWindowsMiddle','ShowButton','gainHp','hpDamage','itemRect','okTargetSelectionVisibility','isBattlerTargeted','setupNegativeImpactFilter','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','hpHealingFmt','onRegeneratePlayStateAnimation','getDragonbones','setBattlePortrait','ALL\x20SKILLS','isActiveTpbReady','PostDamage%1JS','updateScale','AllowRandomSpeed','refreshMotion','_stypeIDs','Scene_Battle_start','process_VisuMZ_BattleCore_Failsafes','Game_Battler_onBattleEnd','PreStartTurnJS','isSideView','BattleVictoryJS','targetObjects','_targetGrowX','isActing','hasBeenDefeatedBefore','displayCounter','Post','result','setSubject','Intensity','performAttackSlot','setActiveWeaponSet','actionEffect','_subject','svActorHorzCells','setupRgbSplitImpactFilter','ExtraSettings','Item-%1-%2','updateBattlebackBitmap','drawItemImagePortraitStyle','battleAngle','Class-%1-%2','some','Window_BattleLog_displayCritical','surprise','compareBattlerSprites','hpDamageFmt','alignBattleCoreDamageSprite','isTpbReady','motionSpeed','processEnemyModeTouchBattleCore','Filename','isBattleCoreTargetScope','VisuMZ_2_BattleSystemFTB','_battler','_text','DisplayAction','PostStartTurnJS','isForRandom','clearFreezeMotionForWeapons','canAlterActionCostPTB','deactivate','getEnemyIdWithName','createContents','processPostBattleCommonEvents','VisuMZ_3_BattleAI','setMoveEasingType','VisuMZ_2_DragonbonesUnion','ActSeq_Impact_MotionTrailCreate','isItemCommandEnabled','visibilityState','finishActionSet','clearNameTempVisibility','not\x20focus','targetDistortionSpritePosition','jsCritRateAsTarget','Spriteset_Battle_createBattleField','PopupOffsetX','ActSeq_Impact_ShockwaveCenterTargets','positionOffsetX','ActSeq_Grid_AddPassiveStatesToNode','Sprite_Enemy_setHue','ActorCmd','updateKeyboardKeys','statusTextAutoBattleStyle','CriticalColor','increaseTotal','BattleDefeatJS','Style','requestFauxAnimation','getColor','activate','createStateIconSprite','moveBattlerDistance','getDamageStyle','isValid','battleMembers','createPartyCommandWindow','repeats','getBattlerKeyTargetReplacement','%1EndActionJS','startBattle','setBattleCameraPoint','isTeamBased','lastBattleSkill','command301_PreBattleEvent','updateShakeFlinch','skillId','performFlinch','hitsDmgFmt','setupBattleCoreData','_preBattleCommonEvent','ActSeq_DB_DragonbonesTimeScale','minimumHits','replace','nameY','processOk','BattleManager_processDefeat','_active','CombatLogIcon','changeTurnOrderByCTB','shadow','ActSeq_Movement_WaitForFloat','forceMotion','setCursorRect','%1-%2','Window_BattleActor_show','stateMotionIndex','resetFontSettings','displayFailure','performJump','actorId','swapEnemyIDs','\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','HelpEscape','updateHelp','updateLastTarget','WEAPON\x20SWAP','PrioritySortActors','%1Damage%2JS','createStateSprite','itemEffectAddNormalState','getNextSubject','ActSeq_Mechanics_StbExploit','_item','startTpbTurn','_itemWindow','drawItem','Game_Action_executeMpDamage','_angleWholeDuration','iconIndex','sortEnemies','Game_Actor_equips','isBattleTest','_hpGaugeSprite','battleZoom','QoL','criticalHitFlat','startEnemySelection','addEscapeCommand','Sprite_StateIcon_updateFrame','_attackAnimationId','noSimilarSTypes','Window_BattleEnemy_show','isRightInputMode','_cursorArea','ActionEnd','performMoveToPoint','performAttack','Window_BattleLog_performAction','ShowRemovedState','updateDuration','updateNameTempVisibility','process_VisuMZ_BattleCore_CreateRegExp','pha','removeDamageSprite','getBattlePortrait','setImmortal','ActSeq_Inject_AnimationEnd','_tpbSceneChangeCacheActor','repeatTargets','AUTO\x20BATTLE','\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','removeStatesAuto','partyCommandWindowRect','statusWindowRectDefaultStyle','Balloon','HelpItem','_actorSprites','_autoBattleWindow','ActSeq_Mechanics_BreakShieldReset','onEncounter','helpAreaHeight','BattleManager_abort','ApplyImmortal','AutoBattleMsg','_buttonKey','ActSeqImpact','evade','battleCommands','Game_Action_executeDamage','uiInputPosition','SETTINGS','_commonEventIDs','ACTOR_OFFSET_Y','onEnemyCancel','BattlebackScale','portrait','_motionType','positionOffsetY','Window_BattleLog_displayFailure','PostApply%1JS','isFlipped','ShowAddedBuff','Scene_Map_launchBattle','adjustPosition_1for1','start','_drawTextOutline','description','isPartyTpbInputtable','setFullActionsPTB','ActSeq_Movement_FacePoint','_regionBattleback1','WaitForEntrance','isBattleMember','_enemyWindowMode','mmp','JS\x20%1START\x20ACTION','updateFrame','Spriteset_Battle_updateActors','displayItemMessage','parseLocalizedText','createEffectActionSet','isMoving','setBackgroundType','WaitCount2','Strength','coreEngineRepositionEnemies','pointY','battleVoices','SkillsStatesCore','getCommonEventIdWithName','JS\x20%1END\x20BATTLE','processVictory','AttackAnimation','getWtypeIdWithName','setupCriticalEffect','checkExtendTroopCompatibility','ActSeq_Movement_HomeMoveToTarget','Game_BattlerBase_meetsUsableItemConditions','battleDisplayText','battleCoreResumeLaunchBattle','head','USER-DEFINED\x203','_shakeFlinchPower','fontSize','process_VisuMZ_BattleCore_CommonEventKeys','SkillItemBorderCols','Scene_Options_maxCommands','gainStoredBoostPoints','_dragonbonesSpriteContainer','putActiveBattlerOnTop','createActorCommandWindowBattleCore','clearActiveWeaponSlot','setHandler','guardLifeSteal','startIcon','CmdStyle','frontview_ui','findIndex','removeCurrentAction','createAutoBattleWindow','_mainSprite','battleSpin','match','ActSeq_Movement_HomeMoveToPoint','friendsUnit','sleep','applyBattleCoreJS','Sprite_Enemy_createStateIconSprite','_immortal','4prMDov','Wave','Game_Battler_startTpbTurn','refreshRequest','turnCount','centerFrontViewSprite','VisuMZ_0_CoreEngine','CoreEngine','startInjectAnimation','position','parent','target','ActSeq_Movement_WaitForSpin','createEnemyNameContainer','setTargetBattlerKey','battleGrow','MpGaugeOffsetX','onEncounterBattleCore','autoBattleStyle','ParseStateNotetags','Window_BattleLog_displayMiss','setupFont','gainCurrentActionsFTB','BindCommonEventKeysForObj','fittingHeight','Game_Battler_makeSpeed','NameAlwaysHidden','dead\x20battlers','ActSeq_Impact_MotionTrailRemove','disarmLifeSteal','USER-DEFINED\x201','ActSeq_Grid_AddTriggerToNode','stateRate','emulateAction','process_VisuMZ_BattleCore_DamageStyles','isSceneBattle','isAnyoneChangingOpacity','clearBattleRefreshRequest','fontFace','iconText','Scene_Battle_createPartyCommandWindow','VariableDmg','bitmapWidth','ActionItemMsg','removedBuffs','_lastHpDamage','TpbActiveChangeEnabled','autoBattleAtStart','updatePadding','targetBattlerContainerOpacity','setBattler','power','createCommandVisibleJS','ActSeq_Mechanics_RemoveState','displayReflection','CommandVisible','Sprite_AnimationMV_updatePosition','ActSeq_Mechanics_StbExtraAction','requestMotionRefresh','createInnerPortrait','placeStateIcon','isForDeadFriend','_enemyId','addMeleeReturnActionSet','OffsetX','_targetSkewY','makeCommandList','actor','makeAutoBattleActions','growBattler','freezeTime','createHelpWindowBattleCore','commandOptions','updateStaticSvBattlerFrames','selectNextCommand','skill','Game_Interpreter_updateWaitMode','Window_BattleLog_performEvasion','ChargeRate','Direction','updateCollapse','isAnimationPlaying','ActSeq_Grid_MoveTargetsInDirection','mainSprite','startAction','sideview_ui','_fauxAnimationSprites','10386lNaJPx','hpRate','LIGHT','BattleManager_endAction_ComboWindow','_playTestFastMode','Victory','Reveal','VisuMZ_2_BattleSystemOTB','_targets','MAXHP','counterAttack','isAffectedByBreakShield','minimumStayDuration','loadEnemy','stepFlinch','MotionSpeed','isPreviousScene','onDatabaseLoaded','ActSeq_Mechanics_AddBuffDebuff','setLastBattleSkill','startMove','guard','changeWeather','ConvertParams','_targetGrowY','_weaponImageId','duration','_performActionEnd','PopupDuration','abs','setActorHome','_callSceneOptions','NextTurn','autoMeleeMultiTargetActionSet','dataId','createChildSprite','Game_Temp_initialize','Sprite_Actor_updateFrame','changeCtbCastTime','isGuard','dimColor2','setupHpGaugeSprite','%1StartBattleJS','snapForBackground','startFloat','applyGlobal','waitForEffect','VisuMZ_4_BreakShields','spriteId','floatBattler','battleStatusSprite','redraw','CriticalDmgRate','onActorOk','getAttackMotionSlot','stypeId','onMoveEnd','isForAliveFriendBattleCore','processBorderActor','ActSeq_Mechanics_WaitForEffect','mainFontSize','loadPicture','_showWeapon','AutoAddState','Game_Party_addActor','_visibleDuration','padding','_armorPenetration','_baseLineStack','Duration','NameDamageVisibility','_scene','createEnemyNames','removeOnceParallelInterpreter','ActSeq_Mechanics_ActionEffect','State-%1-%2','Sprite_Battler_update','_cancelButton','reserveCommonEvent','ActSeq_Animation_CastAnimation','Game_BattlerBase_die','width','Name','_colorTone','random','drawItemImage','battleEnd','getBattlePortraitOffsetX','setBalloonPose','ResetOffset','HelpFight','\x5cI[%1]%2','isGrowing','waitCount','StepDuration','setVisibleUI','HalfActions','placeGauge','VariableID','randomTargets','makeDamageValue','Point','singleSkill','isBypassDamageCap','updateShadowPosition','ActSeq_Impact_Negative','ActSeq_Motion_MotionType','HpGaugeOffsetY','launchBattle','updateEvent','members','ActSeq_Mechanics_PtbAlterCost','CommandAddAutoBattle','damageOffsetX','displayBuffs','ShowAddedDebuff','attackStates','Window_ActorCommand_initialize','VisuMZ_2_WeaponSwapSystem','ActorOffsetX','isMagicSkill','%1StartTurnJS','svBattlerData','alive\x20opponents','AttachStateOffsetX','attachSpritesToDistortionSprite','isEffecting','isAutoBattleCommandEnabled','isDTB','createDamageSprite','ActSeq_Grid_ClearPassiveStatesFromNode','createMultiTargetWindows','requestRefresh','createAnimationContainer','Sprite_Battler_updateMain','_lastEnemy','StartTurnMsg','Sprite_Battler_initMembers','startActorSelection','_targetX','Sprite_Battler_damageOffsetY','Scene_Battle_selectPreviousCommand','addAutoBattleCommand','_targetFloatHeight','HitFlat','isAnyoneFloating','commandAutoBattle','isBuffAffected','isUndecided','contents','Game_Map_setupBattleback','Interrupt','_battlePortrait','mainSpriteWidth','_tempEquipCheck','performCollapse','VisuMZ_2_BattleGridSystem','length','BattleManager_updatePhase','abort','itemEffectRecoverMp','Sprite_Gauge_smoothness','isForNotUser','WaitForExit','StateIconOffsetX','VisuMZ_3_ActSeqProjectiles','_actorWindow','attackAnimationId1','BattleManager_makeActionOrders','isFrameVisible','ActSeq_Movement_Scale','resetCounter','clearOnceParallelInterpreters','VisuMZ_3_VisualCutinEffect','selectNextCommandTpb','loadSvActor','battleSkew','filters','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','Sprite_Actor_updateBitmap','_tpbChargeTime','ActSeq_Angle_WaitForAngle','ActSeq_Animation_AttackAnimation2','setHelpWindowItem','Damage','SvWeaponMass-%1-%2','hue','ActSeq_Projectile_Icon','Game_Troop_setup','repositionCancelButtonBorderStyle','setBattlerFlip','resetBreakShield','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','AutoBattleOK','battleAnimation','onActorCancel','retreat','drawSingleSkillCost','value','#ffffff','LIGHT\x20BULB','WtypeId','targetsForFriends','applySoftDamageCap','PreApplyAsTargetJS','Game_Action_testApply','ActSeq_Grid_ActionAnimationAtNode','ActSeq_Mechanics_EmulateSkillCost','getMenuImage','waitForMovement','isEnemy','PreEndTurnJS','hasSvBattler','Buffs','CheckMapBattleEventValid','_commonEventQueue','StatusWindowAttachmentBack','AnimationID','makeTargetsBattleCoreJS','missle','compatibilityVisible','TimeScale','ActSeq_Mechanics_RemoveBuffDebuff','updateCommandNameWindow','setupMotion','anchorY','dimColor1','weatherPower','forceAction','updatePosition','ActSeq_Mechanics_Multipliers','TpGaugeOffsetY','displayReflectionPlayBack','CTB','drain','_battlerHue','isSkewing','icons','itemTargetCandidates','save','setup','multiTargetWindowRect','_homeDuration','SKILLS','maxItems','addBattleCoreAutoBattleStartupCommand','casting','_createEffectsContainer','MP_Rate','ConvertCount','command3011','startSpin','ActSeq_Zoom_Reset','cancelMpLifeSteal','setItem','jsScaleDown','turn','apply','setValue','onHomeMoveEnd','Window_BattleLog_displayEvasion','alive\x20actors\x20not\x20target','LIGHT-BULB','itemLifeStealRate','performRecovery','moveBattlerHomeDistance','SkewX','selectAllEnemies','displayAddedStates','formula','refreshStatusWindow','_partyCommandWindow','initialize','WaitCount1','loop','innerHeight','die','ScaleUp','_shadowScaleY','Scene_Battle_onEnemyOk','_spriteset','BattleManager_onEncounter','_freezeMotionData','loadBitmap','hitRate','ActSeq_Mechanics_HpMpTp','alive\x20battlers\x20not\x20user','_enemy','processExtendTroopMembers','%1Apply%2JS','_targetAngle','Game_Action_needsSelection','VisuMZ_1_ElementStatusCore','_jumpDuration','Skills','performTpbActiveCheckSwitch','createAnimationSprite','_effectsContainer','attack','mainSpriteScaleX','ActSeq_Mechanics_ActiveChainInputDisable','currentClass','Window_BattleLog_displayCurrentState','requestPointAnimation','mainSpriteHeight','changeBattlebacks','setAttack','executeMpDamage','Game_Enemy_setup','isCTB','_totalDamage','guardSkillId','ArPenRate','HP_Rate','ActSeq_Movement_MoveToJsPoint','effect','_effectDuration','drawEnemyName','customDamageFormula','Game_Battler_performMiss','DistanceX','Game_Action_isForRandom','VarianceFormulaJS','parseForcedGameTroopSettingsBattleCore','autoMeleeSingleTargetActionSet','stepForward','Targets','Game_Action_evalDamageFormula','_cache','endAction','onTurnEnd','addItemCommand','StatusWindowSelectableBackHide','removeBattleBalloon','checkSubstitute','status','_shadowScaleX','ActSeq_Movement_WaitForScale','CmdIconFight','Window_BattleLog_performCounter','MOTIONS','TextColor','isPhysical','deadMembers','ActSeq_Impact_TimeScale','canGuardBattleCore','open','autoBattleStart','isOptionsCommandEnabled','NameFontSize','addTextToCombatLog','HelpSkillType','HomePosJS','VisuMZ_3_BoostAction','portraitFlipHorz','resizeWindowXPStyle','playOnceParallelTroopPage','ActionSequence','performCounter','parallaxScrollXinvertEnemy','_multipliers','_allTargets','WaitForOpacity','_battleBalloonSprites','setStateTurns','ActSeq_Mechanics_SwapWeapon','ActSeq_Inject_WaitForInjectAni','isActiveTpb','OffsetY','applyFreezeMotionFrames','GroupDigits','updateEffectContainers','WaitForMovement','_executedValue','cancelLifeSteal','updateCustomActionSequence','onBattleEndBattleCore','isActionSelectionValid','removedStateObjects','Game_Battler_onBattleStart','Scene_Battle_onEnemyCancel','hide','adjustPosition','AutoBattleCancel','createActionSequenceProjectile','canEscape','Game_Actor_makeActionList','processRandomizedData','Game_BattlerBase_initMembers','HpGauge','isDeathStateAffected','portraitIndex','_index','MultiTarget','commandNameWindowDrawText','Scene_Map_initialize','updateMain','getItemDamageAmountTextBattleCore','makeActionListAutoAttack','createBattleUIOffsetX','ActSeq_Mechanics_EmulateGuardEffect','toString','ActSeq_Impact_ZoomBlurTargetCenter','onJumpEnd','WaitForZoom','_back2Sprite','isPartyCommandWindowDisabled','Game_Temp_requestAnimation','_enemySprites','isForFriendBattleCore','%1Event','initElementStatusCore','CustomFontFace','Scene_Battle_startPartyCommandSelection','maxTp','notFocusValid','isVisualHpGaugeDisplayed','isCustomBattleScope','extraHeight','RegExp','DamageDisplay','origin','sliceMax','currentAction','setSvBattlerSprite','createActorCommandWindow','clamp','Defeat','actionBattleCoreJS','partyCommandWindowRectDefaultStyle','EscapeSuccessJS','performMagicEvasion','BattleCmdList','arPenFlat','Game_Action_itemTargetCandidates','Sprite_Enemy_updateBossCollapse','displayBattleCoreTransitionErrorMsg','Variable','setEventCallback','findSymbolExt','svAnchorX','changeCtbChargeTime','_helpWindow','filterArea','jsScaleUp','registerCommand','_requestRefresh','regionId','ShowReflect','addShowHpGaugeCommand','AutoMeleeAoE','drawComboText','MUSIC\x20NOTE','ShowFailure','animationId','preemptive','arPenRate','pop','tpbCommandFight','itemEffectRecoverHp','alive\x20friends\x20not\x20target','lukEffectRate','CastCertain','Scene_Battle_itemWindowRect','ActSeq_Animation_GuardAnimation','STYPES','left','_skewWholeDuration','balloonId','popBaseLine','weaponTypes','inputtingAction','inputting','auto','setupBlueRedInvertImpactFilter','_angleRevertOnFinish','PortraitScaleBorderStyle','hitIndex','AsUser','selectAll','_reflectionTarget','ActionCenteredName','_distortionSprite','setHorrorEffectSettings','canUseItemCommand','sort','_battleCoreBattleStartEvent','NOTE','Window_BattleLog_performRecovery','ActSeq_Animation_BalloonAnimation','CommandWidth','createHelpWindow','_namesCount','command357','updateVisibility','updateBossCollapse','ForceExploiter','BindCommonEventKeysForGroup','pow','Scene_Battle_commandFight','_flashDuration','thrust','ActSeq_Animation_BalloonIconRange','checkTpbInputOpen','JS\x20%1END\x20TURN','jsOneForOne','rec','isBattlerGrounded','makeData','partyCommandWindowRectBorderStyle','WaitForAngle','ActSeq_Animation_BalloonIconSpecific','ShowHpDmg','isGuardLifeSteal','makeSpeed','ActSeq_Movement_Float','battleCommandIcon','Immortal','Game_Map_battleback1Name','_defeatedEnemies','allowCollapse','isForAliveFriend','_effectType','_appeared','onBattleStartOnceParallels','ParseActorNotetags','isSubjectValidForAnyoneSelect','battlerKey','alive\x20battlers','%1EndBattleJS','updateAttachmentSprites','updatePositionBattleCore','drawBackgroundRect','forceSelect','numRepeats','createUIContainer','equipSlots','getFullActionsPTB','top','ActSeq_Animation_PlayAtCoordinate','maxLines','traitObjects','createPartyCommandWindowBattleCore','jumpBattler','ActSeq_Motion_PerformAction','checkAutoCustomActionSequenceNotetagEffect','smoothness','ActSeq_Impact_TimeStop','_waitCount','repositionEnemiesByResolution','isForRandomBattleCore','canGuard','_jumpHeight','makeHpDamageText','502243EDpnSf','isForAnyone','onStaticEnemyBitmapLoad','VoiceLineType','getDualWieldTimes','DistanceY','battleBalloon','VisuMZ_2_BattleSystemSTB','Window_BattleLog_popBaseLine','_homeEasing','updateGrow','getHalfActionsPTB','dead\x20enemies','IconStypeMagic','removeImmortal','ActSeq_Mechanics_OtbOrder','name','isDying','itemPadding','Game_Action_isForOpponent','isOptionsCommandAdded','_currentActor','_actionBattlers','SHOW_BUTTON','isArray','performEvasion','regenerateAllBattleCore','TP_Flat','isMeleeMultiTargetAction','MDF','_baseY','makeTargets','ShowTpDmg','windowskin','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','DamageFlat','expRate','ShowFacesListStyle','isCancelLifeSteal','isWaiting','allBattleMembers','Scene_Battle_updateStatusWindowPosition','ComboWindow_RectJS','createBattleUIOffsetY','svBattlerAnchorY','ANTI_TINT_UI','updateCallMenu','isMagical','battleInjectPrep','_battleLayoutStyle','Text','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','note','battleCorePreBattleCommonEvent','isAnyoneSkewing','performMiss','isQueueOptionsMenu','cameraOffsetDuration','createHpGaugeSprite','AdjustRect','getStypeIdWithName','addChild','checkCacheKey','resetResultSwitches','Game_Interpreter_command283','faceWidth','destroy','isNextSceneBattleTransitionable','message1','Enemy','Game_Battler_forceAction','battleOpacity','ShuffleArray','AutoBattle','checkSceneBattleTransitionable','mpDamageFmt','_angleDuration','hidden','2149296yaHuru','damageRate','CastAnimation','SceneManager_push','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','_list','Game_Battler_performDamage','updateCancel','_jumpMaxHeight','revealNewWeaknesses','EnemyOffsetY','meetsUsableItemConditions','setActionState','Window_BattleEnemy_hide','autoSelectPriority','EscapeFail','COMBATLOG','CriticalHitFlat','loadSystem','parallaxScrollX','_activeWeaponSlot','isAnyoneInjectAniPrepping','swing','text\x20target','_isBattlerFlipped','%1StartActionJS','Sprite_Actor_moveToStartPosition','CheckActSeqProjectileVersion','textBaseline','Sprite_Enemy_updateCollapse','CheckVisibleBattleNotetags','battleProjectiles','18198477HwsXDM','waitForJump','okButtonText','emulateActionEffect','ActSeq_Mechanics_BoostPointsStoreData','Window_BattleLog_performCollapse','updateBorderStyle','_branch','compareEnemySprite','Linear','ShowAddedState','_homeY','gainMp','commandRemember','LifeStealRegExp','createShadowSprite','PreEndActionJS','_waitMode','NameOffsetY','requestDragonbonesAnimation','_inputting','DistanceAdjust','applyVariance','_colorType','setCustomDamageFormula','bgType','CmdTextAutoBattle','frameVisible','alterBreakShield','Game_Action_setAttack','buffAdd','PointJS','_iconIndex','addCustomCommands','paySkillCost','_actions','BattleLog','Game_Action_makeDamageValueDisperse','updateBattleBalloons','JS\x20%1START\x20TURN','current\x20target','displayType','canUse','isDuringNonLoopingMotion','JSON','height','Sprite_Animation_targetSpritePosition','center','_updateDuration','Game_Action_updateLastTarget','_battlerKeyCache','animationNextDelay','BattleManager_startTurn','opponentsUnit','Window_BattleLog_update','hasSkill','Game_Battler_clearMotion','setText','Window_BattleEnemy_initialize','startTurn','maxBattleMembers','-%1','SwitchCritical','onBattleStartBattleCore','Scene_Boot_onDatabaseLoaded','ActSeq_Movement_Jump','setBattleZoom','Window_BattleLog_displayActionResults','useDigitGrouping','Game_Action_clear','lastFilename','VisuMZ_4_IconBalloons','ConfigManager_applyData','portraitFlipVert','NUM','CheckVisibleSkillNotetags','_motionSpeed','ComboWindow','performActionEnd','Game_Actor_setup','exit','backColor','_battleBalloonQueue','_floatWholeDuration','BattleGridSystem','options','offsetX','changeBattlerOpacity','XPActorCommandLines','ATK','parallaxScrollY','_opacityWholeDuration','Scene_Battle_onActorOk','_totalHits','Game_Party_removeActor','applyHardDamageCap','Enable','EasingType','GRID\x20MOVE','ActSeq_Grid_AnimationIDAtNode','skillItemWindowRectBorderStyle','EXCLAMATION','battleFloat','startInput','ActSeq_Grid_TeleportToNode','displayTpDamage','_damageContainer','calcWindowHeight','removeActor','isAppeared','_animationSprites','logActionList','TextAlign','performCastAnimation','VisuMZ_4_CombatLog','becomeSTBExploited','ActSeq_Movement_FaceDirection','isForFriend','battleCamera','ActSeq_Cutin_WaitForEntrance','isCommonEventReserved','updateRefresh','commandEscape','textAlignment','process_VisuMZ_BattleCore_PluginParams','_svBattlerData','battlerSmoothImage','sortDamageSprites','BattleLayout','bitmapHeight','evalDamageFormulaBattleCore','measureTextWidth','ShowActorGauge','ShowHide','indexOf','makeTargetsBattleCore','updateShadow','changeAtbChargeTime','ActSeq_Skew_WaitForSkew','WaitComplete','skillTypes','helpWindowRect','updateBorderSprite','StateOverlayOffsetY','opacity','ReflectAnimation','showPortraits','CriticalHitMultiplier','silentHomeMove','lineRect','validTargets','ActionSkillMsg1','missile','collapseType','Window_BattleLog_performReflection','resetTextColor','isForOpponent','ActSeq_Horror_TVCreate','_offsetX','svAnchorY','_selectionEffectCount','isChangingOpacity','getDefeatedEnemies','requestMotion','loadWindowskin','isDisarmLifeSteal','ANGER','isChanting','setSTBExploited','closeBattleActorWindow','onAngleEnd','USER-DEFINED\x205','AsTarget','Scene_Battle_stop','Game_Battler_regenerateAll','setActiveWeaponSlot','Scene_ItemBase_applyItem','tone','scale','_createClientArea','isBattleFlipped','commandNameWindowDrawBackground','_growDuration','preparePartyRefresh','battleback1Name','ActionSkillMsg2','traitSet','ActSeq_Element_NullElements','base','anchor','visualCutinPortraitFilename','canAttackBattleCore','doesPageHaveOnceParallelStart','softDamageCapRate','CriticalHitRateJS','isEscapeCommandEnabled','updateWaitMode','includes','setBlendColor','isSTB','GetActionSequenceSpecialTarget','initBattleCore','hitFlat','Scene_Battle_helpWindowRect','StartName','invokeAction','isTpbMainPhase','portraitHue','TpGaugeOffsetX','_autoBattle','gaugeLineHeight','charging','HpGaugeOffsetX','updateFlip','_handlers','WaitForScale','setWaitMode','_updateCursorArea','createActors','isDisplayEmergedEnemies','TP_Rate','all\x20targets','ActSeq_Mechanics_EmulateItemEffect','setupMotionBlurImpactFilter','logWindowRect','PostDamageAsTargetJS','_additionalSprites','updateStateSpriteBattleCore','createMultiTargetWindow','Scene_Battle_skillWindowRect','_lastAction','commandName','refreshActorPortrait','_battlerContainer','value2','_battleCoreAddedElements','list','actor%1-portrait','setupShockwaveImpactFilter','ActSeq_Mechanics_EmulateAttackEffect','ActSeq_Element_ForceElements','textWidth','drawSkillCost','Scene_Battle_selectNextCommand','ActSeq_Movement_MoveToTarget','drawItemStyleIcon','applyData','getBattlerKeyTargets','glitch','needsSelectionBattleCore','nextActiveWeaponSlot','Game_Map_battleback2Name','Sprite_Actor_initMembers','MotionType','statusWindowRect','applyImmortal','autoBattleUseSkills','Armor-%1-%2','EscapeSuccess','deathStateId','CurrentTurn','onEscapeFailure','WaitForEffect','zoomDuration','Debuffs','_uiContainer','iconWidth','initMembers','addLoadListener','isStateResist','updateOpacity','extendTroopMembers','EnableDamageCap','makeActionOrders','Scene_Battle_createAllWindows','_floatDuration','isHiddenSkill','ActSeq_Animation_SkillAnimation','NameAttachStateIcon','Game_Action_setSkill','_battleCoreForcedElements','isClicked','displayChangedBuffs','VisuMZ_2_BattleSystemCTB','ActSeq_Grid_AddTriggerToNodeJS','Turns','anchorX','retrieveBattleBalloon','Game_Interpreter_terminate','updateFloat','isBorderStylePortraitShown','PostEndBattleJS','ShowSubstitute','FrontViewSelect','ActSeqProjectiles','_ptbActionCost','negativeHpLifeSteal','clearForcedGameTroopSettingsBattleCore','jsAccuracy','battleCameraData','createString','inBattle','atbInterrupt','walk','Sprite_Enemy_update','_skillWindow','DamageType%1','right','WaitForCamera','_skillIDs','Window_BattleLog_refresh','targetsForOpponents','isFloating','shouldPopupDamage','StartTurnWait','applyForcedGameTroopSettingsBattleCore','Window_BattleLog_performActionStart','BattleLogRectJS','checkShowHideSwitchNotetags','updateShadowBattleCore','battleInjectAni','WaitForFloat','processForcedAction','ElementStatusCore','makeActionList','ActSeq_Target_CurrentIndex','iterateBattler','showHelpWindow','forceWeaponAnimation','prototype','AnchorY','updateLink','_wtypeIDs','Scene_Battle_onActorCancel','ZZZ','isMeleeSingleTargetAction','optDisplayTp','Game_Temp_requestBalloon','process_VisuMZ_BattleCore_PreBattleCommonEvent','ActSeq_Animation_AttackAnimation','updateActors','EnableSoftCap','ALL_ENEMIES','update','drawItemBackground','registerDefeatedEnemy','getItemDamageAmountLabelBattleCore','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','PopupShiftY','BattleManager_initMembers','playBattleVoice','displayAffectedStatus','contains','updateHpGaugePosition','drawItemImageListStyle','processActorCommandCancelTPB','LastSelected','createDigits','unshift','wtypeId','_cursorSprite','alive\x20actors\x20not\x20user','message2','_targetBattlerKey','alive\x20friends','ShowEnemyGauge','selectNextActor','ActSeq_Motion_RefreshMotion','ActSeq_Target_RandTarget','performReflection','updateBattlebackBitmap2','VariableHeal','VisuMZ_3_BattleVoices','BattleManager_onEscapeSuccess','textColor','fadeShiftX','ActionStart','Game_Action_isForAliveFriend','StepDistanceY','opacitySpeed','DigitGrouping','callNextMethod','battleCoreTpbMainPhase','create','Scene_Battle_startEnemySelection','updatePhase','children','setBattlerMotionTrailData','HelpOptions','ActSeq_Element_Clear','createTroopNote','toUpperCase','ActSeq_Camera_FocusTarget','ActSeq_Skew_Reset','_animation','addOnceParallelInterpreter','BattleManager_endAction','Actions','_escapeRatio','globalAlpha','ActSeq_Horror_Clear','getConfigValue','isAnyoneMoving','map','chant','Game_BattlerBase_canAttack','PostDamageAsUserJS','8336DDSxbO','battleJump','JS\x20%1DAMAGE\x20%2','_tpbNeedsPartyCommand','onGrowEnd','autoBattleWindowRect','battleLayoutStyle','svBattlerShadowVisible','angleDuration','switchToWeaponType','subject','isStatusAffected','_totalValue','ActSeq_Movement_FaceTarget','SkipPartyCmd','Game_Action_isForFriend','round','NameLegacy','Game_Action_itemHit','PopupOffsetY','process_VisuMZ_BattleCore_jsFunctions','applyArmorModifiers','BattleSystemSTB','ARRAYEVAL','ActSeq_Mechanics_CtbSpeed','ActSeq_Movement_FaceJsPoint','isNegativeLifeSteal','inHomePosition','AlphaFilter','Targets2','ACTOR_OFFSET_X','ActSeq_Mechanics_StbRemoveExcessActions','trueRandomTarget','playEnemyDamage','Window_Options_addGeneralOptions','svBattlerName','isBreakStunned','createEnemies','JS\x20ESCAPE\x20SUCCESS','setEnemyWindowMode','_surprise','SceneManager_isSceneChanging','ConvertActionSequenceTarget','index','isAlive','waitForOpacity','JS\x20BATTLE\x20VICTORY','ActSeq_Mechanics_CustomDmgFormula','isIncludedInEnemyWindow','MAXMP','BattleManager_onEscapeFailure','Rate','Game_Action_setGuard','PrioritySortActive','currentExt','addImmortal','Scene_Map_updateCallMenu','currentValue','ALL_ACTORS','updateHomeMove','_regionBattleback2','drawItemStatusListStyle','makeSuccess','mhp','ActSeq_Movement_Opacity','ActSeq_Movement_HomeMoveToJsPoint','createBattleBalloon','Scene_Battle_windowAreaHeight','_borderPortraitTargetX','VisuMZ_3_SideviewBattleUI','ActSeq_BattleLog_AddText','cutinEnter','ParseClassNotetags','_endBattle','isDead','PreEndBattleJS','PreStartBattleJS','CreateCommonEventKeys','split','TpbGaugeOffsetX','_targetHits','Exploited','updateStateIconSprite','ActSeq_Movement_Spin','onFloatEnd','_baseX','ActSeq_BattleLog_PopBaseLine','addBattleCoreAutoBattleStyleCommand','_actorMultiTargetWindow','_enemyID','isAnimationShownOnBattlePortrait','isPreviousSceneBattleTransitionable','hitsHealFmt','alterPriority','alterChange','tpbActorSwitchConditionsMet','PreApplyAsUserJS','_forcedHomeY','NewPopupBottom','messageSpeed','CalcActionSpeedJS','ActorOffsetY','scope','NameAlwaysSelectOnly','HEART','Sprite_Actor_updateShadow','_enemyMultiTargetWindow','dying','Mute','EscapeFailureJS','evalDamageFormula','damageText','vertCells','updateAttachedSprites','visible','effects','damageStyle','BattleManager_cancelActorInput','stopInjectAnimation','canSingleOrMultipleSelect','command339','SmoothImage','finishActorInput','dragonbonesData','Scale','placeTimeGauge','wholeActionSet','battlerShadowScaleX','ActSeq_Mechanics_AddState','StatusWindowSkinFilename','maxCols','isAnyoneGrowing','isForAnyoneFocusOpponents','move','attackTimesAdd','RevertAngle','lifeSteaItem','_endingBattle','ActionCount','ActSeq_Set_WholeActionSet','_flipScaleX','_linkedSprite','addedBuffs','type','getNextSubjectFromPool','PreApplyJS','ConfigManager_makeData','StateOverlayOffsetX','ActSeq_Grid_PushFromTargetNode','clearBattleCoreData','addText','ActSeq_Element_AddElements','setBattlerBattleCore','deselect','StatusWindowAttachmentFront','updateBitmap','makeBattleCommand','evaded','callUpdateHelp','terminate','helpWindowRectBorderStyle','JS\x20BATTLE\x20DEFEAT','ActSeq_Mechanics_BtbGain','ActSeq_Cutin_WaitForExit','version','isBorderPortraitSpriteVisible','shift','battlerSprites','PostStartBattleJS','itemHit','ActSeq_Grid_PullToTargetNode','regenerateAll','displayHpDamage','updateOnceParallelInterpreters','extraPositionY','CalcEscapeRaiseJS','VisuMZ_3_FrontviewBattleUI','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','Mirror','ActSeq_Animation_ShowAnimationJS','addAnimationSpriteToContainer','updateSkew','iconHeight','isOpponent','PostStartActionJS','waitForNewLine','ComboWindow_DrawJS','openBattleActorWindow','_performDamageMotion','_updateFilterArea','displayAction','select','getTraitSetKeys','chantStyle','Game_Action_executeHpDamage_ComboWindow','ActSeq_Animation_ShowAnimation','canAddSkillCommand','PostApplyAsTargetJS','SWEAT','ActSeq_Impact_Desaturate','removeBuffsAuto','DamageStyleList','requestAnimation','ActSeq_Grid_AnimationJsAtNode','ActSeq_Mechanics_CtbOrder','selectAllActors','SideviewSelect','QUESTION','PortraitScale','comboWindowOffsetY','updatePointAnimations','isETB','_windowLayer','updateWeather','_colorFilter','_commonEventKey','setupTextPopup','FlashDuration','displayMpDamage','_drawTextBody','increaseHits','clearBattleBalloons','StyleOFF','declareGlobalVariables','Game_Interpreter_PluginCommand','applyGuard','startOpacity','Angle','USER-DEFINED\x204','ParseWeaponNotetags','performActionStart','_forActor','format','removeChild','updateMotionCount','MAT','ActSeq_Movement_WaitForSkew','needsActorInputCancel','Game_Troop_expTotal','WaitCount','createMainSprite','addState','isForAnyoneFocusFriends','autoSelect','_frame','ActionAnimation','softDamageCap','Sprite_Battler_startMove','updateStyleOpacity','damageContainer','StateID','flipVisualCutinHorz','endVisualCutin','jump','BattleManager_processAbort','BattleCore','_createCursorArea','Enemy-%1-%2','enemyId','makeActions','getAttackMotion','CastMagical','PostEndTurnJS','WeaponTypeID','SwitchMissEvade','ActSeq_Mechanics_VariablePopup','ParseItemNotetags','itemEffectAddAttackState','changeAtbCastTime','unchanged','border','return\x200','isTriggered','STB','shouldDisperseDamage','updateInterpreter','command301','addGeneralOptions','wait','VisuMZ_2_BattleSystemBTB','_damageCounterWindow','hitType','HITTYPE_CERTAIN','Window_BattleLog_performSubstitute','fadeShiftY','equips','enemy','ActSeq_Mechanics_StateTurnsChangeBy','Scene_Party','FaceAway','ChangeOrderBy','ActSeq_BattleVoice_PlaySpecialLine','icon','physical','rate','usePremadeActionSequence','drawTextTopAligned','obj','targetActionSet','command119','WaitForNewLine','createBattleField','invokeMagicReflection','canMove','updateTargetPosition','PostRegenerateJS','performLifeSteal','drawActorFace','addExtendedTroopMembers','DualWield','testApply','revertTpbCachedActor','isSkill','_jumpWholeDuration','Window_BattleLog_clear','Mechanics','Scene_Battle_createHelpWindow','_borderPortraitDuration','isInputting','performDamage','startVisualCutin','DamageStyles','cancelTargetSelectionVisibility','isNextScene','_bypass_applyBattleCoreHitRateJS','default','_speed','addActor','StyleName','showEnemyAttackAnimation','shouldHideBattleEndPopups','_skewEasing','itemTextAlign','smooth','1272rgAsWW','itemHeight','isOnCurrentMap','Parse_Notetags_TraitObjects','skewBattler','Window_BattleLog_performDamage','criticalDmgFlat','refresh','_targetOffsetY','forceEscapeSprite','commandNameWindowCenter','BG_TYPE','Game_BattlerBase_eraseState','createAllWindows','weapons','skillItemWindowRectMiddle','setHalfActionsPTB','ShakeFlinchPower','_methods','Game_BattlerBase_refresh','setBattlerFacePoint','ShowPortraits','makeTargetSelectionMoreVisible','AggroControlSystem','bind','canBattlerMove','Window_BattleLog_displayTpDamage','BattleEndEvent','_shakeFlinchDuration','Exploiter','VisuMZ_3_ActSeqCamera','isHidden','WaitForAnimation','flashColor','Scene_Map_initializeAfter','clearTargetBattlerKey','Sprite_Battler_setHome','FRUSTRATION','displayEvasion','ARRAYSTRUCT','setHome','isDrain','AddOption','makeEscapeRatio','updateShadowScale','actorCommandCancelTPB','Scene_Battle_createCancelButton','skillWindowRect','battleStatusWindowAnimationContainer','moveToStartPosition','_pattern','isCurrentItemEnabled','LOVE','_stateSprite','CriticalDmgFlat','_homeWholeDuration','isTpb','_statusWindow','blockWidth','JS\x20%1START\x20BATTLE','isPTB','Sprite_Battler_setBattler','_action','DestinationJS','_forcedHomeX','Scene_Battle_createActorCommandWindow','call','negativeLifeSteal','trim','States','ActSeq_Mechanics_FtbAction','BoostPoints','destroyDamageSprite','totalDmgFmt','getNextDamagePopup','isCertainHit','Sprite_Enemy_initVisibility','createRateJS','Destination','isAtbChargingState','AS\x20TARGET','ActSeq_Movement_HomeReset','isBattleRefreshRequested','BTB','PreRegenerateJS','displayActionResults','placeActorName','Window_BattleLog_performActionEnd','addedStateObjects','VisuMZ_1_SkillsStatesCore','_executeHpDamage','createAttachmentSprites','ShowMissEvasion','updateBattlerContainer','JS\x20%1REGENERATE','uiMenuStyle','user','IconStypeNorm','_opacityDuration','actorCommandSingleSkill','requestBalloon','addStateTurns','JS\x20%1END\x20ACTION','isAutoBattleCommandAdded','setBattleCameraOffset','ActSeq_BattleLog_Refresh','drawText','adjustPosition_ScaleDown','isBattleSys','_shadowSprite','getSkillIdWithName','Opacity','Window_PartyCommand_initialize','setupBattleback','changeInputWindow','OffsetAdjust','finalizeScale','critical','STR','ActSeq_Cutin_AddVisualCutinEffect','DefaultSoftCap','requestBattleBalloon','all\x20enemies','startActorCommandSelection','onDisabledPartyCommandSelection','isCustomActionSequence','resetNameTempVisibility','isCommandEnabled','VisuMZ_3_ActSeqImpact','_frontAttachmentSprite','ActSeq_Target_PrevTarget','ActSeq_Movement_MoveToPoint','cancelActorInput','ActSeq_Impact_ColorBreak','playOnceParallelInterpreter','ActSeq_BattleVoice_PlayCommonLine','onSkewEnd','getAttackWeaponAnimationId','dead','removeBuff','processAnimationRequests','BARE\x20HANDS','isSpinning','showNormalAnimation','MUSIC','_actor','createTargetsJS','updateForceAction','cancel','_tpbState','Settings','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','Setting','Spriteset_Battle_createLowerLayer','itemCri','getHardDamageCap','ForceRandom','visualCutinPortraitHue','pagedown','itemLineRect','findTargetSprite','DEF','AutoBattleRect','clear','isJumping','DigitGroupingDamageSprites','_enemies','_deathStateApplied','removeHorrorEffect','CmdIconAutoBattle','close','setLastPluginCommandInterpreter','clearDamagePopup','startJump','Game_Action_setSubject','applyEasing','setupWeaponAnimation','addAttackCommand','ParseAllNotetags','isTpbCharged','addedDebuffs','isAtbCastingState','textSizeEx','front\x20center','CmdIconEscape','special','svActor','PartyCmd','string','_tempActor','Elements','performShakeFlinch','Game_BattlerBase_isStateResist','ActSeq_BattleLog_Clear','isAlwaysHidden','popupDamage','ActSeq_Mechanics_EmulateSkillEffect','isBusy','_growEasing','windowAreaHeight','Scene_Battle_updateBattleProcess','IconIndex','setBattleImpactTimeScale','escape','adjustPosition_ScaleUp','checkShowHideBattleNotetags','_homeX','contentsOpacity','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','Scene_Battle_createAllWindows_ComboWindow','drawTextEx','parse','CommandAddOptions','1016FoTwbR','isForOne','isTickBased','Window_BattleActor_processTouch','GetActionSequenceSpecialTargetWithFlags','svShadow','isNameTemporarilyVisible','comboWindowOffsetX','battleMove','ActSeq_Mechanics_Immortal','processTouch','criticalHitRate','onEnemyOk','Window_BattleActor_hide','DisablePartyCmd','addChildToBack','_updateCursorFilterArea','Game_Action_isForAll','TpbGaugeOffsetY','attackAnimationIdSlot','actorCommandWindowRect','cameraClamp','Game_Battler_clearDamagePopup','_floatEasing','PostDamageJS','stepBack','UNTITLED','gainCurrentActionsETB','ActSeq_Grid_RemoveTriggerFromNode','performSubstitute','_onceParallelInterpreters','checkShowHideSkillNotetags','PRE-','isFightCommandEnabled','4498140WqETFR','addDamageSprite','createDistortionSprite','SkillItemStandardCols','BattleManager_processVictory','STRUCT','hardDamageCap','startPartyCommandSelection','addSkillCommands','VisuMZ_2_HorrorEffects','VisuMZ_3_WeaknessDisplay','_backAttachmentSprite','NameOffsetX','setFrame','createBattleFieldBattleCore','item','_targetOpacity','RequiresDefeat','isOpen','_indent','applyGlobalCommonEventNotetags','getInputButtonString','createAttachedSprites','adjustFlippedBattlefield','Game_System_initialize','autoBattle','Game_BattlerBase_addNewState','%1RegenerateJS','PreApply%1JS','visualCutinPortraitType','displayChangedStates','moveBattlerHomeToPoint','updateStateSprite','createSeparateDamagePopups','troop','disperseDamage','FocusY','statusWindowRectBorderStyle','endIcon','createMiss','_battleField','ScaleY','addBuff','drawLineText','Game_Action_applyGlobal','setupBattleCore','_doubleTouch','isSpriteVisible','remove','HITTYPE_MAGICAL','clearResult','ShowMpDmg','SvMotionIdleSolo-%1-%2','performWeaponAnimation','isSpriteVS8dir','ParseEnemyNotetags','_currentAngle','_target','addBattleGridMoveCommand','BattleManager_startInput','_updateClientArea','processBattleCoreJS','ARRAYJSON','ceil','clearBattlerMotionTrailData','statusText','applyItem','isItem','_lineHeight','SkewY','startDamagePopup','Sprite_Battler_updatePosition','getBattlePortraitOffsetY','DefaultHardCap','jsCritRateAsUser','createLowerLayer','StepDistanceX','drawItemStyleIconText','attackMotions','noise','code','Window_BattleStatus_drawItemImage','_targetY','currentSymbol','Game_Action_itemEffectAddNormalState','_offsetY','processTurn','setLetter','isForOneBattleCore','Window_BattleLog_popupDamage','updateAngleCalculations','applyDamageCaps','log','ENEMY_OFFSET_X','jsScaleToFit','<CENTER>%1','ActSeq_Mechanics_PtbFullHalfAction','isAutoBattle','reverse','_createDamageContainer','skills','negativeMpLifeSteal','_targetSkewX','expTotal','Sprite_Battler_isMoving','_opacityEasing','FlinchDistanceY','clearGlobalVariables','_growX','isAnyBattleBalloonPlaying','MaxLines','Window_SkillList_maxCols','createWeather','fnordAddedStates','Scene_Battle_partyCommandWindowRect','SkillID','toLowerCase','Scene_Battle_startActorCommandSelection','PopupPosition','_growWholeDuration','stop','autoSelectLastSelected','isPlaytest','createJS','textAlign','damageOffsetY','boxWidth','TargetLocation','isBTB','processRefresh','gradientFillRect','BattleManager_checkSubstitute','frameCount','isTurnBased','Actor','targetSpritePosition','_lastRegenFrameCount','alive\x20enemies\x20not\x20user','_customDamageFormula','performActionEndMembers','virtualClick','battleCommandName','bossCollapse','initMembersBattleCore','isAnyoneInjectAnimating','_flashColor','updateShadowVisibility','Amp','ActSeq_Impact_MotionBlurTarget','ReflectPlayback','_cacheTextWidth','ActSeq_Animation_ItemAnimation','startSkew','Index','isSceneChanging','_weaponSprite','pages','MeleeDistance','ActSeq_Weapon_ClearActiveWeapon','jsAccuracyAsUser','Game_Action_makeTargets','MUSICNOTE','MANUAL','createDamageContainer','spinBattler','getLastPluginCommandInterpreter','ActionEffect','PosOffsetX','clearFreezeMotion','VoiceLine','createCancelButton','ActSeq_Projectile_Animation','push','ActSeq_Movement_WaitForOpacity','Game_Action_executeHpDamage','addGuardCommand','applyResultSwitches','front\x20base','flashDuration','Shadow','_emptyBitmap','ParseSkillNotetags','_battleCoreNoElement','floor','fight','Game_Battler_performActionStart','isAlwaysVisible','_battleCoreBattleResumeAfter','motionType','commandStyle','_statusType','BattleStartEvent','damage','displayStartMessages','canInput','drawItemStatusXPStyle','_weather','_logWindow','WIDTH','Scene_Battle_terminate','Spriteset_Battle_update','HelpAutoBattle','isATB','startWeaponAnimation','setSkill','numTargets','waitForAnimation','abnormal','process_VisuMZ_BattleCore_TraitObject_Notetags','_padding','Window_BattleStatus_initialize','performMoveToTargets','Sprite_Actor_setBattler','AntiTintUiElements','drawItemImageXPStyle','_enemyNameContainer','callOkHandler','DefaultSoftScaler','StateIconOffsetY','_lastPluginCommandInterpreter','setHelpWindow','battleSys','\x20to\x20%1\x20midbattle.','isFriendly','visualCutinPortraitIndex','callOptions','StyleON','moveToStartPositionBattleCore','Sprite_Enemy_setBattler','isBattlerFlipped','parameters','addChildAt','3526545LLTfGv','displayMiss','ActSeq_Weapon_NextActiveWeapon','_back1Sprite','_actionInputIndex','BattleManager_startBattle','BattleManager_startAction','displayCritical','magicSkills','Pre','_damages','ActSeq_Mechanics_BoostPointsChange','addNewState','prepareCustomActionSequence','lineHeight','clearMotion','_targetDamage','MotionIdle','_stateIconSprite','Sprite_Battler_damageOffsetX','ActSeq_Grid_AnimationTypeAtNode','initBattlePortrait','PostApplyJS','_growY','isConfused','mainSpriteScaleY','CheckSkillCommandShowSwitches','SvBattlerMass-%1-%2','Slot','createCommandNameWindow','Sprite_Actor_createStateSprite','itemWindowRect','dead\x20friends','Game_Action_apply','HP_Flat','battleUIOffsetY','FullActions','addOptionsCommand','flipVisualCutinVert','_borderPortraitSprite','innerWidth','slice','AniDuration','isActor','hpAffected','fnordRemovedStates','Radius','ActSeq_Camera_Reset','battleback2Name','battleSpriteSkew','eraseState','executeDamage','displayCurrentState','all\x20actors','setupIconTextPopup','action','canAttack','DefaultStyle','_duration','BattleManager_endBattle','gainTp','actorCommandEscape','pushBaseLine','changePaintOpacity','arRedFlat','_targetHomeY','30YVHejb','ActSeq_Impact_BlueRedInvert','boxHeight','selectSymbol','BattleManager_selectNextCommand','clearActiveWeaponSet','visualHpGauge','adjustPosition_ScaleToFit','ForceExploited','createEnemyWindow','CmdIconItem','Users','turnOrderChangeOTB','_injectAnimationSprite','pageup','_battlerName','ActSeq_Movement_Skew','startHomeMove','weaponImageId','extraPositionX','debuffAdd','commandSymbol','checkTpbInputClose','applyCritical','Scene_Battle_startActorSelection','isSelected','missed','hitText','isLearnedSkill','Window_ActorCommand_setup','freezeFrame','\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','alterType','Game_BattlerBase_canGuard','createKeyJS','BattleManager_inputtingAction','Sprite_Enemy_updateStateSprite','_angleEasing','isAnyoneSpinning','setupDamagePopup','%1EndTurnJS','updateEffectsContainer','Sprite_Damage_createChildSprite','_buttonText','VisuMZ_2_BattleSystemPTB','isAttack','cancelHpLifeSteal','selectPreviousCommand','VisuMZ_2_AggroControlSystem','performAction','ActSeq_BattleLog_WaitForBattleLog','adjustWeaponSpriteOffset','MP_Flat','_enemyWindow','SvWeaponSolo-%1-%2','concat','ActSeq_Animation_BalloonIcon','AllowCollapse','ActSeq_ChangeSkew','focus','commandStyleCheck','startGrow','NameAlwaysVisible','pattern','drawItemStatus','isSkipPartyCommandWindow','isFastForward','isForAll','displayRemovedStates','resizeWindowBorderStyle','maxCommands','isGuardWaiting','_actorCommandWindow','updateCounter','performActionMotions','makeTargetSprites','linkSprite','battlerName','_makeCursorAlpha','processBattleBalloonRequests','collapse','HitRate','Height','_phase','_baseTexture','setupActionSet','BattleSystemBTB','selectedBattlers','bitmap','LUK','BravePoints','_targetOffsetX','statusWindowRectXPStyle','BattleManager_isTpbMainPhase','addSingleSkillCommand','IconSet','isDamagePopupRequested','undecided','BattleManager_checkBattleEnd','endAnimation','constructor','onBattleStart','windowPadding','alive\x20friends\x20not\x20user','_damagePopupArray','applyBattleCoreCriticalHitRateJS','Shadow2','show','addSingleSkillCommands','ForceDeath','PreStartActionJS','addFightCommand','AS\x20USER','isForOpponentBattleCore','custom','addCommand','ActionEndUpdate','Game_Action_itemEffectAddAttackState','Scene_Battle_update','ShowCurrentState','temporaryVisibile','FlashColor','Game_Interpreter_command301','PostEndActionJS','BattleAI','_createCursorSprite','hasStaticSvBattler','randomInt','_visualHpGauge_JustDied','actionSplicePoint','WaitForSkew','_displayBattleCoreTransitionErrorMsg','isImmortal','executeHpDamage','toUseBoostPoints','Scene_Battle_initialize','processEscape','showAnimation','setTroopPage','battleEffect','fillRect','CopyCombatLog','isNonSubmenuCancel','needsSelection','...','Sprite_Battleback_adjustPosition','svActorVertCells','\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','Game_Battler_onTurnEnd','updateUiContainerPosition','mpHealingFmt','_motion','addSkillTypeCommand','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','Skill-%1-%2','JS\x20%1APPLY\x20%2','CreateActionSequenceTargets','CastPhysical','_forcedBattlers','find','Frame','initVisibility','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','_canLose','setupZoomBlurImpactFilter','_dimmerSprite','command283','EFFECT_COMMON_EVENT','jsAccuracyAsTarget','svBattlerAnchorX','text','alphabetic','commandFight','drawGauge','DTB','min','WaitForProjectile','setHue','filter','cancelButtonText','ActSeq_Movement_HomeMoveBy','_skewDuration','mpDamage','battleUIOffsetX','value1','isAnyoneJumping','command236','BULB','PreDamageAsTargetJS','ActSeq_Grid_RemovePassiveStatesFromNode','COMBAT\x20LOG','ENEMY_OFFSET_Y','gainHalfActionsPTB','lifeStealRate','setupOversaturateImpactFilter','moveBattlerToPoint','PerformAction','slices','_lines','max','_targetIndex','_forcedBattleLayout','Sprite_Actor_setActorHome','prepare','_lastActor','active','onOpacityEnd','skew','_hue','_motionCount','SkillItemMiddleLayout','_tempBattler','rowSpacing','getBattlerFromKey','ScaleX','Window_BattleLog_pushBaseLine','alterActionCostPTB','offsetY','frontviewSpriteY','_enemyIDs','_svBattlerSprite','updateSpin','removeChildFromUiContainer','MpGaugeOffsetY','applyTargetFilters','Sprite_SvEnemy','createDamageCounterWindow','_animationContainer','ParseArmorNotetags','Parse_Notetags_Targets','AnchorX','updateBattleProcess','Game_Action_isForDeadFriend','JumpToLabel','updateBattlebackBitmap1'];_0x32df=function(){return _0x481dd6;};return _0x32df();}Sprite_EnemyName[_0x5bbf40(0x68c)]=Object['create'](Sprite_Name[_0x5bbf40(0x68c)]),Sprite_EnemyName[_0x5bbf40(0x68c)]['constructor']=Sprite_EnemyName,Sprite_EnemyName[_0x5bbf40(0x68c)]['initialize']=function(){const _0x23e922=_0x5bbf40;Sprite_Name[_0x23e922(0x68c)]['initialize'][_0x23e922(0x86a)](this),this[_0x23e922(0x935)]();},Sprite_EnemyName[_0x5bbf40(0x68c)]['initMembers']=function(){const _0x4b46f6=_0x5bbf40;Sprite_Name[_0x4b46f6(0x68c)][_0x4b46f6(0x64e)][_0x4b46f6(0x86a)](this),this[_0x4b46f6(0x5d3)]=0x0,this['_linkedSprite']=null,this['anchor']['x']=0.5,this[_0x4b46f6(0x600)]['y']=0x0;},Sprite_EnemyName[_0x5bbf40(0x68c)][_0x5bbf40(0x935)]=function(){const _0x3c3ec4=_0x5bbf40;VisuMZ[_0x3c3ec4(0x7d9)][_0x3c3ec4(0x8be)][_0x3c3ec4(0x51a)][_0x3c3ec4(0x659)]&&(this[_0x3c3ec4(0xa19)]=new Sprite_StateIcon(),this[_0x3c3ec4(0x512)](this[_0x3c3ec4(0xa19)]));},Sprite_EnemyName[_0x5bbf40(0x68c)][_0x5bbf40(0x27e)]=function(){const _0x33996b=_0x5bbf40;return Graphics[_0x33996b(0x99d)];},Sprite_EnemyName[_0x5bbf40(0x68c)][_0x5bbf40(0x5c4)]=function(){const _0xbede2d=_0x5bbf40;return this['_lineHeight']=this[_0xbede2d(0x963)]||Window_Base[_0xbede2d(0x68c)][_0xbede2d(0xa15)]()||0x24,this[_0xbede2d(0x963)]*0x4;},Sprite_EnemyName[_0x5bbf40(0x68c)]['fontSize']=function(){const _0x361a45=_0x5bbf40;return VisuMZ[_0x361a45(0x7d9)][_0x361a45(0x8be)][_0x361a45(0x51a)][_0x361a45(0x408)]||$gameSystem[_0x361a45(0x2e7)]();},Sprite_EnemyName['prototype'][_0x5bbf40(0xa95)]=function(_0x384a52){const _0x3a62ca=_0x5bbf40;this[_0x3a62ca(0x767)]=_0x384a52;},Sprite_EnemyName['prototype'][_0x5bbf40(0x69a)]=function(){const _0x39617f=_0x5bbf40;Sprite_Name[_0x39617f(0x68c)][_0x39617f(0x69a)][_0x39617f(0x86a)](this),this['updateLink'](),this['updatePosition'](),this[_0x39617f(0x74b)](),this[_0x39617f(0x651)]();},Sprite_EnemyName[_0x5bbf40(0x68c)]['redraw']=function(){const _0x17fe1d=_0x5bbf40;this['_cacheTextWidth']=undefined;const _0x106f6d=this[_0x17fe1d(0x4e5)](),_0x58ea5e=this[_0x17fe1d(0x27e)](),_0x43d441=Window_Base[_0x17fe1d(0x68c)][_0x17fe1d(0xa15)]();this[_0x17fe1d(0x269)](),this[_0x17fe1d(0xaa1)][_0x17fe1d(0x8cb)](),this[_0x17fe1d(0xaa1)][_0x17fe1d(0x892)](_0x106f6d,0x0,0x0,_0x58ea5e,_0x43d441,'center');},Sprite_EnemyName[_0x5bbf40(0x68c)][_0x5bbf40(0x68e)]=function(){const _0x40d0b7=_0x5bbf40;if(!this[_0x40d0b7(0x767)])return;this[_0x40d0b7(0xb9d)]!==this['_linkedSprite'][_0x40d0b7(0xb9d)]&&this[_0x40d0b7(0x39b)](this[_0x40d0b7(0x767)]['_battler']);},Sprite_EnemyName[_0x5bbf40(0x68c)]['updatePosition']=function(){const _0x4eb2bc=_0x5bbf40;if(!this[_0x4eb2bc(0x767)])return;this[_0x4eb2bc(0x963)]=this[_0x4eb2bc(0x963)]||Window_Base[_0x4eb2bc(0x68c)]['lineHeight'](),this['x']=Math[_0x4eb2bc(0x6ea)](this[_0x4eb2bc(0x767)][_0x4eb2bc(0x72f)]),this['y']=Math[_0x4eb2bc(0x6ea)](this[_0x4eb2bc(0x767)]['_baseY']-this['_lineHeight']*0.5);const _0x387f6d=VisuMZ[_0x4eb2bc(0x7d9)]['Settings'][_0x4eb2bc(0x51a)];this['x']+=Math[_0x4eb2bc(0x6ea)](_0x387f6d[_0x4eb2bc(0x92b)]||0x0),this['y']+=Math[_0x4eb2bc(0x6ea)](_0x387f6d['NameOffsetY']||0x0);},Sprite_EnemyName[_0x5bbf40(0x68c)][_0x5bbf40(0x74b)]=function(){const _0x5e8efd=_0x5bbf40;this[_0x5e8efd(0x72c)]();},Sprite_EnemyName[_0x5bbf40(0x68c)]['updateStateIconSprite']=function(){const _0x2dbbe8=_0x5bbf40;if(!this['_stateIconSprite'])return;this[_0x2dbbe8(0xb9d)]!==this['_stateIconSprite'][_0x2dbbe8(0xb9d)]&&this['_stateIconSprite'][_0x2dbbe8(0x39b)](this[_0x2dbbe8(0xb9d)]);const _0x5158e6=this[_0x2dbbe8(0x634)]();this[_0x2dbbe8(0x963)]=this[_0x2dbbe8(0x963)]||Window_Base[_0x2dbbe8(0x68c)][_0x2dbbe8(0xa15)](),this[_0x2dbbe8(0xa19)]['x']=Math[_0x2dbbe8(0x6ea)]((_0x5158e6+ImageManager[_0x2dbbe8(0x64d)])/0x2)+0x8,this[_0x2dbbe8(0xa19)]['y']=this[_0x2dbbe8(0x963)]/0x2;const _0x33b5fa=VisuMZ[_0x2dbbe8(0x7d9)][_0x2dbbe8(0x8be)]['Enemy'];this[_0x2dbbe8(0xa19)]['x']+=_0x33b5fa[_0x2dbbe8(0x327)]||0x0,this['_stateIconSprite']['y']+=_0x33b5fa['AttachStateOffsetY']||0x0;},Sprite_EnemyName[_0x5bbf40(0x68c)][_0x5bbf40(0x651)]=function(){const _0x47e9a6=_0x5bbf40,_0xf54ef9=this[_0x47e9a6(0xbad)]();if(_0xf54ef9&&this[_0x47e9a6(0x5d3)]<0xff)this[_0x47e9a6(0x5d3)]+=0x10;else!_0xf54ef9&&this['opacity']>0x0&&(this['opacity']-=0x10);},Sprite_EnemyName[_0x5bbf40(0x68c)][_0x5bbf40(0xbad)]=function(){const _0x5ca09c=_0x5bbf40;if(this['isAlwaysHidden']())return![];else{if(!this[_0x5ca09c(0xb9d)])return![];else{if(!this[_0x5ca09c(0xb9d)]['isAppeared']())return![];else{if(this[_0x5ca09c(0xac1)]())return!![];else{if(this[_0x5ca09c(0xb9d)][_0x5ca09c(0x724)]())return![];else{if(this[_0x5ca09c(0xb68)]())return!![];else{if(this[_0x5ca09c(0x387)]())return!![];else{if(this[_0x5ca09c(0x9d9)]())return!![];else{if(this['isIncludedInEnemyWindow']())return!![];else{if(this[_0x5ca09c(0x5d3)]>0x0)return![];}}}}}}}}}},Sprite_EnemyName[_0x5bbf40(0x68c)][_0x5bbf40(0xac1)]=function(){const _0x221d75=_0x5bbf40;return this[_0x221d75(0xb9d)]&&this[_0x221d75(0xb9d)][_0x221d75(0x903)]();},Sprite_EnemyName['prototype'][_0x5bbf40(0x8ea)]=function(){const _0x46a280=_0x5bbf40;return VisuMZ[_0x46a280(0x7d9)][_0x46a280(0x8be)][_0x46a280(0x51a)][_0x46a280(0x26e)];},Sprite_EnemyName[_0x5bbf40(0x68c)][_0x5bbf40(0xb68)]=function(){const _0x2d9cf1=_0x5bbf40;return this[_0x2d9cf1(0xb9d)]&&BattleManager[_0x2d9cf1(0xb88)]&&BattleManager['_targets']['includes'](this[_0x2d9cf1(0xb9d)]);},Sprite_EnemyName[_0x5bbf40(0x68c)]['compatibilityVisible']=function(){return![];},Sprite_EnemyName['prototype']['isAlwaysVisible']=function(){const _0x6b24b5=_0x5bbf40;return VisuMZ[_0x6b24b5(0x7d9)]['Settings'][_0x6b24b5(0x51a)][_0x6b24b5(0xa87)];},Sprite_EnemyName[_0x5bbf40(0x68c)][_0x5bbf40(0x70a)]=function(){const _0x4e2b0b=_0x5bbf40;return VisuMZ[_0x4e2b0b(0x7d9)][_0x4e2b0b(0x8be)]['Enemy'][_0x4e2b0b(0x741)]?this[_0x4e2b0b(0xb9d)][_0x4e2b0b(0xa62)]():SceneManager[_0x4e2b0b(0x2f2)][_0x4e2b0b(0xa7e)]&&SceneManager[_0x4e2b0b(0x2f2)]['_enemyWindow'][_0x4e2b0b(0xb16)]&&SceneManager['_scene'][_0x4e2b0b(0xa7e)][_0x4e2b0b(0x8ce)][_0x4e2b0b(0x608)](this[_0x4e2b0b(0xb9d)]);},Sprite_EnemyName[_0x5bbf40(0x68c)][_0x5bbf40(0x634)]=function(){const _0x365778=_0x5bbf40;if(!this['_battler'])return 0x0;if(this[_0x365778(0x9b5)])return this[_0x365778(0x9b5)];const _0xf110cc=this[_0x365778(0x4e5)]();return this[_0x365778(0x269)](),this[_0x365778(0x9b5)]=this['bitmap'][_0x365778(0x5c6)](_0xf110cc)||0x1,this[_0x365778(0x9b5)];},VisuMZ['BattleCore'][_0x5bbf40(0xada)]=Sprite_Battleback[_0x5bbf40(0x68c)][_0x5bbf40(0x429)],Sprite_Battleback[_0x5bbf40(0x68c)][_0x5bbf40(0x429)]=function(){const _0x239969=_0x5bbf40,_0x141e1f=VisuMZ[_0x239969(0x7d9)][_0x239969(0x8be)][_0x239969(0x209)];if(!_0x141e1f)return VisuMZ[_0x239969(0x7d9)][_0x239969(0xada)][_0x239969(0x86a)](this);const _0x5ac5e6=String(_0x141e1f[_0x239969(0xa40)])||'MZ';switch(_0x5ac5e6){case'MZ':VisuMZ[_0x239969(0x7d9)]['Sprite_Battleback_adjustPosition'][_0x239969(0x86a)](this);break;case'1:1':this[_0x239969(0x212)]();break;case'ScaleToFit':this[_0x239969(0xa50)]();break;case'ScaleDown':this[_0x239969(0x893)]();break;case _0x239969(0x3c0):this[_0x239969(0x8f4)]();break;}},Sprite_Battleback[_0x5bbf40(0x68c)][_0x5bbf40(0x212)]=function(){const _0x4ba8cc=_0x5bbf40,_0x279643=VisuMZ[_0x4ba8cc(0x7d9)][_0x4ba8cc(0x8be)][_0x4ba8cc(0x209)];if(_0x279643&&_0x279643['jsOneForOne'])return _0x279643[_0x4ba8cc(0x4a4)][_0x4ba8cc(0x86a)](this);this[_0x4ba8cc(0x2fc)]=Graphics[_0x4ba8cc(0x2fc)],this['height']=Graphics[_0x4ba8cc(0x570)];const _0x471833=0x1;this[_0x4ba8cc(0x5f5)]['x']=_0x471833,this['scale']['y']=_0x471833,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype'][_0x5bbf40(0xa50)]=function(){const _0xf58d69=_0x5bbf40,_0x270650=VisuMZ[_0xf58d69(0x7d9)]['Settings']['BattlebackScale'];if(_0x270650&&_0x270650[_0xf58d69(0x97d)])return _0x270650[_0xf58d69(0x97d)][_0xf58d69(0x86a)](this);this['width']=Graphics[_0xf58d69(0x2fc)],this[_0xf58d69(0x570)]=Graphics[_0xf58d69(0x570)];const _0x2b9d1f=this[_0xf58d69(0x2fc)]/this[_0xf58d69(0xaa1)][_0xf58d69(0x2fc)],_0x529b89=this[_0xf58d69(0x570)]/this[_0xf58d69(0xaa1)]['height'],_0x1323a9=Math[_0xf58d69(0xb10)](_0x2b9d1f,_0x529b89);this[_0xf58d69(0x5f5)]['x']=_0x1323a9,this[_0xf58d69(0x5f5)]['y']=_0x1323a9,this['x']=(Graphics[_0xf58d69(0x2fc)]-this[_0xf58d69(0x2fc)])/0x2,this['y']=Graphics['height']-this['height'];},Sprite_Battleback['prototype']['adjustPosition_ScaleDown']=function(){const _0x3a906f=_0x5bbf40,_0xba937f=VisuMZ['BattleCore']['Settings'][_0x3a906f(0x209)];if(_0xba937f&&_0xba937f[_0x3a906f(0x3aa)])return _0xba937f[_0x3a906f(0x3aa)]['call'](this);this['width']=Graphics['width'],this['height']=Graphics['height'];const _0x2b0543=Math['min'](0x1,this[_0x3a906f(0x2fc)]/this[_0x3a906f(0xaa1)][_0x3a906f(0x2fc)]),_0xc432fd=Math[_0x3a906f(0xaf8)](0x1,this['height']/this['bitmap'][_0x3a906f(0x570)]),_0x97a807=Math[_0x3a906f(0xb10)](_0x2b0543,_0xc432fd);this[_0x3a906f(0x5f5)]['x']=_0x97a807,this[_0x3a906f(0x5f5)]['y']=_0x97a807,this['x']=(Graphics[_0x3a906f(0x2fc)]-this['width'])/0x2,this['y']=Graphics[_0x3a906f(0x570)]-this['height'];},Sprite_Battleback[_0x5bbf40(0x68c)]['adjustPosition_ScaleUp']=function(){const _0x6ae8e9=_0x5bbf40,_0x1836df=VisuMZ[_0x6ae8e9(0x7d9)][_0x6ae8e9(0x8be)]['BattlebackScale'];if(_0x1836df&&_0x1836df['jsScaleUp'])return _0x1836df[_0x6ae8e9(0x467)]['call'](this);this[_0x6ae8e9(0x2fc)]=Graphics[_0x6ae8e9(0x2fc)],this[_0x6ae8e9(0x570)]=Graphics[_0x6ae8e9(0x570)];const _0x37c16e=Math[_0x6ae8e9(0xb10)](0x1,this['width']/this[_0x6ae8e9(0xaa1)][_0x6ae8e9(0x2fc)]),_0x117983=Math[_0x6ae8e9(0xb10)](0x1,this[_0x6ae8e9(0x570)]/this[_0x6ae8e9(0xaa1)][_0x6ae8e9(0x570)]),_0x35c023=Math[_0x6ae8e9(0xb10)](_0x37c16e,_0x117983);this[_0x6ae8e9(0x5f5)]['x']=_0x35c023,this[_0x6ae8e9(0x5f5)]['y']=_0x35c023,this['x']=(Graphics[_0x6ae8e9(0x2fc)]-this['width'])/0x2,this['y']=Graphics[_0x6ae8e9(0x570)]-this[_0x6ae8e9(0x570)];},Spriteset_Battle[_0x5bbf40(0x502)]=VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8be)][_0x5bbf40(0x5c3)][_0x5bbf40(0x9f4)]??!![],Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x20f)]=function(){const _0x3d4c3f=_0x5bbf40;if(!$gameSystem[_0x3d4c3f(0xb7a)]())return![];return![];},Spriteset_Battle[_0x5bbf40(0x68c)]['animationBaseDelay']=function(){return 0x0;},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x576)]=function(){return 0x0;},VisuMZ[_0x5bbf40(0x7d9)]['Spriteset_Battle_createLowerLayer']=Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x96a)],Spriteset_Battle['prototype'][_0x5bbf40(0x96a)]=function(){const _0x18d063=_0x5bbf40;VisuMZ['BattleCore'][_0x18d063(0x8c1)]['call'](this),this[_0x18d063(0x98f)](),this[_0x18d063(0x2f3)]();},VisuMZ['BattleCore'][_0x5bbf40(0x9e7)]=Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x69a)],Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x69a)]=function(){const _0x3fae98=_0x5bbf40;VisuMZ[_0x3fae98(0x7d9)]['Spriteset_Battle_update']['call'](this),this[_0x3fae98(0x885)](),this[_0x3fae98(0xade)](),this[_0x3fae98(0x7af)](),this[_0x3fae98(0x569)]();},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x98f)]=function(){const _0x3dcb0e=_0x5bbf40;this['_weather']=new Weather(),this['_battleField'][_0x3dcb0e(0x512)](this[_0x3dcb0e(0x9e3)]);},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x7af)]=function(){const _0xcf4499=_0x5bbf40;this[_0xcf4499(0x9e3)][_0xcf4499(0x769)]=$gameScreen['weatherType'](),this[_0xcf4499(0x9e3)][_0xcf4499(0x287)]=$gameScreen[_0xcf4499(0x38e)]();},Game_Interpreter[_0x5bbf40(0x68c)][_0x5bbf40(0xb03)]=function(_0x396976){const _0x18ff72=_0x5bbf40;$gameScreen[_0x18ff72(0x2c1)](_0x396976[0x0],_0x396976[0x1],_0x396976[0x2]);if(_0x396976[0x3])this['wait'](_0x396976[0x2]);return!![];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x515)]=Game_Interpreter[_0x5bbf40(0x68c)]['command283'],Game_Interpreter[_0x5bbf40(0x68c)][_0x5bbf40(0xaef)]=function(_0x3b6501){const _0x1d59bb=_0x5bbf40;return SceneManager[_0x1d59bb(0x277)]()?(SceneManager[_0x1d59bb(0x2f2)]['_spriteset'][_0x1d59bb(0x3dc)](_0x3b6501[0x0],_0x3b6501[0x1]),!![]):VisuMZ[_0x1d59bb(0x7d9)][_0x1d59bb(0x515)]['call'](this,_0x3b6501);},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0xb8d)]=function(_0x412261,_0x5590c3){_0x412261['bitmap']=_0x5590c3;},Spriteset_Battle[_0x5bbf40(0x68c)]['changeBattlebacks']=function(_0x10f3aa,_0x5e3695){const _0x2c946c=_0x5bbf40;_0x10f3aa=_0x10f3aa||'',_0x5e3695=_0x5e3695||'';_0x10f3aa===''&&_0x5e3695===''&&(_0x10f3aa=this[_0x2c946c(0xa0a)][_0x2c946c(0x5fb)](),_0x5e3695=this[_0x2c946c(0x440)][_0x2c946c(0xa37)]());const _0x277b9b=ImageManager['loadBattleback1'](_0x10f3aa),_0x2ba724=ImageManager['loadBattleback2'](_0x5e3695);_0x277b9b[_0x2c946c(0x64f)](this[_0x2c946c(0xb33)]['bind'](this,this[_0x2c946c(0xa0a)],this[_0x2c946c(0x440)],_0x277b9b,_0x2ba724));},Spriteset_Battle['prototype'][_0x5bbf40(0xb33)]=function(_0x41b329,_0x349227,_0x2c16e1,_0xf4b1c5){const _0xb07139=_0x5bbf40;_0xf4b1c5[_0xb07139(0x64f)](this[_0xb07139(0x6b5)]['bind'](this,_0x41b329,_0x349227,_0x2c16e1,_0xf4b1c5));},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x6b5)]=function(_0x5a9fd0,_0x5362cb,_0x2a53a1,_0x59608a){const _0x409a97=_0x5bbf40;_0x5a9fd0[_0x409a97(0xaa1)]=_0x2a53a1,_0x5362cb[_0x409a97(0xaa1)]=_0x59608a,_0x5a9fd0[_0x409a97(0x429)](),_0x5362cb[_0x409a97(0x429)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xbb3)]=Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x807)],Spriteset_Battle['prototype'][_0x5bbf40(0x807)]=function(){const _0x45bbc7=_0x5bbf40;VisuMZ[_0x45bbc7(0x7d9)][_0x45bbc7(0xbb3)][_0x45bbc7(0x86a)](this),this[_0x45bbc7(0x92d)]();},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x92d)]=function(){const _0x191b5b=_0x5bbf40;this['createBattleFieldContainer'](),this['createUIContainer'](),this[_0x191b5b(0x330)](),this[_0x191b5b(0x9c2)](),this['adjustFlippedBattlefield']();},Spriteset_Battle[_0x5bbf40(0x68c)]['createBattleFieldContainer']=function(){const _0x118474=_0x5bbf40;this['_battlerContainer']=new Sprite(),this[_0x118474(0x947)]['addChild'](this[_0x118474(0x62c)]);},Spriteset_Battle[_0x5bbf40(0x68c)]['createAnimationContainer']=function(){const _0x339bf4=_0x5bbf40;this[_0x339bf4(0xb2c)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this[_0x339bf4(0x512)](this['_animationContainer']):this['_battleField']['addChild'](this[_0x339bf4(0xb2c)]);},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x9c2)]=function(){const _0x3b7d17=_0x5bbf40;this[_0x3b7d17(0x5ad)]=new Sprite(),this[_0x3b7d17(0x5ad)]['x']=this['_battleField']['x'],this[_0x3b7d17(0x5ad)]['y']=this[_0x3b7d17(0x947)]['y'],this[_0x3b7d17(0x512)](this[_0x3b7d17(0x5ad)]);},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x936)]=function(){const _0x3a00db=_0x5bbf40;if(!this[_0x3a00db(0x20f)]())return;this['_battlerContainer'][_0x3a00db(0x5f5)]['x']=-0x1,this['_battlerContainer']['x']=this[_0x3a00db(0x947)]['width'],this[_0x3a00db(0x64c)]['scale']['x']=-0x1,this[_0x3a00db(0x64c)]['x']=this['_battleField'][_0x3a00db(0x2fc)],this[_0x3a00db(0xb2c)][_0x3a00db(0x5f5)]['x']=-0x1,this['_animationContainer']['x']=this[_0x3a00db(0x947)][_0x3a00db(0x2fc)],this[_0x3a00db(0x5ad)][_0x3a00db(0x5f5)]['x']=-0x1,this[_0x3a00db(0x5ad)]['x']=this['_battleField']['x']+this['_battleField'][_0x3a00db(0x2fc)];},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x6ff)]=function(){const _0x258446=_0x5bbf40;Imported['VisuMZ_0_CoreEngine']&&this[_0x258446(0x228)]()&&this[_0x258446(0x4d0)]();const _0x29bad3=$gameTroop[_0x258446(0x319)](),_0x311e3c=[];for(const _0x4c25bb of _0x29bad3){_0x311e3c['push'](new Sprite_Enemy(_0x4c25bb));}_0x311e3c[_0x258446(0x490)](this[_0x258446(0x54b)][_0x258446(0x840)](this));for(const _0x407d28 of _0x311e3c){this[_0x258446(0x62c)][_0x258446(0x512)](_0x407d28);}this[_0x258446(0x443)]=_0x311e3c;},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x61d)]=function(){const _0x54b4c8=_0x5bbf40;this[_0x54b4c8(0x1f7)]=[];for(let _0x304227=0x0;_0x304227<$gameParty['maxBattleMembers']();_0x304227++){const _0x1d9d97=$gameParty[_0x54b4c8(0xbc7)]()[_0x304227],_0x2d5951=new Sprite_Actor();_0x2d5951[_0x54b4c8(0xa02)](_0x1d9d97),_0x2d5951['setBattler'](_0x1d9d97),_0x2d5951[_0x54b4c8(0x69a)](),this[_0x54b4c8(0x1f7)]['push'](_0x2d5951),this['_battlerContainer'][_0x54b4c8(0x512)](_0x2d5951);}},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x3d3)]=function(_0x2558b6,_0x305043,_0x4060da,_0x158e3d){const _0x55e291=_0x5bbf40,_0x2d6841=this['isMVAnimation'](_0x305043),_0xc61ffd=new(_0x2d6841?Sprite_AnimationMV:Sprite_Animation)(),_0x29cee5=this[_0x55e291(0xa94)](_0x2558b6);this['animationShouldMirror'](_0x2558b6[0x0])&&(_0x4060da=!_0x4060da),_0xc61ffd[_0x55e291(0xb7c)]=_0x2558b6,_0xc61ffd[_0x55e291(0x39b)](_0x29cee5,_0x305043,_0x4060da,_0x158e3d),this[_0x55e291(0x78e)](_0xc61ffd);},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x78e)]=function(_0x406f2e){const _0x40ef5a=_0x5bbf40;this[_0x40ef5a(0x734)](_0x406f2e)?(this[_0x40ef5a(0x858)]()['addChild'](_0x406f2e),_0x406f2e[_0x40ef5a(0x2dd)]=!![]):(this[_0x40ef5a(0xb2c)]['addChild'](_0x406f2e),Spriteset_Battle[_0x40ef5a(0x502)]&&(this['_animationContainer']['x']=this[_0x40ef5a(0x3d4)]['x'],this[_0x40ef5a(0xb2c)]['y']=this[_0x40ef5a(0x3d4)]['y'])),this[_0x40ef5a(0x5b1)][_0x40ef5a(0x9cb)](_0x406f2e);},Spriteset_Battle[_0x5bbf40(0x68c)]['isAnimationShownOnBattlePortrait']=function(_0x2c8850){const _0x8e1df7=_0x5bbf40;if(!_0x2c8850)return![];if(!_0x2c8850[_0x8e1df7(0x6cd)])return![];if(!_0x2c8850[_0x8e1df7(0xb7c)][0x0])return![];if(_0x2c8850['targetObjects'][0x0][_0x8e1df7(0xa32)]&&!_0x2c8850[_0x8e1df7(0xb7c)][0x0][_0x8e1df7(0xa32)]())return![];if($gameSystem[_0x8e1df7(0xb7a)]())return![];if(!this[_0x8e1df7(0x858)]())return![];if(_0x2c8850[_0x8e1df7(0xaad)]===Sprite_Animation){if(_0x2c8850[_0x8e1df7(0x6cd)][_0x8e1df7(0x56c)]!==0x0)return![];}else{if(_0x2c8850[_0x8e1df7(0xaad)]===Sprite_AnimationMV){if(_0x2c8850[_0x8e1df7(0x6cd)][_0x8e1df7(0x25d)]===0x3)return![];}}return!![];const _0x122a44=Window_BattleStatus[_0x8e1df7(0x68c)][_0x8e1df7(0x6e0)]();return['xp',_0x8e1df7(0x20a)][_0x8e1df7(0x6a3)](_0x122a44);},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x858)]=function(){const _0x474623=_0x5bbf40;if(!SceneManager[_0x474623(0x2f2)])return null;if(!SceneManager[_0x474623(0x2f2)][_0x474623(0x861)])return null;if(!SceneManager[_0x474623(0x2f2)]['_statusWindow']['_effectsContainer'])return null;return SceneManager[_0x474623(0x2f2)][_0x474623(0x861)][_0x474623(0x3d4)];},Spriteset_Battle[_0x5bbf40(0x68c)]['removeAnimation']=function(_0x3bb5a5){const _0x245e8a=_0x5bbf40;this[_0x245e8a(0xb5d)](_0x3bb5a5);for(const _0x369a69 of _0x3bb5a5['targetObjects']){_0x369a69['endAnimation']&&_0x369a69[_0x245e8a(0xaac)]();}_0x3bb5a5[_0x245e8a(0x517)]();},Spriteset_Battle[_0x5bbf40(0x68c)]['removeAnimationFromContainer']=function(_0x90fcd2){const _0x44906f=_0x5bbf40;this['isAnimationShownOnBattlePortrait'](_0x90fcd2)?this[_0x44906f(0x858)]()[_0x44906f(0x7c3)](_0x90fcd2):this[_0x44906f(0xb2c)][_0x44906f(0x7c3)](_0x90fcd2);this[_0x44906f(0x3d4)][_0x44906f(0x7c3)](_0x90fcd2),this[_0x44906f(0xb2c)][_0x44906f(0x7c3)](_0x90fcd2),this[_0x44906f(0x5b1)]['remove'](_0x90fcd2);if(this[_0x44906f(0x2aa)])this['_fauxAnimationSprites']['remove'](_0x90fcd2);},VisuMZ['BattleCore']['Spriteset_Battle_updateActors']=Spriteset_Battle['prototype']['updateActors'],Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x697)]=function(){const _0x4b4f50=_0x5bbf40;VisuMZ['BattleCore'][_0x4b4f50(0x220)]['call'](this),this[_0x4b4f50(0x885)]();},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x885)]=function(){const _0x3961ca=_0x5bbf40;this[_0x3961ca(0x62c)][_0x3961ca(0x6c5)]['sort'](this[_0x3961ca(0xb94)][_0x3961ca(0x840)](this)),this['putActiveBattlerOnTop']();if(!this[_0x3961ca(0x62c)])return;this['_battlerContainer']['opacity']=this[_0x3961ca(0x285)]();},Spriteset_Battle['prototype'][_0x5bbf40(0xb94)]=function(_0x34a57b,_0x35aa71){const _0x4dacea=_0x5bbf40;if(VisuMZ['BattleCore'][_0x4dacea(0x8be)][_0x4dacea(0x9a5)][_0x4dacea(0xbf2)]){if(_0x34a57b[_0x4dacea(0xb9d)]&&_0x35aa71['_battler']){if(_0x34a57b[_0x4dacea(0xb9d)][_0x4dacea(0xa32)]()&&_0x35aa71['_battler']['isEnemy']())return 0x1;else{if(_0x35aa71['_battler'][_0x4dacea(0xa32)]()&&_0x34a57b[_0x4dacea(0xb9d)]['isEnemy']())return-0x1;}}}return _0x34a57b[_0x4dacea(0x4f3)]!==_0x35aa71[_0x4dacea(0x4f3)]?_0x34a57b[_0x4dacea(0x4f3)]-_0x35aa71[_0x4dacea(0x4f3)]:_0x35aa71[_0x4dacea(0x2db)]-_0x34a57b[_0x4dacea(0x2db)];},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x240)]=function(){const _0x1787a8=_0x5bbf40;if(!VisuMZ[_0x1787a8(0x7d9)][_0x1787a8(0x8be)][_0x1787a8(0x9a5)]['PrioritySortActive'])return;const _0xb70716=BattleManager[_0x1787a8(0xb88)];if(_0xb70716){if(_0xb70716[_0x1787a8(0xa32)]()&&!$gameSystem[_0x1787a8(0xb7a)]())return;if(_0xb70716===BattleManager[_0x1787a8(0x297)]())return;const _0x512e68=_0xb70716['battler']();if(_0x512e68&&_0xb70716[_0x1787a8(0xa32)]())this[_0x1787a8(0x62c)]['addChild'](_0x512e68);}},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0xad1)]=function(){const _0x152451=_0x5bbf40;for(const _0x1f9aa7 of $gameParty[_0x152451(0xb48)]()){if(!_0x1f9aa7)continue;if(!_0x1f9aa7[_0x152451(0xb3a)]())continue;_0x1f9aa7[_0x152451(0xb3a)]()[_0x152451(0x831)]=!![],_0x1f9aa7[_0x152451(0xb3a)]()[_0x152451(0x36f)]();}},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x4c2)]=function(){const _0x2e1a1d=_0x5bbf40;this[_0x2e1a1d(0x64c)]=new Sprite(),Spriteset_Battle[_0x2e1a1d(0x502)]?this[_0x2e1a1d(0x512)](this[_0x2e1a1d(0x64c)]):this['_battleField'][_0x2e1a1d(0x512)](this[_0x2e1a1d(0x64c)]),SceneManager[_0x2e1a1d(0x2f2)][_0x2e1a1d(0x64c)]=this['_uiContainer'];},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x2f3)]=function(){const _0x572e3e=_0x5bbf40;if(VisuMZ['BattleCore']['Settings'][_0x572e3e(0x51a)][_0x572e3e(0x6eb)])return;this['_enemyNameContainer']=new Sprite(),BattleManager[_0x572e3e(0xb5b)](this[_0x572e3e(0x9f6)]);for(const _0x2fe0bf of this[_0x572e3e(0x443)]){const _0x5f1312=new Sprite_EnemyName();this['_enemyNameContainer']['addChild'](_0x5f1312),_0x5f1312[_0x572e3e(0xa95)](_0x2fe0bf);}},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0xade)]=function(){const _0x15cd3c=_0x5bbf40;if(!this['_damageContainer'])return;if(!this[_0x15cd3c(0x64c)])return;const _0x41572f=Spriteset_Battle[_0x15cd3c(0x502)]?this[_0x15cd3c(0x5ad)]['x']:0x0,_0x5c6a77=Spriteset_Battle[_0x15cd3c(0x502)]?this['_damageContainer']['y']:0x0,_0x127c0c=Imported[_0x15cd3c(0x846)]?this[_0x15cd3c(0x947)]['x']:0x0,_0x5a3b90=Imported[_0x15cd3c(0x846)]?this[_0x15cd3c(0x947)]['y']:0x0;this['_uiContainer']['x']=_0x41572f+_0x127c0c,this[_0x15cd3c(0x64c)]['y']=_0x5c6a77+_0x5a3b90;},BattleManager[_0x5bbf40(0xb5b)]=function(_0x570c08){const _0x34c10c=_0x5bbf40;if(!SceneManager[_0x34c10c(0x2f2)][_0x34c10c(0x64c)])return;SceneManager[_0x34c10c(0x2f2)][_0x34c10c(0x64c)]['addChild'](_0x570c08);},BattleManager['removeChildFromUiContainer']=function(_0xf1ebbb){const _0x380e1a=_0x5bbf40;if(!SceneManager['_scene'][_0x380e1a(0x64c)])return;SceneManager[_0x380e1a(0x2f2)][_0x380e1a(0x64c)][_0x380e1a(0x7c3)](_0xf1ebbb);},Spriteset_Battle['prototype'][_0x5bbf40(0x285)]=function(){return 0xff;},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x8ed)]=function(){return![];},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x33c)]=function(){const _0x3dd744=_0x5bbf40;return this[_0x3dd744(0x781)]()[_0x3dd744(0xb91)](_0x2e047f=>_0x2e047f['isFloating']());},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0xb02)]=function(){const _0x4a2bc6=_0x5bbf40;return this['battlerSprites']()[_0x4a2bc6(0xb91)](_0x27590e=>_0x27590e[_0x4a2bc6(0x8cc)]());},Spriteset_Battle[_0x5bbf40(0x68c)]['isAnyoneGrowing']=function(){const _0x3d1fec=_0x5bbf40;return this[_0x3d1fec(0x781)]()[_0x3d1fec(0xb91)](_0x6828d5=>_0x6828d5['isGrowing']());},Spriteset_Battle['prototype'][_0x5bbf40(0x50b)]=function(){const _0x32b1d1=_0x5bbf40;return this[_0x32b1d1(0x781)]()[_0x32b1d1(0xb91)](_0x1ea8ef=>_0x1ea8ef[_0x32b1d1(0x397)]());},Spriteset_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0xa6f)]=function(){const _0x53b515=_0x5bbf40;return this['battlerSprites']()[_0x53b515(0xb91)](_0x3be338=>_0x3be338['isSpinning']());},Spriteset_Battle['prototype'][_0x5bbf40(0x278)]=function(){const _0xbb919e=_0x5bbf40;return this[_0xbb919e(0x781)]()['some'](_0x44df5f=>_0x44df5f['isChangingOpacity']());},VisuMZ[_0x5bbf40(0x7d9)]['Window_ItemList_maxCols']=Window_ItemList[_0x5bbf40(0x68c)][_0x5bbf40(0x75c)],Window_ItemList[_0x5bbf40(0x68c)][_0x5bbf40(0x75c)]=function(){const _0x3a28db=_0x5bbf40;return SceneManager['isSceneBattle']()?SceneManager[_0x3a28db(0x2f2)]['battleLayoutStyle']()===_0x3a28db(0x7e8)?VisuMZ['BattleCore'][_0x3a28db(0x8be)]['BattleLayout']['SkillItemBorderCols']:VisuMZ[_0x3a28db(0x7d9)][_0x3a28db(0x8be)][_0x3a28db(0x5c3)][_0x3a28db(0x922)]:VisuMZ[_0x3a28db(0x7d9)]['Window_ItemList_maxCols'][_0x3a28db(0x86a)](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x98e)]=Window_SkillList[_0x5bbf40(0x68c)][_0x5bbf40(0x75c)],Window_SkillList[_0x5bbf40(0x68c)]['maxCols']=function(){const _0x3ac206=_0x5bbf40;return SceneManager['isSceneBattle']()?SceneManager['_scene'][_0x3ac206(0x6e0)]()===_0x3ac206(0x7e8)?VisuMZ['BattleCore'][_0x3ac206(0x8be)][_0x3ac206(0x5c3)][_0x3ac206(0x23c)]:VisuMZ[_0x3ac206(0x7d9)][_0x3ac206(0x8be)][_0x3ac206(0x5c3)]['SkillItemStandardCols']:VisuMZ[_0x3ac206(0x7d9)][_0x3ac206(0x98e)][_0x3ac206(0x86a)](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x6fc)]=Window_Options[_0x5bbf40(0x68c)][_0x5bbf40(0x7ef)],Window_Options['prototype']['addGeneralOptions']=function(){const _0x37fffe=_0x5bbf40;VisuMZ[_0x37fffe(0x7d9)]['Window_Options_addGeneralOptions']['call'](this),this['addAutoBattleCommands'](),this[_0x37fffe(0x46c)]();},Window_Options['prototype']['addAutoBattleCommands']=function(){const _0x209583=_0x5bbf40;VisuMZ[_0x209583(0x7d9)][_0x209583(0x8be)][_0x209583(0x51e)][_0x209583(0x852)]&&(this['addBattleCoreAutoBattleStartupCommand'](),this[_0x209583(0x731)]());},Window_Options['prototype'][_0x5bbf40(0x46c)]=function(){const _0x258019=_0x5bbf40;if(!VisuMZ[_0x258019(0x7d9)][_0x258019(0x8be)]['HpGauge']['AddHpGaugeOption'])return;const _0x2118d0=TextManager['visualHpGauge'],_0x16996d=_0x258019(0xa4f);this[_0x258019(0xabc)](_0x2118d0,_0x16996d);},Window_Options[_0x5bbf40(0x68c)][_0x5bbf40(0x3a0)]=function(){const _0x2cb11f=_0x5bbf40,_0x2f6b9e=TextManager['autoBattleStart'],_0x3372f7=_0x2cb11f(0x283);this[_0x2cb11f(0xabc)](_0x2f6b9e,_0x3372f7);},Window_Options[_0x5bbf40(0x68c)][_0x5bbf40(0x731)]=function(){const _0x183b59=_0x5bbf40,_0x20f7c1=TextManager['autoBattleStyle'],_0x58e573='autoBattleUseSkills';this[_0x183b59(0xabc)](_0x20f7c1,_0x58e573);},VisuMZ[_0x5bbf40(0x7d9)]['Window_Options_statusText']=Window_Options[_0x5bbf40(0x68c)]['statusText'],Window_Options[_0x5bbf40(0x68c)][_0x5bbf40(0x960)]=function(_0x3060c6){const _0x32ad65=_0x5bbf40,_0x154e0c=this[_0x32ad65(0xa5e)](_0x3060c6);return _0x154e0c===_0x32ad65(0x643)?this[_0x32ad65(0xbbb)]():VisuMZ[_0x32ad65(0x7d9)]['Window_Options_statusText'][_0x32ad65(0x86a)](this,_0x3060c6);},Window_Options[_0x5bbf40(0x68c)][_0x5bbf40(0xbbb)]=function(){const _0x11ebe4=_0x5bbf40,_0x597bab=VisuMZ['BattleCore'][_0x11ebe4(0x8be)][_0x11ebe4(0x51e)],_0x2d3bb8=this[_0x11ebe4(0x6d4)](_0x11ebe4(0x643));return _0x2d3bb8?_0x597bab[_0x11ebe4(0xa01)]:_0x597bab[_0x11ebe4(0x7b8)];},Window_ShopStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x69d)]=function(){const _0x468067=_0x5bbf40,_0x1f6253=DataManager[_0x468067(0xbc5)](this['_item']),_0x2c8aa8=VisuMZ['DamageStyles'][_0x1f6253];if(!_0x2c8aa8)return this['getItemDamageAmountLabelOriginal']();const _0x2277a7=_0x468067(0x675)[_0x468067(0x7c2)](this[_0x468067(0xbf8)][_0x468067(0x9df)][_0x468067(0x769)]),_0xfb87f8=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x468067(0xbf8)][_0x468067(0x9df)][_0x468067(0x769)]];return _0x2c8aa8[_0x2277a7][_0x468067(0x7c2)](_0xfb87f8);},Window_ShopStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x438)]=function(){const _0x41a984=_0x5bbf40,_0xbef6e6=DataManager['getDamageStyle'](this[_0x41a984(0xbf8)]),_0xd0ab6f=VisuMZ[_0x41a984(0x81b)][_0xbef6e6];if(!_0xd0ab6f)return this['getItemDamageAmountTextOriginal']();return _0xd0ab6f[_0x41a984(0x44f)][_0x41a984(0x86a)](this);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x898)]=Window_PartyCommand['prototype'][_0x5bbf40(0x3bb)],Window_PartyCommand['prototype'][_0x5bbf40(0x3bb)]=function(_0x229c17){const _0x8f7548=_0x5bbf40;VisuMZ[_0x8f7548(0x7d9)][_0x8f7548(0x898)][_0x8f7548(0x86a)](this,_0x229c17),this[_0x8f7548(0xa24)](_0x229c17);},Window_PartyCommand[_0x5bbf40(0x68c)]['createCommandNameWindow']=function(_0x48e997){const _0x17dd0b=_0x5bbf40,_0x315a9b=new Rectangle(0x0,0x0,_0x48e997[_0x17dd0b(0x2fc)],_0x48e997[_0x17dd0b(0x570)]);this[_0x17dd0b(0xb36)]=new Window_Base(_0x315a9b),this['_commandNameWindow'][_0x17dd0b(0x5d3)]=0x0,this[_0x17dd0b(0x512)](this[_0x17dd0b(0xb36)]),this[_0x17dd0b(0x38a)]();},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x778)]=function(){const _0x36311a=_0x5bbf40;Window_Command[_0x36311a(0x68c)][_0x36311a(0x778)][_0x36311a(0x86a)](this);if(this['_commandNameWindow'])this[_0x36311a(0x38a)]();},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x38a)]=function(){const _0x46725e=_0x5bbf40,_0x3a8a50=this[_0x46725e(0xb36)];_0x3a8a50[_0x46725e(0x340)]['clear']();const _0x1d5db2=this[_0x46725e(0xa85)](this[_0x46725e(0x705)]());if(_0x1d5db2===_0x46725e(0x7fe)&&this[_0x46725e(0x39f)]()>0x0){const _0x5021f9=this['itemLineRect'](this[_0x46725e(0x705)]());let _0x2a7df5=this['commandName'](this['index']());_0x2a7df5=_0x2a7df5[_0x46725e(0xbd9)](/\\I\[(\d+)\]/gi,''),_0x3a8a50[_0x46725e(0xbe7)](),this[_0x46725e(0x5f8)](_0x2a7df5,_0x5021f9),this[_0x46725e(0x435)](_0x2a7df5,_0x5021f9),this[_0x46725e(0x832)](_0x2a7df5,_0x5021f9);}},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x5f8)]=function(_0x3c8a90,_0x4b8564){},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x435)]=function(_0x906a5d,_0x2cfa4d){const _0xa3ef36=_0x5bbf40,_0x2e7cf8=this[_0xa3ef36(0xb36)];_0x2e7cf8[_0xa3ef36(0x892)](_0x906a5d,0x0,_0x2cfa4d['y'],_0x2e7cf8[_0xa3ef36(0xa2f)],'center');},Window_PartyCommand[_0x5bbf40(0x68c)]['commandNameWindowCenter']=function(_0x1446b8,_0x1303f7){const _0x22feda=_0x5bbf40,_0x2e4527=this[_0x22feda(0xb36)],_0x280637=$gameSystem[_0x22feda(0xaaf)](),_0x16824a=_0x1303f7['x']+Math['floor'](_0x1303f7['width']/0x2)+_0x280637;_0x2e4527['x']=_0x2e4527[_0x22feda(0x2fc)]/-0x2+_0x16824a,_0x2e4527['y']=Math['floor'](_0x1303f7[_0x22feda(0x570)]/0x2);},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x296)]=function(){const _0x349fc4=_0x5bbf40;this[_0x349fc4(0xab8)](),this['addAutoBattleCommand'](),this[_0x349fc4(0x564)](),this[_0x349fc4(0xa2c)](),this[_0x349fc4(0xc07)]();},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0xab8)]=function(){const _0x51c4be=_0x5bbf40,_0x2d6d54=this[_0x51c4be(0x9dc)](),_0x47fcd4=VisuMZ[_0x51c4be(0x7d9)]['Settings'][_0x51c4be(0x8e3)][_0x51c4be(0x3fd)],_0x23e2f4=_0x2d6d54===_0x51c4be(0xaf3)?TextManager['fight']:_0x51c4be(0x306)[_0x51c4be(0x7c2)](_0x47fcd4,TextManager['fight']),_0x5e9582=this[_0x51c4be(0x91e)]();this[_0x51c4be(0xabc)](_0x23e2f4,'fight',_0x5e9582);},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x91e)]=function(){return!![];},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x339)]=function(){const _0x2f6f85=_0x5bbf40;if(!this[_0x2f6f85(0x88f)]())return;const _0x2efb45=this[_0x2f6f85(0x9dc)](),_0x451c51=VisuMZ[_0x2f6f85(0x7d9)][_0x2f6f85(0x8be)][_0x2f6f85(0x8e3)][_0x2f6f85(0x8d1)],_0x1584f3=_0x2efb45===_0x2f6f85(0xaf3)?TextManager[_0x2f6f85(0x938)]:_0x2f6f85(0x306)[_0x2f6f85(0x7c2)](_0x451c51,TextManager[_0x2f6f85(0x938)]),_0x5a38d4=this['isAutoBattleCommandEnabled']();this[_0x2f6f85(0xabc)](_0x1584f3,'autoBattle',_0x5a38d4);},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x88f)]=function(){const _0x52a653=_0x5bbf40;return VisuMZ[_0x52a653(0x7d9)][_0x52a653(0x8be)][_0x52a653(0x8e3)][_0x52a653(0x31b)];},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x32a)]=function(){return!![];},Window_PartyCommand['prototype'][_0x5bbf40(0x564)]=function(){},Window_PartyCommand[_0x5bbf40(0x68c)]['addOptionsCommand']=function(){const _0x4e5e51=_0x5bbf40;if(!this[_0x4e5e51(0x4e9)]())return;const _0xadcf3=this[_0x4e5e51(0x9dc)](),_0x1953fb=VisuMZ[_0x4e5e51(0x7d9)][_0x4e5e51(0x8be)][_0x4e5e51(0x8e3)]['CmdIconOptions'],_0x3f242a=_0xadcf3===_0x4e5e51(0xaf3)?TextManager[_0x4e5e51(0x598)]:'\x5cI[%1]%2'[_0x4e5e51(0x7c2)](_0x1953fb,TextManager[_0x4e5e51(0x598)]),_0x10bf32=this[_0x4e5e51(0x407)]();this[_0x4e5e51(0xabc)](_0x3f242a,_0x4e5e51(0x598),_0x10bf32);},Window_PartyCommand[_0x5bbf40(0x68c)]['isOptionsCommandAdded']=function(){const _0x5a32d8=_0x5bbf40;return VisuMZ[_0x5a32d8(0x7d9)][_0x5a32d8(0x8be)][_0x5a32d8(0x8e3)][_0x5a32d8(0x8fc)];},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x407)]=function(){return!![];},Window_PartyCommand[_0x5bbf40(0x68c)]['addEscapeCommand']=function(){const _0x40042a=_0x5bbf40,_0x296e3a=this[_0x40042a(0x9dc)](),_0x2959c9=VisuMZ[_0x40042a(0x7d9)][_0x40042a(0x8be)][_0x40042a(0x8e3)][_0x40042a(0x8e0)],_0x3eec57=_0x296e3a===_0x40042a(0xaf3)?TextManager['escape']:_0x40042a(0x306)[_0x40042a(0x7c2)](_0x2959c9,TextManager[_0x40042a(0x8f3)]),_0x11aeb0=this[_0x40042a(0x606)]();this[_0x40042a(0xabc)](_0x3eec57,_0x40042a(0x8f3),_0x11aeb0);},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x606)]=function(){const _0x475989=_0x5bbf40;return BattleManager[_0x475989(0x42c)]();},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x826)]=function(){const _0x5568fe=_0x5bbf40;return VisuMZ[_0x5568fe(0x7d9)][_0x5568fe(0x8be)][_0x5568fe(0x8e3)]['CmdTextAlign'];},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0xbfb)]=function(_0x4f052d){const _0x5a0229=_0x5bbf40,_0x41aac9=this['commandStyleCheck'](_0x4f052d);if(_0x41aac9==='iconText')this[_0x5a0229(0x96c)](_0x4f052d);else _0x41aac9===_0x5a0229(0x7fe)?this['drawItemStyleIcon'](_0x4f052d):Window_Command[_0x5a0229(0x68c)][_0x5a0229(0xbfb)][_0x5a0229(0x86a)](this,_0x4f052d);},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x9dc)]=function(){const _0x1225da=_0x5bbf40;return VisuMZ[_0x1225da(0x7d9)][_0x1225da(0x8be)][_0x1225da(0x8e3)][_0x1225da(0x246)];},Window_PartyCommand['prototype']['commandStyleCheck']=function(_0x3c32f2){const _0x1121a2=_0x5bbf40;if(_0x3c32f2<0x0)return _0x1121a2(0xaf3);const _0x2e252d=this[_0x1121a2(0x9dc)]();if(_0x2e252d!==_0x1121a2(0x484))return _0x2e252d;else{if(this[_0x1121a2(0x39f)]()>0x0){const _0xd6fec9=this[_0x1121a2(0x62a)](_0x3c32f2);if(_0xd6fec9[_0x1121a2(0x24d)](/\\I\[(\d+)\]/i)){const _0x1539a5=this['itemLineRect'](_0x3c32f2),_0x49f169=this[_0x1121a2(0x8de)](_0xd6fec9)[_0x1121a2(0x2fc)];return _0x49f169<=_0x1539a5['width']?_0x1121a2(0x27b):_0x1121a2(0x7fe);}}}return _0x1121a2(0xaf3);},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x96c)]=function(_0x10f770){const _0x9c5f46=_0x5bbf40,_0x4a16b4=this['itemLineRect'](_0x10f770),_0x453a92=this[_0x9c5f46(0x62a)](_0x10f770),_0x5191d2=this[_0x9c5f46(0x8de)](_0x453a92)[_0x9c5f46(0x2fc)];this[_0x9c5f46(0xa46)](this['isCommandEnabled'](_0x10f770));const _0x1eaf06=this['itemTextAlign']();if(_0x1eaf06===_0x9c5f46(0x676))this[_0x9c5f46(0x8fa)](_0x453a92,_0x4a16b4['x']+_0x4a16b4['width']-_0x5191d2,_0x4a16b4['y'],_0x5191d2);else{if(_0x1eaf06==='center'){const _0x995135=_0x4a16b4['x']+Math['floor']((_0x4a16b4[_0x9c5f46(0x2fc)]-_0x5191d2)/0x2);this[_0x9c5f46(0x8fa)](_0x453a92,_0x995135,_0x4a16b4['y'],_0x5191d2);}else this[_0x9c5f46(0x8fa)](_0x453a92,_0x4a16b4['x'],_0x4a16b4['y'],_0x5191d2);}},Window_PartyCommand[_0x5bbf40(0x68c)]['drawItemStyleIcon']=function(_0x1e7a0d){const _0x104d3b=_0x5bbf40;this[_0x104d3b(0x62a)](_0x1e7a0d)[_0x104d3b(0x24d)](/\\I\[(\d+)\]/i);const _0x1cc73d=Number(RegExp['$1'])||0x0,_0x3256c8=this[_0x104d3b(0x8c7)](_0x1e7a0d),_0x107058=_0x3256c8['x']+Math[_0x104d3b(0x9d6)]((_0x3256c8[_0x104d3b(0x2fc)]-ImageManager[_0x104d3b(0x64d)])/0x2),_0x6f0432=_0x3256c8['y']+(_0x3256c8['height']-ImageManager['iconHeight'])/0x2;this['drawIcon'](_0x1cc73d,_0x107058,_0x6f0432);},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x428)]=function(){},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0xbc2)]=function(){const _0x1f751a=_0x5bbf40;Window_Command[_0x1f751a(0x68c)][_0x1f751a(0xbc2)][_0x1f751a(0x86a)](this);const _0x26f388=this[_0x1f751a(0x6e0)]();_0x26f388===_0x1f751a(0x7e8)&&this['showHelpWindow']();},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x6e0)]=function(){const _0x419f92=_0x5bbf40;if(this[_0x419f92(0x506)])return this[_0x419f92(0x506)];return this[_0x419f92(0x506)]=SceneManager[_0x419f92(0x2f2)][_0x419f92(0x6e0)](),this['_battleLayoutStyle'];},Window_PartyCommand[_0x5bbf40(0x68c)][_0x5bbf40(0xbef)]=function(){const _0x48ac24=_0x5bbf40,_0x20292a=VisuMZ[_0x48ac24(0x7d9)][_0x48ac24(0x8be)][_0x48ac24(0x8e3)],_0x59bfb9=this[_0x48ac24(0x972)]();switch(_0x59bfb9){case _0x48ac24(0x9d7):this['_helpWindow'][_0x48ac24(0x57c)](_0x20292a[_0x48ac24(0x305)]);break;case _0x48ac24(0x938):this[_0x48ac24(0x465)][_0x48ac24(0x57c)](_0x20292a[_0x48ac24(0x9e8)]);break;case _0x48ac24(0x598):this[_0x48ac24(0x465)][_0x48ac24(0x57c)](_0x20292a[_0x48ac24(0x6c7)]);break;case _0x48ac24(0x8f3):this[_0x48ac24(0x465)][_0x48ac24(0x57c)](_0x20292a[_0x48ac24(0xbee)]);break;default:this[_0x48ac24(0x465)]['setText']('');break;}},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x320)]=Window_ActorCommand['prototype']['initialize'],Window_ActorCommand['prototype'][_0x5bbf40(0x3bb)]=function(_0x445d48){const _0x5a2af4=_0x5bbf40;VisuMZ[_0x5a2af4(0x7d9)][_0x5a2af4(0x320)]['call'](this,_0x445d48),this['createCommandNameWindow'](_0x445d48);},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0xa24)]=function(_0x59cb41){const _0x3c85e8=_0x5bbf40,_0x316160=new Rectangle(0x0,0x0,_0x59cb41[_0x3c85e8(0x2fc)],_0x59cb41[_0x3c85e8(0x570)]);this[_0x3c85e8(0xb36)]=new Window_Base(_0x316160),this[_0x3c85e8(0xb36)][_0x3c85e8(0x5d3)]=0x0,this[_0x3c85e8(0x512)](this[_0x3c85e8(0xb36)]),this[_0x3c85e8(0x38a)]();},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x778)]=function(){const _0x313aa7=_0x5bbf40;Window_Command['prototype'][_0x313aa7(0x778)]['call'](this);if(this[_0x313aa7(0xb36)])this[_0x313aa7(0x38a)]();},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x38a)]=function(){const _0x598bb1=_0x5bbf40,_0x56c185=this[_0x598bb1(0xb36)];_0x56c185[_0x598bb1(0x340)][_0x598bb1(0x8cb)]();const _0x55cc3d=this[_0x598bb1(0xa85)](this[_0x598bb1(0x705)]());if(_0x55cc3d===_0x598bb1(0x7fe)&&this[_0x598bb1(0x39f)]()>0x0){const _0x4b4080=this[_0x598bb1(0x8c7)](this['index']());let _0x4a0b8e=this[_0x598bb1(0x62a)](this[_0x598bb1(0x705)]());_0x4a0b8e=_0x4a0b8e['replace'](/\\I\[(\d+)\]/gi,''),_0x56c185[_0x598bb1(0xbe7)](),this['commandNameWindowDrawBackground'](_0x4a0b8e,_0x4b4080),this['commandNameWindowDrawText'](_0x4a0b8e,_0x4b4080),this[_0x598bb1(0x832)](_0x4a0b8e,_0x4b4080);}},Window_ActorCommand[_0x5bbf40(0x68c)]['commandNameWindowDrawBackground']=function(_0x196d43,_0x3e240c){},Window_ActorCommand['prototype'][_0x5bbf40(0x435)]=function(_0x5ac8a2,_0x28eb2f){const _0xe8d69c=_0x5bbf40,_0x487355=this[_0xe8d69c(0xb36)];_0x487355[_0xe8d69c(0x892)](_0x5ac8a2,0x0,_0x28eb2f['y'],_0x487355[_0xe8d69c(0xa2f)],_0xe8d69c(0x572));},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x832)]=function(_0x1b3e59,_0x6e385){const _0x4a5c47=_0x5bbf40,_0x31a4a0=this[_0x4a5c47(0xb36)],_0x42ab95=$gameSystem[_0x4a5c47(0xaaf)](),_0x17ce45=_0x6e385['x']+Math[_0x4a5c47(0x9d6)](_0x6e385[_0x4a5c47(0x2fc)]/0x2)+_0x42ab95;_0x31a4a0['x']=_0x31a4a0[_0x4a5c47(0x2fc)]/-0x2+_0x17ce45,_0x31a4a0['y']=Math['floor'](_0x6e385[_0x4a5c47(0x570)]/0x2);},Window_ActorCommand[_0x5bbf40(0x68c)]['makeCommandList']=function(){const _0x57ad75=_0x5bbf40;if(!this[_0x57ad75(0x8b9)])return;const _0x42323d=this['_actor'][_0x57ad75(0x202)]();for(const _0x3dfdec of _0x42323d){this[_0x57ad75(0x776)](_0x3dfdec[_0x57ad75(0x6ca)]()[_0x57ad75(0x86c)]());}},Window_ActorCommand[_0x5bbf40(0x68c)]['makeBattleCommand']=function(_0x35e3fe){const _0x39d681=_0x5bbf40;_0x35e3fe==='ATTACK'&&this['addAttackCommand']();[_0x39d681(0x47c),_0x39d681(0x39e)][_0x39d681(0x608)](_0x35e3fe)&&this[_0x39d681(0x927)]();_0x35e3fe==='GUARD'&&this[_0x39d681(0x9ce)]();_0x35e3fe==='ITEM'&&this[_0x39d681(0x3f6)]();_0x35e3fe==='ESCAPE'&&this[_0x39d681(0xc07)]();_0x35e3fe===_0x39d681(0x1f0)&&this[_0x39d681(0x339)]();if(_0x35e3fe[_0x39d681(0x24d)](/STYPE: (\d+)/i)){const _0x3ca56d=Number(RegExp['$1']);this['addSkillTypeCommand'](_0x3ca56d);}else{if(_0x35e3fe[_0x39d681(0x24d)](/STYPE: (.*)/i)){const _0xb6a31a=DataManager['getStypeIdWithName'](RegExp['$1']);this[_0x39d681(0xae1)](_0xb6a31a);}}_0x35e3fe===_0x39d681(0xb6f)&&this[_0x39d681(0xab5)]();if(_0x35e3fe['match'](/SKILL: (\d+)/i)){const _0x3f1e1a=Number(RegExp['$1']);this[_0x39d681(0xaa7)]($dataSkills[_0x3f1e1a]);}else{if(_0x35e3fe[_0x39d681(0x24d)](/SKILL: (.*)/i)){const _0x372a54=DataManager[_0x39d681(0x896)](RegExp['$1']);this[_0x39d681(0xaa7)]($dataSkills[_0x372a54]);}}_0x35e3fe==='PARTY'&&Imported['VisuMZ_2_PartySystem']&&this['addPartyCommand'](),[_0x39d681(0x533),_0x39d681(0xb07)][_0x39d681(0x608)](_0x35e3fe)&&Imported[_0x39d681(0x5b5)]&&this['addCombatLogCommand'](),_0x35e3fe===_0x39d681(0xbf1)&&Imported['VisuMZ_2_WeaponSwapSystem']&&this['addWeaponSwapCommand'](!![]),_0x35e3fe===_0x39d681(0x5a5)&&Imported[_0x39d681(0x347)]&&this[_0x39d681(0x959)]();},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x8d9)]=function(){const _0x59f10d=_0x5bbf40,_0x1354fd=$dataSkills[this[_0x59f10d(0x8b9)][_0x59f10d(0xb4e)]()];if(!_0x1354fd)return;if(!this[_0x59f10d(0x79e)](_0x1354fd))return;const _0x28daa7=this['commandStyle'](),_0x3989b5=DataManager[_0x59f10d(0x9ac)](_0x1354fd),_0x3e47f2=DataManager['battleCommandIcon'](_0x1354fd),_0x3da1ab=_0x28daa7===_0x59f10d(0xaf3)?_0x3989b5:_0x59f10d(0x306)[_0x59f10d(0x7c2)](_0x3e47f2,_0x3989b5);this[_0x59f10d(0xabc)](_0x3da1ab,_0x59f10d(0x3d5),this[_0x59f10d(0x8b9)]['canAttack']());},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x9ce)]=function(){const _0x49be2b=_0x5bbf40,_0x4c73f0=$dataSkills[this[_0x49be2b(0x8b9)][_0x49be2b(0x3e2)]()];if(!_0x4c73f0)return;if(!this[_0x49be2b(0x79e)](_0x4c73f0))return;const _0x263bad=this[_0x49be2b(0x9dc)](),_0x50a570=DataManager[_0x49be2b(0x9ac)](_0x4c73f0),_0x4d9985=DataManager[_0x49be2b(0x4af)](_0x4c73f0),_0x10a200=_0x263bad===_0x49be2b(0xaf3)?_0x50a570:'\x5cI[%1]%2'[_0x49be2b(0x7c2)](_0x4d9985,_0x50a570);this[_0x49be2b(0xabc)](_0x10a200,_0x49be2b(0x2c0),this[_0x49be2b(0x8b9)][_0x49be2b(0x4d2)]());},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x3f6)]=function(){const _0x71b64c=_0x5bbf40,_0x3b99ef=this[_0x71b64c(0x9dc)](),_0x1854a5=VisuMZ[_0x71b64c(0x7d9)]['Settings'][_0x71b64c(0xbb9)][_0x71b64c(0xa53)],_0x9d1d6a=_0x3b99ef===_0x71b64c(0xaf3)?TextManager['item']:_0x71b64c(0x306)['format'](_0x1854a5,TextManager['item']),_0x347c42=this[_0x71b64c(0xbac)]();this['addCommand'](_0x9d1d6a,_0x71b64c(0x92e),_0x347c42);},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0xbac)]=function(){const _0x1ec6be=_0x5bbf40;return this[_0x1ec6be(0x8b9)]&&this['_actor']['canUseItemCommand']();},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x927)]=function(){const _0x515d41=_0x5bbf40,_0x356ad7=this['_actor'][_0x515d41(0x5cf)]();for(const _0x4e7cb4 of _0x356ad7){this[_0x515d41(0xae1)](_0x4e7cb4);}},Window_ActorCommand[_0x5bbf40(0x68c)]['addSkillTypeCommand']=function(_0x8a03ad){const _0x36c9e8=_0x5bbf40;let _0xd12964=$dataSystem[_0x36c9e8(0x5cf)][_0x8a03ad];if(!_0xd12964)return;let _0x53225f=_0xd12964;const _0x44a54d=this['commandStyle']();if(_0x44a54d===_0x36c9e8(0xaf3))_0x53225f=_0x53225f[_0x36c9e8(0xbd9)](/\x1I\[(\d+)\]/gi,''),_0x53225f=_0x53225f[_0x36c9e8(0xbd9)](/\\I\[(\d+)\]/gi,'');else{if(!_0xd12964[_0x36c9e8(0x24d)](/\\I\[(\d+)\]/i)){const _0x2b711c=Imported[_0x36c9e8(0x881)]?VisuMZ[_0x36c9e8(0x22b)][_0x36c9e8(0x8be)][_0x36c9e8(0x3d1)]:VisuMZ[_0x36c9e8(0x7d9)][_0x36c9e8(0x8be)][_0x36c9e8(0xbb9)],_0x546650=$dataSystem[_0x36c9e8(0xa0f)][_0x36c9e8(0x608)](_0x8a03ad),_0x46359f=_0x546650?_0x2b711c[_0x36c9e8(0x4e2)]:_0x2b711c[_0x36c9e8(0x889)];_0x53225f='\x5cI[%1]%2'['format'](_0x46359f,_0xd12964);}}this[_0x36c9e8(0xabc)](_0x53225f,'skill',!![],_0x8a03ad);},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0xab5)]=function(){const _0x3642e9=_0x5bbf40,_0x2b63cc=this[_0x3642e9(0x8b9)][_0x3642e9(0x5cf)](),_0x37fcbe=this['_actor'][_0x3642e9(0x983)]();for(const _0xf5e6fb of _0x37fcbe){if(!_0xf5e6fb)continue;if(Imported['VisuMZ_1_SkillsStatesCore']){if(this[_0x3642e9(0xc0a)](_0xf5e6fb))continue;if(this[_0x3642e9(0x657)](_0xf5e6fb))continue;}else{if(!_0x2b63cc[_0x3642e9(0x608)](_0xf5e6fb[_0x3642e9(0x2e2)]))continue;}this['addSingleSkillCommand'](_0xf5e6fb);}},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0xc0a)]=function(_0x329cb3){const _0x1ee674=_0x5bbf40,_0x33b78a=this[_0x1ee674(0x8b9)][_0x1ee674(0x5cf)](),_0x6019ec=_0x33b78a[_0x1ee674(0xafb)](_0x4731c3=>DataManager['getSkillTypes'](_0x329cb3)[_0x1ee674(0x608)](_0x4731c3));return _0x6019ec['length']<=0x0;},Window_ActorCommand['prototype'][_0x5bbf40(0x657)]=function(_0x38ba71){const _0x34b36e=_0x5bbf40;if(Imported[_0x34b36e(0x881)]){if(VisuMZ[_0x34b36e(0x22b)][_0x34b36e(0x77e)]>=1.24){if(this['_actor']){if(!VisuMZ[_0x34b36e(0x22b)][_0x34b36e(0x541)](this[_0x34b36e(0x8b9)],_0x38ba71))return!![];if(!VisuMZ['SkillsStatesCore']['CheckVisibleSwitchNotetags'](this[_0x34b36e(0x8b9)],_0x38ba71))return!![];if(!VisuMZ['SkillsStatesCore'][_0x34b36e(0x58e)](this[_0x34b36e(0x8b9)],_0x38ba71))return!![];}}else{if(!Window_SkillList['prototype'][_0x34b36e(0x8f5)]['call'](this,_0x38ba71))return!![];if(!Window_SkillList[_0x34b36e(0x68c)][_0x34b36e(0x681)][_0x34b36e(0x86a)](this,_0x38ba71))return!![];if(!Window_SkillList['prototype'][_0x34b36e(0x91c)][_0x34b36e(0x86a)](this,_0x38ba71))return!![];}}return![];},Window_ActorCommand[_0x5bbf40(0x68c)]['addSingleSkillCommand']=function(_0x549383){const _0x1ebd68=_0x5bbf40;if(!_0x549383)return;if(!this[_0x1ebd68(0x79e)](_0x549383))return;const _0x344292=this['commandStyle'](),_0x3d4928=DataManager[_0x1ebd68(0x9ac)](_0x549383),_0x43ef68=DataManager['battleCommandIcon'](_0x549383),_0x7f6ed3=_0x344292===_0x1ebd68(0xaf3)?_0x3d4928:_0x1ebd68(0x306)[_0x1ebd68(0x7c2)](_0x43ef68,_0x3d4928),_0x34e982=this[_0x1ebd68(0x8b9)][_0x1ebd68(0x56d)](_0x549383);this['addCommand'](_0x7f6ed3,_0x1ebd68(0x311),_0x34e982,_0x549383['id']);},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x79e)]=function(_0x1fa993){const _0x58fcbd=_0x5bbf40,_0x2e31d7=_0x1fa993['note'];if(_0x2e31d7[_0x58fcbd(0x24d)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x58fcbd(0x8b9)][_0x58fcbd(0xa65)](_0x1fa993['id']))return![];}if(_0x2e31d7[_0x58fcbd(0x24d)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x58fcbd(0x8b9)][_0x58fcbd(0x57a)](_0x1fa993['id']))return![];}const _0x3fcbb9=VisuMZ[_0x58fcbd(0x7d9)][_0x58fcbd(0xa6b)](_0x1fa993,_0x58fcbd(0x28b));if(VisuMZ[_0x58fcbd(0x7d9)]['JS'][_0x3fcbb9]){if(!VisuMZ[_0x58fcbd(0x7d9)]['JS'][_0x3fcbb9][_0x58fcbd(0x86a)](this,this['_actor'],_0x1fa993))return![];}return VisuMZ['BattleCore'][_0x58fcbd(0xa21)](_0x1fa993);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xa21)]=function(_0x43b3df){const _0x23f70e=_0x5bbf40,_0x1e63a8=_0x43b3df[_0x23f70e(0x509)];if(_0x1e63a8[_0x23f70e(0x24d)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x221611=JSON[_0x23f70e(0x8fb)]('['+RegExp['$1'][_0x23f70e(0x24d)](/\d+/g)+']');for(const _0xf07c14 of _0x221611){if(!$gameSwitches[_0x23f70e(0x371)](_0xf07c14))return![];}return!![];}if(_0x1e63a8[_0x23f70e(0x24d)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1f7913=JSON[_0x23f70e(0x8fb)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x2881f9 of _0x1f7913){if(!$gameSwitches[_0x23f70e(0x371)](_0x2881f9))return![];}return!![];}if(_0x1e63a8[_0x23f70e(0x24d)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2d25d1=JSON[_0x23f70e(0x8fb)]('['+RegExp['$1'][_0x23f70e(0x24d)](/\d+/g)+']');for(const _0x57c072 of _0x2d25d1){if($gameSwitches['value'](_0x57c072))return!![];}return![];}if(_0x1e63a8[_0x23f70e(0x24d)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x32cf3d=JSON[_0x23f70e(0x8fb)]('['+RegExp['$1'][_0x23f70e(0x24d)](/\d+/g)+']');for(const _0x34f1ca of _0x32cf3d){if(!$gameSwitches[_0x23f70e(0x371)](_0x34f1ca))return!![];}return![];}if(_0x1e63a8[_0x23f70e(0x24d)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1d8f79=JSON[_0x23f70e(0x8fb)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x242e1f of _0x1d8f79){if(!$gameSwitches['value'](_0x242e1f))return!![];}return![];}if(_0x1e63a8['match'](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x45f82c=JSON[_0x23f70e(0x8fb)]('['+RegExp['$1'][_0x23f70e(0x24d)](/\d+/g)+']');for(const _0x55317b of _0x45f82c){if($gameSwitches[_0x23f70e(0x371)](_0x55317b))return![];}return!![];}return!![];},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0xc07)]=function(){const _0xf62195=_0x5bbf40,_0x134661=this[_0xf62195(0x9dc)](),_0x20cdcc=VisuMZ[_0xf62195(0x7d9)][_0xf62195(0x8be)][_0xf62195(0x8e3)]['CmdIconEscape'],_0x3ed99f=_0x134661===_0xf62195(0xaf3)?TextManager['escape']:_0xf62195(0x306)[_0xf62195(0x7c2)](_0x20cdcc,TextManager['escape']),_0x37b63e=this[_0xf62195(0x606)]();this[_0xf62195(0xabc)](_0x3ed99f,'escape',_0x37b63e);},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x606)]=function(){const _0x9bb36c=_0x5bbf40;return BattleManager[_0x9bb36c(0x42c)]();},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x339)]=function(){const _0x436007=_0x5bbf40,_0x1f1779=this[_0x436007(0x9dc)](),_0x14b44c=VisuMZ[_0x436007(0x7d9)][_0x436007(0x8be)][_0x436007(0x8e3)][_0x436007(0x8d1)],_0x30034b=_0x1f1779==='text'?TextManager['autoBattle']:_0x436007(0x306)[_0x436007(0x7c2)](_0x14b44c,TextManager[_0x436007(0x938)]),_0x554210=this[_0x436007(0x32a)]();this['addCommand'](_0x30034b,_0x436007(0x938),_0x554210);},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x32a)]=function(){return!![];},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x826)]=function(){const _0x1c3006=_0x5bbf40;return VisuMZ[_0x1c3006(0x7d9)]['Settings'][_0x1c3006(0xbb9)]['CmdTextAlign'];},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0xbfb)]=function(_0x3fa42b){const _0x3e57ff=_0x5bbf40,_0x3c8e97=this[_0x3e57ff(0xa85)](_0x3fa42b);if(_0x3c8e97==='iconText')this[_0x3e57ff(0x96c)](_0x3fa42b);else _0x3c8e97==='icon'?this[_0x3e57ff(0x638)](_0x3fa42b):Window_Command['prototype']['drawItem'][_0x3e57ff(0x86a)](this,_0x3fa42b);this[_0x3e57ff(0x370)](_0x3fa42b);},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x9dc)]=function(){const _0x140b6c=_0x5bbf40;return VisuMZ[_0x140b6c(0x7d9)][_0x140b6c(0x8be)][_0x140b6c(0xbb9)][_0x140b6c(0x246)];},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0xa85)]=function(_0x8d3d89){const _0x5af87c=_0x5bbf40;if(_0x8d3d89<0x0)return _0x5af87c(0xaf3);const _0x41361b=this[_0x5af87c(0x9dc)]();if(_0x41361b!==_0x5af87c(0x484))return _0x41361b;else{if(this[_0x5af87c(0x39f)]()>0x0){const _0x94ef2=this[_0x5af87c(0x62a)](_0x8d3d89);if(_0x94ef2['match'](/\\I\[(\d+)\]/i)){const _0x2175d7=this[_0x5af87c(0x8c7)](_0x8d3d89),_0x4ad437=this['textSizeEx'](_0x94ef2)[_0x5af87c(0x2fc)];return _0x4ad437<=_0x2175d7[_0x5af87c(0x2fc)]?'iconText':_0x5af87c(0x7fe);}}}return _0x5af87c(0xaf3);},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x96c)]=function(_0x182bc8){const _0x18b516=_0x5bbf40,_0x3bbe00=this['itemLineRect'](_0x182bc8),_0x42ff7b=this['commandName'](_0x182bc8),_0x187af3=this[_0x18b516(0x8de)](_0x42ff7b)['width'];this['changePaintOpacity'](this[_0x18b516(0x8a7)](_0x182bc8));const _0x12dfef=this['itemTextAlign']();if(_0x12dfef===_0x18b516(0x676))this[_0x18b516(0x8fa)](_0x42ff7b,_0x3bbe00['x']+_0x3bbe00[_0x18b516(0x2fc)]-_0x187af3,_0x3bbe00['y'],_0x187af3);else{if(_0x12dfef===_0x18b516(0x572)){const _0x12fb22=_0x3bbe00['x']+Math['floor']((_0x3bbe00[_0x18b516(0x2fc)]-_0x187af3)/0x2);this[_0x18b516(0x8fa)](_0x42ff7b,_0x12fb22,_0x3bbe00['y'],_0x187af3);}else this[_0x18b516(0x8fa)](_0x42ff7b,_0x3bbe00['x'],_0x3bbe00['y'],_0x187af3);}},Window_ActorCommand['prototype'][_0x5bbf40(0x638)]=function(_0x53a39c){const _0x2b4daa=_0x5bbf40;this[_0x2b4daa(0x62a)](_0x53a39c)[_0x2b4daa(0x24d)](/\\I\[(\d+)\]/i);const _0x4a3f17=Number(RegExp['$1'])||0x0,_0x25a5f3=this['itemLineRect'](_0x53a39c),_0x3dcc95=_0x25a5f3['x']+Math[_0x2b4daa(0x9d6)]((_0x25a5f3[_0x2b4daa(0x2fc)]-ImageManager['iconWidth'])/0x2),_0xcf242f=_0x25a5f3['y']+(_0x25a5f3[_0x2b4daa(0x570)]-ImageManager[_0x2b4daa(0x790)])/0x2;this['drawIcon'](_0x4a3f17,_0x3dcc95,_0xcf242f);},Window_ActorCommand['prototype'][_0x5bbf40(0x370)]=function(_0x2600ce){const _0x46f5b2=_0x5bbf40;if(!(VisuMZ['BattleCore']['Settings']['ActorCmd']['ShowCosts']??!![]))return;const _0x43eec9=this['commandSymbol'](_0x2600ce);if(![_0x46f5b2(0x3d5),'guard',_0x46f5b2(0x311)][_0x46f5b2(0x608)](_0x43eec9))return;const _0x33881b=this[_0x46f5b2(0x8c7)](_0x2600ce);let _0x5026af=null;if(_0x43eec9==='attack')_0x5026af=$dataSkills[this[_0x46f5b2(0x8b9)][_0x46f5b2(0xb4e)]()];else _0x43eec9===_0x46f5b2(0x2c0)?_0x5026af=$dataSkills[this[_0x46f5b2(0x8b9)]['guardSkillId']()]:_0x5026af=$dataSkills[this[_0x46f5b2(0x528)][_0x2600ce][_0x46f5b2(0xb37)]];this[_0x46f5b2(0x635)](this['_actor'],_0x5026af,_0x33881b['x'],_0x33881b['y'],_0x33881b[_0x46f5b2(0x2fc)]);},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x635)]=function(_0x2cfbe2,_0x3ed673,_0x3934c7,_0x8bef2f,_0x5f1225){const _0x290fc3=_0x5bbf40;if(!_0x3ed673)return;Imported[_0x290fc3(0x881)]?Window_Command[_0x290fc3(0x68c)][_0x290fc3(0x635)][_0x290fc3(0x86a)](this,_0x2cfbe2,_0x3ed673,_0x3934c7,_0x8bef2f,_0x5f1225):Window_SkillList[_0x290fc3(0x68c)][_0x290fc3(0x635)][_0x290fc3(0x86a)](this,_0x3ed673,_0x3934c7,_0x8bef2f,_0x5f1225);},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x428)]=function(){},Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0xbc2)]=function(){const _0x36585e=_0x5bbf40;Window_Command['prototype']['activate']['call'](this);const _0x39b09d=this[_0x36585e(0x6e0)]();_0x39b09d===_0x36585e(0x7e8)&&this[_0x36585e(0x68a)]();},Window_ActorCommand['prototype'][_0x5bbf40(0x6e0)]=function(){const _0x482454=_0x5bbf40;if(this[_0x482454(0x506)])return this[_0x482454(0x506)];return this[_0x482454(0x506)]=SceneManager[_0x482454(0x2f2)][_0x482454(0x6e0)](),this[_0x482454(0x506)];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xa66)]=Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x39b)],Window_ActorCommand[_0x5bbf40(0x68c)][_0x5bbf40(0x39b)]=function(_0x33f324){const _0x4a7239=_0x5bbf40,_0x2c44d6=this[_0x4a7239(0x6e0)]();if(_0x33f324&&['xp',_0x4a7239(0x20a)][_0x4a7239(0x608)](_0x2c44d6))this[_0x4a7239(0x40e)](_0x33f324);else _0x33f324&&[_0x4a7239(0x7e8)][_0x4a7239(0x608)](_0x2c44d6)&&(this[_0x4a7239(0xa8e)](_0x33f324),this[_0x4a7239(0x68a)]());VisuMZ[_0x4a7239(0x7d9)][_0x4a7239(0xa66)][_0x4a7239(0x86a)](this,_0x33f324),_0x33f324&&$gameTroop[_0x4a7239(0xb48)]()['length']>0x0&&_0x33f324[_0x4a7239(0xb3a)]()&&_0x33f324[_0x4a7239(0xb3a)]()['stepForward']();},Window_ActorCommand['prototype']['resizeWindowXPStyle']=function(_0x159d62){const _0x3a7dce=_0x5bbf40,_0x467276=VisuMZ[_0x3a7dce(0x7d9)]['Settings'][_0x3a7dce(0x5c3)][_0x3a7dce(0x495)],_0x14e38d=Math['round'](Graphics[_0x3a7dce(0x99d)]/0x3),_0x142b65=Math[_0x3a7dce(0x6ea)](Graphics[_0x3a7dce(0x99d)]/$gameParty[_0x3a7dce(0xbc7)]()[_0x3a7dce(0x348)]),_0xcb8966=Math[_0x3a7dce(0xb10)](Math[_0x3a7dce(0xaf8)](_0x14e38d,_0x142b65),_0x467276),_0x23a1b9=this[_0x3a7dce(0x26c)](VisuMZ[_0x3a7dce(0x7d9)][_0x3a7dce(0x8be)][_0x3a7dce(0x5c3)][_0x3a7dce(0x59b)]),_0x26c957=Math[_0x3a7dce(0x9d6)]((Graphics['boxWidth']-Graphics[_0x3a7dce(0x2fc)])/0x2),_0x24a10c=Graphics[_0x3a7dce(0x99d)]-_0x26c957,_0x2c695c=(Math[_0x3a7dce(0x6ea)](_0x142b65*_0x159d62[_0x3a7dce(0x705)]())+Math[_0x3a7dce(0x6ea)]((_0x142b65-_0xcb8966)/0x2))['clamp'](_0x26c957,_0x24a10c-_0xcb8966),_0x3a10b9=Math[_0x3a7dce(0x6ea)](SceneManager['_scene']['_statusWindow']['y']-_0x23a1b9);this[_0x3a7dce(0x75f)](_0x2c695c,_0x3a10b9,_0xcb8966,_0x23a1b9),this[_0x3a7dce(0xba6)](),this[_0x3a7dce(0x225)](0x1);},Window_ActorCommand['prototype'][_0x5bbf40(0xa8e)]=function(_0x59741c){const _0x214226=_0x5bbf40,_0xffd93=SceneManager[_0x214226(0x2f2)][_0x214226(0x4a8)]();this[_0x214226(0x75f)](_0xffd93['x'],_0xffd93['y'],_0xffd93[_0x214226(0x2fc)],_0xffd93['height']),this[_0x214226(0xba6)](),this[_0x214226(0x225)](0x0);},Window_ActorCommand[_0x5bbf40(0x68c)]['refreshDimmerBitmap']=function(){const _0x30a67a=_0x5bbf40;if(this[_0x30a67a(0xaee)]){const _0x5e5953=this[_0x30a67a(0xaee)][_0x30a67a(0xaa1)],_0x2b39c5=this[_0x30a67a(0x2fc)]-0x8,_0x4d0fe6=this[_0x30a67a(0x570)],_0x3fa7c1=this[_0x30a67a(0x2ed)],_0x52cdb5=ColorManager[_0x30a67a(0x38d)](),_0x2dca80=ColorManager[_0x30a67a(0x2d3)]();this[_0x30a67a(0xaee)]['x']=0x4,_0x5e5953['resize'](_0x2b39c5,_0x4d0fe6),_0x5e5953[_0x30a67a(0x9a1)](0x0,0x0,_0x2b39c5,_0x3fa7c1,_0x2dca80,_0x52cdb5,!![]),_0x5e5953[_0x30a67a(0xad5)](0x0,_0x3fa7c1,_0x2b39c5,_0x4d0fe6-_0x3fa7c1*0x2,_0x52cdb5),_0x5e5953[_0x30a67a(0x9a1)](0x0,_0x4d0fe6-_0x3fa7c1,_0x2b39c5,_0x3fa7c1,_0x52cdb5,_0x2dca80,!![]),this['_dimmerSprite']['setFrame'](0x0,0x0,_0x2b39c5,_0x4d0fe6);}},Window_ActorCommand[_0x5bbf40(0x68c)]['updateHelp']=function(){const _0x478e30=_0x5bbf40;if(!this[_0x478e30(0x8b9)])return;const _0x1578cf=VisuMZ[_0x478e30(0x7d9)]['Settings'][_0x478e30(0xbb9)],_0x1a1ca2=this['currentSymbol']();switch(_0x1a1ca2){case _0x478e30(0x3d5):this[_0x478e30(0x362)]($dataSkills[this[_0x478e30(0x8b9)]['attackSkillId']()]);break;case _0x478e30(0x2c0):this['setHelpWindowItem']($dataSkills[this['_actor'][_0x478e30(0x3e2)]()]);break;case _0x478e30(0x29f):const _0x2f2513=_0x1578cf[_0x478e30(0x40a)],_0x58e49b=_0x2f2513[_0x478e30(0x7c2)]($dataSystem[_0x478e30(0x5cf)][this[_0x478e30(0x710)]()]);this['_helpWindow'][_0x478e30(0x57c)](_0x58e49b);break;case _0x478e30(0x311):this[_0x478e30(0x362)]($dataSkills[this[_0x478e30(0x710)]()]);break;case _0x478e30(0x92e):this[_0x478e30(0x465)][_0x478e30(0x57c)](_0x1578cf[_0x478e30(0x1f6)]);break;case _0x478e30(0x8f3):this[_0x478e30(0x465)]['setText'](_0x1578cf[_0x478e30(0xbee)]);break;case _0x478e30(0x938):this[_0x478e30(0x465)][_0x478e30(0x57c)](_0x1578cf[_0x478e30(0x9e8)]);break;default:this[_0x478e30(0x465)][_0x478e30(0x57c)]('');break;}},Window_ActorCommand[_0x5bbf40(0x68c)]['selectLast']=function(){const _0x2e8d8b=_0x5bbf40;this[_0x2e8d8b(0x4c0)](0x0);if(this[_0x2e8d8b(0x8b9)]&&ConfigManager[_0x2e8d8b(0x550)]){const _0x45caca=this['_actor']['lastCommandSymbol']();this[_0x2e8d8b(0xa4c)](_0x45caca);if(_0x45caca==='skill'){const _0x4a8cc1=this['_actor'][_0x2e8d8b(0xbcf)]();if(_0x4a8cc1){const _0x123b87=this[_0x2e8d8b(0x462)](_0x2e8d8b(0x29f),_0x4a8cc1['stypeId']);this[_0x2e8d8b(0x799)](_0x123b87||0x0);}}else{if(_0x45caca==='singleSkill'){const _0x5632b4=this['_actor'][_0x2e8d8b(0xbcf)]();if(_0x5632b4){const _0x56df6b=this[_0x2e8d8b(0x462)](_0x2e8d8b(0x311),_0x5632b4['id']);this[_0x2e8d8b(0x799)](_0x56df6b||0x0);}}}}},Window_ActorCommand['prototype'][_0x5bbf40(0x462)]=function(_0x1f9638,_0x3bfe11){const _0x325099=_0x5bbf40;return this[_0x325099(0x528)][_0x325099(0x248)](_0x48fa2d=>_0x48fa2d['symbol']===_0x1f9638&&_0x48fa2d[_0x325099(0xb37)]===_0x3bfe11);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x9f1)]=Window_BattleStatus['prototype']['initialize'],Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x3bb)]=function(_0x29091c){const _0x2021e0=_0x5bbf40;VisuMZ[_0x2021e0(0x7d9)][_0x2021e0(0x9f1)][_0x2021e0(0x86a)](this,_0x29091c),this['initBattleCore'](),this[_0x2021e0(0x883)]();},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x6e0)]=function(){const _0x26ba6f=_0x5bbf40;if(this[_0x26ba6f(0x506)])return this[_0x26ba6f(0x506)];return this[_0x26ba6f(0x506)]=SceneManager[_0x26ba6f(0x2f2)][_0x26ba6f(0x6e0)](),this['_battleLayoutStyle'];},Window_BattleStatus['prototype']['initBattleCore']=function(){const _0x1dfcc8=_0x5bbf40;this[_0x1dfcc8(0x55e)]=this['isFrameVisible']();const _0x4fb62f=VisuMZ['BattleCore'][_0x1dfcc8(0x8be)][_0x1dfcc8(0x5c3)];_0x4fb62f['StatusWindowSkinHide']&&(this[_0x1dfcc8(0x5d3)]=0x0);},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x354)]=function(){const _0x5a9a11=_0x5bbf40,_0x280beb=VisuMZ['BattleCore'][_0x5a9a11(0x8be)][_0x5a9a11(0x5c3)];if(_0x280beb[_0x5a9a11(0x75b)])return!![];const _0x3b2748=this[_0x5a9a11(0x6e0)]();switch(_0x3b2748){case _0x5a9a11(0x62f):case _0x5a9a11(0x7e8):return!![];break;case'default':case'xp':case _0x5a9a11(0x20a):default:return![];break;}},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x44d)]=function(){return this['isFrameVisible']()?0x0:0xa;},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x75c)]=function(){const _0x2ac619=_0x5bbf40,_0x4f1f93=this[_0x2ac619(0x6e0)]();switch(_0x4f1f93){case'list':return 0x1;break;case'xp':case _0x2ac619(0x20a):return $gameParty['battleMembers']()[_0x2ac619(0x348)];break;case _0x2ac619(0x81f):default:return $gameParty['maxBattleMembers']();break;}},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x829)]=function(){const _0x2440f2=_0x5bbf40,_0x94d55e=this[_0x2440f2(0x6e0)]();switch(_0x94d55e){case'list':return Window_StatusBase[_0x2440f2(0x68c)][_0x2440f2(0x829)][_0x2440f2(0x86a)](this);break;case _0x2440f2(0x81f):case'xp':case'portrait':default:return this['innerHeight'];break;}},Window_BattleStatus[_0x5bbf40(0x68c)]['rowSpacing']=function(){const _0x405ddc=_0x5bbf40,_0x2a87bc=this['battleLayoutStyle']();switch(_0x2a87bc){case'list':return Window_StatusBase[_0x405ddc(0x68c)][_0x405ddc(0xb1d)][_0x405ddc(0x86a)](this);break;case'default':case'xp':case _0x405ddc(0x20a):default:return 0x0;break;}},Window_BattleStatus['prototype'][_0x5bbf40(0x284)]=function(){const _0x145370=_0x5bbf40;this[_0x145370(0x354)]()?Window_StatusBase['prototype'][_0x145370(0x284)][_0x145370(0x86a)](this):this[_0x145370(0x2ed)]=0x8;},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x5e7)]=function(){const _0x5dade3=_0x5bbf40,_0x1f9cec=VisuMZ[_0x5dade3(0x7d9)][_0x5dade3(0x8be)]['BattleLayout'];_0x1f9cec[_0x5dade3(0x75b)]?this[_0x5dade3(0x4f6)]=ImageManager[_0x5dade3(0x535)](_0x1f9cec[_0x5dade3(0x75b)]):Window_StatusBase['prototype'][_0x5dade3(0x5e7)][_0x5dade3(0x86a)](this);},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x69b)]=function(_0x29bb45){const _0x5d7a8c=_0x5bbf40,_0x50c6ed=VisuMZ[_0x5d7a8c(0x7d9)]['Settings'][_0x5d7a8c(0x5c3)];if(_0x50c6ed[_0x5d7a8c(0x3f7)])return;Window_StatusBase[_0x5d7a8c(0x68c)][_0x5d7a8c(0x69b)][_0x5d7a8c(0x86a)](this,_0x29bb45);},Window_BattleStatus[_0x5bbf40(0x68c)]['requestRefresh']=function(){const _0x5901e0=_0x5bbf40;this[_0x5901e0(0x469)]=!![];},Window_BattleStatus['prototype'][_0x5bbf40(0x69a)]=function(){const _0x5c8873=_0x5bbf40;Window_StatusBase[_0x5c8873(0x68c)][_0x5c8873(0x69a)][_0x5c8873(0x86a)](this),this[_0x5c8873(0x5bc)](),this[_0x5c8873(0x41e)]();if(this[_0x5c8873(0x6e0)]()===_0x5c8873(0x7e8))this[_0x5c8873(0x549)]();},Window_BattleStatus[_0x5bbf40(0x68c)]['updateRefresh']=function(){const _0x156620=_0x5bbf40;if($gameTemp[_0x156620(0x87a)]())this[_0x156620(0x5fa)](),this[_0x156620(0x469)]=![],$gameTemp[_0x156620(0x279)]();else this[_0x156620(0x469)]&&(this[_0x156620(0x469)]=![],this[_0x156620(0x82f)](),this['updateAttachmentSprites']());},Window_BattleStatus[_0x5bbf40(0x68c)]['show']=function(){const _0x553169=_0x5bbf40;Window_StatusBase['prototype'][_0x553169(0xab4)]['call'](this);if(!$gameSystem[_0x553169(0xb7a)]())this[_0x553169(0x82f)]();},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x428)]=function(){const _0x4ca551=_0x5bbf40;if(this[_0x4ca551(0xaad)]===Window_BattleStatus)return;Window_StatusBase[_0x4ca551(0x68c)][_0x4ca551(0x428)][_0x4ca551(0x86a)](this);},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x4bf)]=function(_0x5089ae){const _0x46ba7c=_0x5bbf40,_0x15a5b1=this[_0x46ba7c(0x6e0)]();switch(_0x15a5b1){case'xp':case _0x46ba7c(0x20a):break;case _0x46ba7c(0x81f):case'list':case'border':default:return Window_StatusBase[_0x46ba7c(0x68c)][_0x46ba7c(0x4bf)][_0x46ba7c(0x86a)](this,_0x5089ae);break;}},VisuMZ['BattleCore'][_0x5bbf40(0x970)]=Window_BattleStatus['prototype'][_0x5bbf40(0x300)],Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x300)]=function(_0x57a157){const _0x19c40c=_0x5bbf40,_0x4399f1=this[_0x19c40c(0x6e0)]();switch(_0x4399f1){case _0x19c40c(0x62f):this[_0x19c40c(0x6a5)](_0x57a157);break;case'xp':this[_0x19c40c(0x9f5)](_0x57a157);break;case _0x19c40c(0x20a):this[_0x19c40c(0xb8e)](_0x57a157);break;case _0x19c40c(0x81f):case _0x19c40c(0x7e8):default:VisuMZ[_0x19c40c(0x7d9)]['Window_BattleStatus_drawItemImage'][_0x19c40c(0x86a)](this,_0x57a157);break;}},Window_BattleStatus['prototype'][_0x5bbf40(0xa89)]=function(_0x37d00e){const _0x7b1ae4=_0x5bbf40,_0x4bc6d2=this[_0x7b1ae4(0x6e0)]();if(!$gameSystem[_0x7b1ae4(0xb7a)]())this[_0x7b1ae4(0x259)](_0x37d00e);switch(_0x4bc6d2){case _0x7b1ae4(0x62f):this[_0x7b1ae4(0x717)](_0x37d00e);break;case'xp':case _0x7b1ae4(0x20a):case _0x7b1ae4(0x81f):case _0x7b1ae4(0x7e8):default:this[_0x7b1ae4(0x9e2)](_0x37d00e);break;}},Window_BattleStatus['prototype']['refreshCursor']=function(){const _0x586367=_0x5bbf40,_0x7e6d9d=this[_0x586367(0x6e0)]();if(['xp'][_0x586367(0x608)](_0x7e6d9d)&&!$gameSystem['isSideView']()){this[_0x586367(0xbe3)](0x0,0x0,0x0,0x0);return;}Window_StatusBase['prototype']['refreshCursor'][_0x586367(0x86a)](this);},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x259)]=function(_0x1040b3){const _0x1618a4=_0x5bbf40,_0x47b2c0=this[_0x1618a4(0x297)](_0x1040b3)['battler']();if(!_0x47b2c0)return;const _0x3ae000=this['battleLayoutStyle'](),_0x1acc9a=this[_0x1618a4(0xb66)](_0x1040b3);let _0x430c2c=Math[_0x1618a4(0x6ea)](_0x1acc9a['x']+_0x1acc9a['width']/0x2)+this['padding'];['list'][_0x1618a4(0x608)](_0x3ae000)&&(_0x430c2c=_0x1acc9a['width']/$gameParty[_0x1618a4(0xbc7)]()['length'],_0x430c2c*=_0x1040b3,_0x430c2c+=_0x1acc9a[_0x1618a4(0x2fc)]/$gameParty['battleMembers']()[_0x1618a4(0x348)]/0x2);let _0x59fb87=Math[_0x1618a4(0x6ea)](this[_0x1618a4(0xb23)](_0x1040b3,_0x47b2c0,_0x1acc9a));_0x47b2c0[_0x1618a4(0x850)](_0x430c2c,_0x59fb87),this[_0x1618a4(0xa06)](_0x47b2c0,0x1),_0x47b2c0[_0x1618a4(0xab4)](),this[_0x1618a4(0xa72)](),this[_0x1618a4(0x4bd)]();},Window_BattleStatus[_0x5bbf40(0x68c)]['frontviewSpriteY']=function(_0x40c75e,_0x41bf9f,_0x34641f){const _0x40e6ab=_0x5bbf40,_0x1e2204=VisuMZ[_0x40e6ab(0x7d9)][_0x40e6ab(0x8be)][_0x40e6ab(0x5c3)],_0x4b5f93=this[_0x40e6ab(0x6e0)]();if(_0x4b5f93==='xp'){const _0x5b49c5=_0x1e2204['XPSpriteYLocation'];switch(_0x5b49c5[_0x40e6ab(0x993)]()[_0x40e6ab(0x86c)]()){case'bottom':return _0x34641f[_0x40e6ab(0x570)]-_0x41bf9f[_0x40e6ab(0x895)][_0x40e6ab(0x570)]/0x4;break;case _0x40e6ab(0x572):const _0x31b52d=_0x1e2204['XPActorDefaultHeight'];return(_0x34641f[_0x40e6ab(0x570)]+(_0x41bf9f[_0x40e6ab(0x570)]||_0x31b52d))/0x2;break;case _0x40e6ab(0x4c5):return 0x0;case _0x40e6ab(0x4e5):default:return this[_0x40e6ab(0xbda)](_0x34641f);break;}}else{if(_0x4b5f93===_0x40e6ab(0x20a)){}}return _0x41bf9f[_0x40e6ab(0x570)];},Sprite_Name[_0x5bbf40(0x68c)][_0x5bbf40(0x5c4)]=function(){return 0x24;},Sprite_Name[_0x5bbf40(0x68c)][_0x5bbf40(0x2de)]=function(){const _0x3208a8=_0x5bbf40,_0x3968de=this[_0x3208a8(0x4e5)](),_0x313298=this['bitmapWidth'](),_0x5ce151=this[_0x3208a8(0x5c4)]();this[_0x3208a8(0x269)](),this[_0x3208a8(0xaa1)][_0x3208a8(0x8cb)](),this[_0x3208a8(0xaa1)][_0x3208a8(0x802)](_0x3968de,0x4,0x0,_0x313298,_0x5ce151,_0x3208a8(0x47d));},Bitmap['prototype'][_0x5bbf40(0x802)]=function(_0x1e0414,_0x24ae98,_0x17158e,_0x843f3c,_0x59e703,_0x38c9d9){const _0x1e7efe=_0x5bbf40;TextManager[_0x1e7efe(0x222)]&&(_0x1e0414=TextManager[_0x1e7efe(0x222)](_0x1e0414));const _0x278190=this['context'],_0x383a33=_0x278190[_0x1e7efe(0x6d2)];_0x843f3c=_0x843f3c||0xffffffff;let _0x53c3ae=_0x24ae98,_0x26e57d=Math[_0x1e7efe(0x6ea)](_0x17158e+0x18/0x2+this[_0x1e7efe(0x23a)]*0.35);_0x38c9d9===_0x1e7efe(0x572)&&(_0x53c3ae+=_0x843f3c/0x2),_0x38c9d9===_0x1e7efe(0x676)&&(_0x53c3ae+=_0x843f3c),_0x278190[_0x1e7efe(0x39a)](),_0x278190['font']=this['_makeFontNameText'](),_0x278190[_0x1e7efe(0x99b)]=_0x38c9d9,_0x278190[_0x1e7efe(0x53f)]=_0x1e7efe(0xaf4),_0x278190[_0x1e7efe(0x6d2)]=0x1,this[_0x1e7efe(0x214)](_0x1e0414,_0x53c3ae,_0x26e57d,_0x843f3c),_0x278190['globalAlpha']=_0x383a33,this[_0x1e7efe(0x7b5)](_0x1e0414,_0x53c3ae,_0x26e57d,_0x843f3c),_0x278190['restore'](),this[_0x1e7efe(0xa9d)][_0x1e7efe(0x69a)]();},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0xbda)]=function(_0x17731d){const _0x5db963=_0x5bbf40;return this['basicGaugesY'](_0x17731d)-this[_0x5db963(0x615)]();},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x6a5)]=function(_0x4dfa82){const _0x2bbeca=_0x5bbf40;if(!VisuMZ[_0x2bbeca(0x7d9)]['Settings']['BattleLayout'][_0x2bbeca(0x4fa)])return;const _0x2c4a5c=this[_0x2bbeca(0x297)](_0x4dfa82),_0x1fd715=this[_0x2bbeca(0xb66)](_0x4dfa82);_0x1fd715['width']=ImageManager[_0x2bbeca(0x516)],_0x1fd715[_0x2bbeca(0x570)]-=0x2,this[_0x2bbeca(0x80d)](_0x2c4a5c,_0x1fd715['x']+0x1,_0x1fd715['y']+0x1,_0x1fd715[_0x2bbeca(0x2fc)],_0x1fd715[_0x2bbeca(0x570)]);},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x717)]=function(_0x27d1a0){const _0x3e7166=_0x5bbf40,_0x4921bc=VisuMZ['BattleCore'][_0x3e7166(0x8be)][_0x3e7166(0x5c3)],_0x456fdc=$dataSystem['optDisplayTp']?0x4:0x3,_0x4fdee5=_0x456fdc*0x80+(_0x456fdc-0x1)*0x8+0x4,_0x24f69e=this[_0x3e7166(0x297)](_0x27d1a0),_0x1b38ef=this[_0x3e7166(0xb66)](_0x27d1a0);let _0x3b55db=_0x1b38ef['x']+this[_0x3e7166(0x2ed)];_0x4921bc[_0x3e7166(0x4fa)]?_0x3b55db=_0x1b38ef['x']+ImageManager[_0x3e7166(0x516)]+0x8:_0x3b55db+=ImageManager[_0x3e7166(0x64d)];const _0x4f7c30=Math[_0x3e7166(0x6ea)](Math[_0x3e7166(0xaf8)](_0x1b38ef['x']+_0x1b38ef[_0x3e7166(0x2fc)]-_0x4fdee5,_0x3b55db)),_0x3e895e=Math[_0x3e7166(0x6ea)](_0x1b38ef['y']+(_0x1b38ef['height']-Sprite_Name[_0x3e7166(0x68c)][_0x3e7166(0x5c4)]())/0x2),_0xb000ae=Math[_0x3e7166(0x6ea)](_0x4f7c30-ImageManager['iconWidth']/0x2-0x4),_0xda6354=Math['round'](_0x1b38ef['y']+(_0x1b38ef[_0x3e7166(0x570)]-ImageManager[_0x3e7166(0x790)])/0x2+ImageManager[_0x3e7166(0x790)]/0x2);let _0x4d62c2=_0x4f7c30+0x88;const _0x14ca38=_0x3e895e;this[_0x3e7166(0x757)](_0x24f69e,_0x4f7c30-0x4+(_0x4921bc[_0x3e7166(0x729)]||0x0),_0x3e895e+(_0x4921bc[_0x3e7166(0x90f)]||0x0)),this[_0x3e7166(0x87e)](_0x24f69e,_0x4f7c30+(_0x4921bc['NameOffsetX']||0x0),_0x3e895e+(_0x4921bc[_0x3e7166(0x555)]||0x0)),this[_0x3e7166(0x290)](_0x24f69e,_0xb000ae+(_0x4921bc['StateIconOffsetX']||0x0),_0xda6354+(_0x4921bc[_0x3e7166(0x9f9)]||0x0)),this[_0x3e7166(0x30c)](_0x24f69e,'hp',_0x4d62c2+0x88*0x0+(_0x4921bc[_0x3e7166(0x617)]||0x0),_0x14ca38+(_0x4921bc[_0x3e7166(0x316)]||0x0)),this['placeGauge'](_0x24f69e,'mp',_0x4d62c2+0x88*0x1+(_0x4921bc[_0x3e7166(0x264)]||0x0),_0x14ca38+(_0x4921bc[_0x3e7166(0xb28)]||0x0)),$dataSystem[_0x3e7166(0x693)]&&this[_0x3e7166(0x30c)](_0x24f69e,'tp',_0x4d62c2+0x88*0x2+(_0x4921bc[_0x3e7166(0x613)]||0x0),_0x14ca38+(_0x4921bc['TpGaugeOffsetY']||0x0));},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x9f5)]=function(_0x216964){const _0x14f163=_0x5bbf40;if(!$gameSystem[_0x14f163(0xb7a)]())return;VisuMZ[_0x14f163(0x7d9)][_0x14f163(0x970)][_0x14f163(0x86a)](this,_0x216964);},Window_BattleStatus[_0x5bbf40(0x68c)]['drawItemStatusXPStyle']=function(_0xd3eb57){const _0x231d31=_0x5bbf40,_0x5e6ca7=VisuMZ[_0x231d31(0x7d9)][_0x231d31(0x8be)][_0x231d31(0x5c3)],_0x1accf2=this['actor'](_0xd3eb57),_0x41cd6d=this['itemRect'](_0xd3eb57),_0x4fcc58=Math[_0x231d31(0x6ea)](_0x41cd6d['x']+(_0x41cd6d[_0x231d31(0x2fc)]-0x80)/0x2),_0x254a5d=this[_0x231d31(0xbda)](_0x41cd6d);let _0x233ea0=_0x4fcc58-ImageManager['iconWidth']/0x2-0x4,_0x322ecc=_0x254a5d+ImageManager['iconHeight']/0x2;_0x233ea0-ImageManager[_0x231d31(0x64d)]/0x2<_0x41cd6d['x']&&(_0x233ea0=_0x4fcc58+ImageManager[_0x231d31(0x64d)]/0x2-0x4,_0x322ecc=_0x254a5d-ImageManager[_0x231d31(0x790)]/0x2);const _0x49f675=_0x4fcc58,_0x3e5150=this['basicGaugesY'](_0x41cd6d);this[_0x231d31(0x757)](_0x1accf2,_0x4fcc58+(_0x5e6ca7[_0x231d31(0x729)]||0x0),_0x254a5d+(_0x5e6ca7[_0x231d31(0x90f)]||0x0)),this['placeActorName'](_0x1accf2,_0x4fcc58+(_0x5e6ca7['NameOffsetX']||0x0),_0x254a5d+(_0x5e6ca7[_0x231d31(0x555)]||0x0)),this[_0x231d31(0x290)](_0x1accf2,_0x233ea0+(_0x5e6ca7[_0x231d31(0x34f)]||0x0),_0x322ecc+(_0x5e6ca7[_0x231d31(0x9f9)]||0x0)),this[_0x231d31(0x30c)](_0x1accf2,'hp',_0x49f675+(_0x5e6ca7[_0x231d31(0x617)]||0x0),_0x3e5150+(_0x5e6ca7[_0x231d31(0x316)]||0x0)),this['placeGauge'](_0x1accf2,'mp',_0x49f675+(_0x5e6ca7[_0x231d31(0x264)]||0x0),_0x3e5150+this[_0x231d31(0x615)]()+(_0x5e6ca7[_0x231d31(0xb28)]||0x0)),$dataSystem[_0x231d31(0x693)]&&this[_0x231d31(0x30c)](_0x1accf2,'tp',_0x49f675+(_0x5e6ca7['TpGaugeOffsetX']||0x0),_0x3e5150+this['gaugeLineHeight']()*0x2+(_0x5e6ca7[_0x231d31(0x392)]||0x0));},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x5d5)]=function(_0x4d0e48){const _0x20b15b=_0x5bbf40;if(!VisuMZ[_0x20b15b(0x7d9)][_0x20b15b(0x8be)][_0x20b15b(0x5c3)][_0x20b15b(0x83d)])return![];if(_0x4d0e48['getBattlePortrait']())return!![];return Imported['VisuMZ_1_MainMenuCore']&&_0x4d0e48['getMenuImage']();},Game_Actor[_0x5bbf40(0x68c)]['getBattlePortraitOffsetX']=function(){const _0x4af33d=_0x5bbf40;if(this['actor']()['note'][_0x4af33d(0x24d)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x4af33d(0x509)][_0x4af33d(0x24d)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor['prototype']['getBattlePortraitOffsetY']=function(){const _0x94ed4=_0x5bbf40;if(this['actor']()[_0x94ed4(0x509)][_0x94ed4(0x24d)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x94ed4(0x297)]()[_0x94ed4(0x509)][_0x94ed4(0x24d)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0xb8e)]=function(_0x1f5fd2){const _0x5235ac=_0x5bbf40,_0xb00cc=this[_0x5235ac(0x297)](_0x1f5fd2);if(this[_0x5235ac(0x5d5)](_0xb00cc)){const _0x239301=_0x5235ac(0x630)[_0x5235ac(0x7c2)](_0xb00cc[_0x5235ac(0xbea)]()),_0x76059b=this['createInnerPortrait'](_0x239301,Sprite),_0x16c793=_0xb00cc[_0x5235ac(0xb5c)]();_0x16c793!==''?_0x76059b[_0x5235ac(0xaa1)]=ImageManager[_0x5235ac(0x2e8)](_0x16c793):_0x76059b['bitmap']=ImageManager[_0x5235ac(0x9d3)];const _0x3557dc=this[_0x5235ac(0xb66)](_0x1f5fd2);_0x76059b[_0x5235ac(0x600)]['x']=0.5,_0x76059b[_0x5235ac(0x600)]['y']=0x1;let _0x21b274=Math[_0x5235ac(0x6ea)](_0x3557dc['x']+_0x3557dc[_0x5235ac(0x2fc)]/0x2)+this['padding'];_0x21b274+=_0xb00cc['getBattlePortraitOffsetX']();let _0xe3fb35=Math['round'](this[_0x5235ac(0x570)]);_0xe3fb35+=_0xb00cc[_0x5235ac(0x967)](),_0x76059b[_0x5235ac(0x75f)](_0x21b274,_0xe3fb35);const _0x4739f6=VisuMZ[_0x5235ac(0x7d9)][_0x5235ac(0x8be)][_0x5235ac(0x5c3)][_0x5235ac(0x7aa)];_0x76059b[_0x5235ac(0x5f5)]['x']=_0x4739f6,_0x76059b[_0x5235ac(0x5f5)]['y']=_0x4739f6,_0x76059b['show']();}else{const _0x436551=this['faceRect'](_0x1f5fd2);this[_0x5235ac(0x80d)](_0xb00cc,_0x436551['x'],_0x436551['y'],_0x436551[_0x5235ac(0x2fc)],_0x436551[_0x5235ac(0x570)]);}},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x28f)]=function(_0x2ab8bc,_0x544222){const _0x109581=_0x5bbf40,_0x32b3b4=this[_0x109581(0x625)];if(_0x32b3b4[_0x2ab8bc])return _0x32b3b4[_0x2ab8bc];else{const _0xacabf9=new _0x544222();return _0x32b3b4[_0x2ab8bc]=_0xacabf9,this[_0x109581(0x90c)](_0xacabf9),this['addChildToBack'](this[_0x109581(0xc0d)]),_0xacabf9;}},Window_BattleStatus['prototype'][_0x5bbf40(0x5f6)]=function(){const _0x32e5c9=_0x5bbf40;this['_createCursorArea'](),this[_0x32e5c9(0x3a2)](),Window_StatusBase['prototype'][_0x32e5c9(0x5f6)]['call'](this),this[_0x32e5c9(0x982)]();},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x7da)]=function(){const _0x2932d3=_0x5bbf40;this['_cursorArea']=new Sprite(),this[_0x2932d3(0xc0d)][_0x2932d3(0x35c)]=[new PIXI[(_0x2932d3(0x35c))][(_0x2932d3(0x6f6))]()],this[_0x2932d3(0xc0d)][_0x2932d3(0x466)]=new Rectangle(),this[_0x2932d3(0xc0d)]['move'](this[_0x2932d3(0x9f0)],this['_padding']),this[_0x2932d3(0x512)](this['_cursorArea']);},Window_BattleStatus[_0x5bbf40(0x68c)]['_createEffectsContainer']=function(){const _0x320f01=_0x5bbf40;this[_0x320f01(0x3d4)]=new Sprite(),this[_0x320f01(0x512)](this['_effectsContainer']);},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0xa72)]=function(){const _0x4b4de1=_0x5bbf40;this[_0x4b4de1(0x3d4)]&&this[_0x4b4de1(0x512)](this[_0x4b4de1(0x3d4)]);},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x982)]=function(){const _0x2abc29=_0x5bbf40;this[_0x2abc29(0x5ad)]=new Sprite(),this[_0x2abc29(0x512)](this[_0x2abc29(0x5ad)]);},Window_BattleStatus['prototype'][_0x5bbf40(0xac6)]=function(){const _0x22a51f=_0x5bbf40;this[_0x22a51f(0x6ab)]=new Sprite();for(let _0x3f1204=0x0;_0x3f1204<0x9;_0x3f1204++){this[_0x22a51f(0x6ab)][_0x22a51f(0x512)](new Sprite());}this[_0x22a51f(0xc0d)][_0x22a51f(0x512)](this[_0x22a51f(0x6ab)]);},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x95b)]=function(){const _0x2b990e=_0x5bbf40;Window_StatusBase[_0x2b990e(0x68c)][_0x2b990e(0x95b)][_0x2b990e(0x86a)](this),this[_0x2b990e(0x61c)]();},Window_BattleStatus[_0x5bbf40(0x68c)]['_updateCursorArea']=function(){const _0xd369a9=_0x5bbf40,_0x24e2dc=this[_0xd369a9(0x9f0)];this[_0xd369a9(0xc0d)]['move'](_0x24e2dc,_0x24e2dc),this[_0xd369a9(0xc0d)]['x']=_0x24e2dc-this[_0xd369a9(0x450)]['x'],this[_0xd369a9(0xc0d)]['y']=_0x24e2dc-this[_0xd369a9(0x450)]['y'],this['innerWidth']>0x0&&this[_0xd369a9(0x3be)]>0x0?this[_0xd369a9(0xc0d)][_0xd369a9(0x74c)]=this[_0xd369a9(0x931)]():this[_0xd369a9(0xc0d)]['visible']=![];},Window_BattleStatus[_0x5bbf40(0x68c)]['_updateFilterArea']=function(){const _0x315345=_0x5bbf40;Window_StatusBase[_0x315345(0x68c)][_0x315345(0x797)][_0x315345(0x86a)](this),this[_0x315345(0x90d)]();},Window_BattleStatus['prototype'][_0x5bbf40(0x90d)]=function(){const _0x439aa1=_0x5bbf40,_0x3b2595=this['_cursorArea']['worldTransform'][_0x439aa1(0x3ac)](new Point(0x0,0x0)),_0x3cc4a3=this['_cursorArea']['filterArea'];_0x3cc4a3['x']=_0x3b2595['x']+this['origin']['x'],_0x3cc4a3['y']=_0x3b2595['y']+this[_0x439aa1(0x450)]['y'],_0x3cc4a3[_0x439aa1(0x2fc)]=this[_0x439aa1(0xa2f)],_0x3cc4a3[_0x439aa1(0x570)]=this[_0x439aa1(0x3be)];},Window_BattleStatus['prototype'][_0x5bbf40(0x62b)]=function(_0x270dad){const _0x1028ef=_0x5bbf40;if(this[_0x1028ef(0x6e0)]()!==_0x1028ef(0x20a))return;this[_0x1028ef(0xb8e)](_0x270dad[_0x1028ef(0x705)]());},Window_BattleStatus[_0x5bbf40(0x68c)]['addDamageSprite']=function(_0x2f5cdb,_0x5498fe){const _0x451313=_0x5bbf40;if(!this[_0x451313(0x5ad)])return;if(!_0x2f5cdb)return;if(!_0x5498fe)return;const _0x120bed=this[_0x451313(0xb66)](_0x5498fe[_0x451313(0x705)]());_0x120bed['x']+=_0x120bed[_0x451313(0x2fc)]/0x2+this['padding'],_0x2f5cdb['x']=_0x120bed['x'],_0x2f5cdb['y']=_0x120bed['y'],this[_0x451313(0x5ad)][_0x451313(0x512)](_0x2f5cdb);},Window_BattleStatus['prototype']['removeDamageSprite']=function(_0x306fe3){const _0x10f783=_0x5bbf40;if(!this[_0x10f783(0x5ad)])return;if(!_0x306fe3)return;this[_0x10f783(0x5ad)]['removeChild'](_0x306fe3);},Window_BattleStatus[_0x5bbf40(0x68c)]['updateBorderStyle']=function(){const _0x57ca59=_0x5bbf40;if(!this['isBorderStylePortraitShown']())return;if(!this[_0x57ca59(0xa2e)])this['createBorderStylePortraitSprite']();this['prepareBorderActor'](),this[_0x57ca59(0x5d1)]();},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x665)]=function(){const _0x290079=_0x5bbf40;if(this[_0x290079(0xaad)]!==Window_BattleStatus)return![];if(!SceneManager[_0x290079(0x277)]())return![];return VisuMZ['BattleCore'][_0x290079(0x8be)][_0x290079(0x5c3)]['ShowPortraitsBorderStyle'];},Window_BattleStatus[_0x5bbf40(0x68c)]['createBorderStylePortraitSprite']=function(){const _0x1f4f84=_0x5bbf40;this['_borderPortraitSprite']=new Sprite();const _0x81e90a=SceneManager[_0x1f4f84(0x2f2)],_0x40aaff=_0x81e90a[_0x1f4f84(0x6c5)]['indexOf'](_0x81e90a['_windowLayer']);_0x81e90a[_0x1f4f84(0xa06)](this['_borderPortraitSprite'],_0x40aaff),this[_0x1f4f84(0xa2e)][_0x1f4f84(0x600)]['x']=0.5,this[_0x1f4f84(0xa2e)]['anchor']['y']=0x1;const _0x40dca1=VisuMZ['BattleCore'][_0x1f4f84(0x8be)][_0x1f4f84(0x5c3)][_0x1f4f84(0x487)];this[_0x1f4f84(0xa2e)][_0x1f4f84(0x5f5)]['x']=_0x40dca1,this[_0x1f4f84(0xa2e)]['scale']['y']=_0x40dca1,this['_borderPortraitSprite']['y']=this['y']+this[_0x1f4f84(0x570)],this[_0x1f4f84(0x817)]=0x0;},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x77f)]=function(){const _0x5ee80c=_0x5bbf40;return BattleManager[_0x5ee80c(0x818)]();},Window_BattleStatus[_0x5bbf40(0x68c)]['prepareBorderActor']=function(){const _0x127801=_0x5bbf40;this['_borderPortraitSprite'][_0x127801(0x74c)]=this['isBorderPortraitSpriteVisible']();const _0x46ee3f=BattleManager['actor'](),_0x398499=_0x46ee3f?_0x46ee3f[_0x127801(0xb5c)]()||'':'';if(_0x46ee3f===this['_borderPortraitSprite'][_0x127801(0x297)]&&_0x398499===this[_0x127801(0xa2e)][_0x127801(0x589)])return;this[_0x127801(0xa2e)][_0x127801(0x297)]=_0x46ee3f||this[_0x127801(0xa2e)]['actor'],this[_0x127801(0xa2e)]['lastFilename']=_0x398499;if(!_0x46ee3f)return;else{if(_0x398499===''){this[_0x127801(0xa2e)][_0x127801(0xaa1)]=ImageManager[_0x127801(0x9d3)],this['_borderPortraitSprite'][_0x127801(0x589)]='';return;}else{const _0x2b7621=ImageManager[_0x127801(0x2e8)](_0x398499);this[_0x127801(0xa2e)][_0x127801(0x5d3)]=0x0,_0x2b7621[_0x127801(0x64f)](this[_0x127801(0x2e5)][_0x127801(0x840)](this,_0x2b7621));}}},Window_BattleStatus['prototype'][_0x5bbf40(0x2e5)]=function(_0x62f9f3){const _0x29ba0f=_0x5bbf40;this['_borderPortraitDuration']=0x14,this[_0x29ba0f(0xa2e)][_0x29ba0f(0xaa1)]=_0x62f9f3;SceneManager['_scene'][_0x29ba0f(0xc0c)]()?(this['_borderPortraitSprite']['x']=0x0,this[_0x29ba0f(0x71e)]=Math['ceil'](_0x62f9f3[_0x29ba0f(0x2fc)]/0x2)):(this[_0x29ba0f(0xa2e)]['x']=this['width'],this[_0x29ba0f(0x71e)]=this[_0x29ba0f(0x2fc)]*0x3/0x4);this[_0x29ba0f(0xa2e)]['opacity']=0x0,this[_0x29ba0f(0xa2e)]['y']=this['y']+this[_0x29ba0f(0x570)];const _0x39b1e3=BattleManager[_0x29ba0f(0x297)]();_0x39b1e3&&(this['_borderPortraitTargetX']+=_0x39b1e3[_0x29ba0f(0x302)](),this['_borderPortraitSprite']['y']+=_0x39b1e3[_0x29ba0f(0x967)]());},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x5d1)]=function(){const _0x583558=_0x5bbf40;if(this[_0x583558(0x817)]>0x0){const _0x4f177f=this['_borderPortraitDuration'],_0x1a7ef0=this[_0x583558(0xa2e)];_0x1a7ef0['x']=(_0x1a7ef0['x']*(_0x4f177f-0x1)+this[_0x583558(0x71e)])/_0x4f177f,_0x1a7ef0[_0x583558(0x5d3)]=(_0x1a7ef0[_0x583558(0x5d3)]*(_0x4f177f-0x1)+0xff)/_0x4f177f,this[_0x583558(0x817)]--;}},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x41e)]=function(){const _0x4affa2=_0x5bbf40;return;this[_0x4affa2(0x3d4)]&&(this[_0x4affa2(0x3d4)]['x']=this['x'],this[_0x4affa2(0x3d4)]['y']=this['y']),this[_0x4affa2(0x5ad)]&&(this[_0x4affa2(0x5ad)]['x']=this['x'],this[_0x4affa2(0x5ad)]['y']=this['y']);},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x883)]=function(){const _0x5d0012=_0x5bbf40,_0x18083b=VisuMZ[_0x5d0012(0x7d9)]['Settings'][_0x5d0012(0x5c3)];if(_0x18083b[_0x5d0012(0x383)]){const _0x177150=new Sprite();_0x177150['bitmap']=ImageManager[_0x5d0012(0x535)](_0x18083b[_0x5d0012(0x383)]),_0x177150['x']=_0x18083b['StatusWindowAttachmentBackOffsetX']||0x0,_0x177150['y']=_0x18083b['StatusWindowAttachmentBackOffsetY']||0x0,this[_0x5d0012(0x90c)](_0x177150),this[_0x5d0012(0x92a)]=_0x177150;}if(_0x18083b[_0x5d0012(0x774)]){const _0x4eb57b=new Sprite();_0x4eb57b[_0x5d0012(0xaa1)]=ImageManager['loadSystem'](_0x18083b[_0x5d0012(0x774)]),_0x4eb57b['x']=_0x18083b['StatusWindowAttachmentFrontOffsetX']||0x0,_0x4eb57b['y']=_0x18083b['StatusWindowAttachmentFrontOffsetY']||0x0,this[_0x5d0012(0x512)](_0x4eb57b),this[_0x5d0012(0x8a9)]=_0x4eb57b;}},Window_BattleStatus[_0x5bbf40(0x68c)][_0x5bbf40(0x4bd)]=function(){const _0x19c51a=_0x5bbf40;this[_0x19c51a(0x8a9)]&&this[_0x19c51a(0x512)](this['_frontAttachmentSprite']),this['_backAttachmentSprite']&&this[_0x19c51a(0x90c)](this[_0x19c51a(0x92a)]);},Window_BattleActor['prototype'][_0x5bbf40(0x85b)]=function(){const _0x28dfb3=_0x5bbf40;return this[_0x28dfb3(0x424)]();},Window_BattleActor[_0x5bbf40(0x68c)][_0x5bbf40(0x424)]=function(){const _0xaaca43=_0x5bbf40,_0x1bdf57=BattleManager[_0xaaca43(0x482)]();if(!_0x1bdf57)return!![];if(!_0x1bdf57[_0xaaca43(0x92e)]())return!![];const _0x38d093=this[_0xaaca43(0x297)](this['index']()),_0x1f26c2=_0x1bdf57['item']()[_0xaaca43(0x509)];if(_0x1bdf57[_0xaaca43(0x34d)]()){if(_0x38d093===BattleManager[_0xaaca43(0x297)]())return![];}if(_0x1bdf57[_0xaaca43(0x291)]()){if(!_0x38d093[_0xaaca43(0x724)]())return![];}if(_0x1bdf57[_0xaaca43(0x4b4)]()){if(!_0x38d093['isAlive']())return![];}return!![];},Window_BattleActor['prototype'][_0x5bbf40(0x701)]=function(_0x1a1210){const _0x23344d=_0x5bbf40;this[_0x23344d(0x21c)]=_0x1a1210;},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x900)]=Window_BattleActor[_0x5bbf40(0x68c)][_0x5bbf40(0x907)],Window_BattleActor[_0x5bbf40(0x68c)][_0x5bbf40(0x907)]=function(){const _0xabaec7=_0x5bbf40;Window_BattleStatus[_0xabaec7(0x68c)]['processTouch'][_0xabaec7(0x86a)](this),this[_0xabaec7(0x21c)]?this[_0xabaec7(0xb99)]():VisuMZ[_0xabaec7(0x7d9)][_0xabaec7(0x900)]['call'](this);},Window_BattleActor[_0x5bbf40(0x68c)][_0x5bbf40(0xb99)]=function(){const _0x4b0a2b=_0x5bbf40,_0x1357ec=SceneManager[_0x4b0a2b(0x2f2)][_0x4b0a2b(0xa7e)];if(!_0x1357ec)return;this[_0x4b0a2b(0x94d)]=![];const _0x125958=this[_0x4b0a2b(0x488)]();if(_0x125958>=0x0){this['select'](_0x125958);if(TouchInput[_0x4b0a2b(0x65c)]()){const _0x29e034=$gameParty[_0x4b0a2b(0x319)]()[_0x125958],_0x369c56=_0x1357ec[_0x4b0a2b(0x8ce)][_0x4b0a2b(0x5c9)](_0x29e034);_0x369c56>=0x0&&(_0x1357ec[_0x4b0a2b(0x799)](_0x369c56),_0x1357ec[_0x4b0a2b(0xbdb)]());}}},Window_BattleActor['prototype']['_makeCursorAlpha']=function(){const _0x1f2eb2=_0x5bbf40;this[_0x1f2eb2(0x21c)]&&(this[_0x1f2eb2(0xb43)]++,this[_0x1f2eb2(0xb16)]=!![]);const _0x188747=Window_BattleStatus[_0x1f2eb2(0x68c)][_0x1f2eb2(0xa97)][_0x1f2eb2(0x86a)](this);return this[_0x1f2eb2(0x21c)]&&(this[_0x1f2eb2(0xb16)]=![]),_0x188747;},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xbe5)]=Window_BattleActor['prototype'][_0x5bbf40(0xab4)],Window_BattleActor[_0x5bbf40(0x68c)][_0x5bbf40(0xab4)]=function(){const _0x40c7e2=_0x5bbf40;VisuMZ[_0x40c7e2(0x7d9)][_0x40c7e2(0xbe5)][_0x40c7e2(0x86a)](this);const _0x406c77=BattleManager[_0x40c7e2(0x482)]();if(_0x406c77){const _0x168838=$gameParty[_0x40c7e2(0xb48)]();_0x406c77[_0x40c7e2(0x751)]()&&_0x168838[_0x40c7e2(0x348)]>0x1&&this[_0x40c7e2(0x243)]('pagedown',this['selectAllActors'][_0x40c7e2(0x840)](this));}},VisuMZ[_0x5bbf40(0x7d9)]['Window_BattleActor_hide']=Window_BattleActor[_0x5bbf40(0x68c)][_0x5bbf40(0x428)],Window_BattleActor[_0x5bbf40(0x68c)]['hide']=function(){const _0x1c1fd5=_0x5bbf40;VisuMZ[_0x1c1fd5(0x7d9)][_0x1c1fd5(0x90a)][_0x1c1fd5(0x86a)](this),delete this[_0x1c1fd5(0x619)][_0x1c1fd5(0xa57)],delete this[_0x1c1fd5(0x619)][_0x1c1fd5(0x8c6)];},Window_BattleActor[_0x5bbf40(0x68c)][_0x5bbf40(0x7a7)]=function(){const _0x1737a9=_0x5bbf40,_0x28ed61=BattleManager[_0x1737a9(0x482)]();if(_0x28ed61)_0x28ed61[_0x1737a9(0x262)](_0x1737a9(0xa3c));this['processOk']();},VisuMZ['BattleCore'][_0x5bbf40(0x57d)]=Window_BattleEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0x3bb)],Window_BattleEnemy['prototype']['initialize']=function(_0x19b77b){const _0x41a07a=_0x5bbf40;this[_0x41a07a(0x332)]=null,VisuMZ[_0x41a07a(0x7d9)]['Window_BattleEnemy_initialize']['call'](this,_0x19b77b);if(Imported[_0x41a07a(0xa79)]){if(VisuMZ[_0x41a07a(0x83f)][_0x41a07a(0x77e)]<1.12){let _0x1db7eb='';_0x1db7eb+='VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20',_0x1db7eb+=_0x41a07a(0x8f8),_0x1db7eb+=_0x41a07a(0x527),alert(_0x1db7eb),SceneManager[_0x41a07a(0x593)]();}}},Window_BattleEnemy['prototype'][_0x5bbf40(0x75c)]=function(){const _0x17b264=_0x5bbf40;return this[_0x17b264(0x39f)]();},VisuMZ[_0x5bbf40(0x7d9)]['Window_BattleEnemy_show']=Window_BattleEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0xab4)],Window_BattleEnemy[_0x5bbf40(0x68c)]['show']=function(){const _0x268843=_0x5bbf40;VisuMZ[_0x268843(0x7d9)][_0x268843(0xc0b)][_0x268843(0x86a)](this),this['y']=Graphics[_0x268843(0x570)]*0xa,this['meetsSelectFrontviewActorConditions']()&&this[_0x268843(0x795)]();},VisuMZ[_0x5bbf40(0x7d9)]['Window_BattleEnemy_hide']=Window_BattleEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0x428)],Window_BattleEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0x428)]=function(){const _0xcaa0bd=_0x5bbf40;VisuMZ[_0xcaa0bd(0x7d9)][_0xcaa0bd(0x530)][_0xcaa0bd(0x86a)](this),$gameParty['select'](null),delete this['_handlers'][_0xcaa0bd(0xa57)],delete this['_handlers'][_0xcaa0bd(0x8c6)];},Window_BattleEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0x5d9)]=function(){const _0xbf153c=_0x5bbf40;let _0x10d28e=$gameTroop[_0xbf153c(0xb48)]();const _0x2a74c5=BattleManager['inputtingAction']();if(_0x2a74c5){_0x2a74c5[_0xbf153c(0x751)]()&&_0x10d28e[_0xbf153c(0x348)]>0x1&&this['setHandler']('pageup',this[_0xbf153c(0x3b6)]['bind'](this));if(_0x2a74c5['isForAnyone']()){const _0x4b7983=$gameParty[_0xbf153c(0xb48)]();_0x10d28e=_0x10d28e['concat'](_0x4b7983),_0x2a74c5[_0xbf153c(0x751)]()&&_0x4b7983['length']>0x1&&this[_0xbf153c(0x243)]('pagedown',this[_0xbf153c(0x7a7)]['bind'](this));}}return _0x10d28e;},Window_BattleEnemy[_0x5bbf40(0x68c)]['refresh']=function(){const _0x5919e1=_0x5bbf40;this['_enemies']=this[_0x5919e1(0x5d9)](),this[_0x5919e1(0xbff)](),Window_Selectable[_0x5919e1(0x68c)]['refresh'][_0x5919e1(0x86a)](this);},Window_BattleEnemy[_0x5bbf40(0x68c)]['sortEnemies']=function(){const _0x1d8b80=_0x5bbf40;this[_0x1d8b80(0x8ce)][_0x1d8b80(0x490)]((_0x3d0c74,_0x390151)=>{const _0x30f824=_0x1d8b80;if(_0x3d0c74[_0x30f824(0xa32)]()!==_0x390151[_0x30f824(0xa32)]()){if(_0x3d0c74[_0x30f824(0x37d)]())return-0x1;if(_0x390151[_0x30f824(0x37d)]())return 0x1;}if(_0x3d0c74[_0x30f824(0xa32)]()&&_0x390151[_0x30f824(0xa32)]())return _0x3d0c74['index']()-_0x390151[_0x30f824(0x705)]();return _0x3d0c74[_0x30f824(0xb3a)]()['_baseX']===_0x390151[_0x30f824(0xb3a)]()[_0x30f824(0x72f)]?_0x3d0c74['battler']()[_0x30f824(0x4f3)]-_0x390151[_0x30f824(0xb3a)]()[_0x30f824(0x4f3)]:_0x3d0c74[_0x30f824(0xb3a)]()[_0x30f824(0x72f)]-_0x390151['battler']()['_baseX'];}),SceneManager[_0x1d8b80(0x5f7)]()&&this[_0x1d8b80(0x8ce)][_0x1d8b80(0x981)]();},Window_BattleEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0x7cd)]=function(){const _0x2fffff=_0x5bbf40,_0x3ac132=VisuMZ[_0x2fffff(0x7d9)]['Settings'][_0x2fffff(0x51a)];_0x3ac132[_0x2fffff(0x6a7)]?this[_0x2fffff(0x998)]():this[_0x2fffff(0x531)]();},Window_BattleEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0x998)]=function(){const _0x4f1ad3=_0x5bbf40,_0x228e8f=BattleManager[_0x4f1ad3(0x482)]();if(_0x228e8f&&_0x228e8f[_0x4f1ad3(0x4d6)]()){if(_0x228e8f[_0x4f1ad3(0x7cc)]()){if(this[_0x4f1ad3(0xb15)]&&this[_0x4f1ad3(0x8ce)]['includes'](this[_0x4f1ad3(0xb15)])){const _0x2f043f=this[_0x4f1ad3(0x8ce)][_0x4f1ad3(0x5c9)](this['_lastActor']);return this['forceSelect'](_0x2f043f);}else return this['autoSelectPriority']();}}if(this[_0x4f1ad3(0x332)]&&this[_0x4f1ad3(0x8ce)][_0x4f1ad3(0x608)](this['_lastEnemy'])){const _0x1da0fd=this[_0x4f1ad3(0x8ce)][_0x4f1ad3(0x5c9)](this[_0x4f1ad3(0x332)]);this[_0x4f1ad3(0x4c0)](_0x1da0fd);}else this[_0x4f1ad3(0x531)]();},Window_BattleEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0x531)]=function(){const _0x5f4541=_0x5bbf40,_0x1dd35c=BattleManager[_0x5f4541(0x482)]();if(_0x1dd35c&&_0x1dd35c['isForAnyone']()){const _0x3e7383=$gameParty[_0x5f4541(0xb48)]()[0x0];let _0x46ae15=this[_0x5f4541(0x8ce)][_0x5f4541(0x5c9)](_0x3e7383);const _0x45a3ab=_0x1dd35c[_0x5f4541(0x92e)]()['scope'];if(_0x45a3ab[_0x5f4541(0x24d)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this['forceSelect'](_0x46ae15);return;}else{if(_0x45a3ab[_0x5f4541(0x24d)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x5f4541(0x4c0)](_0x46ae15-0x1);return;}}}const _0x1e3071=VisuMZ[_0x5f4541(0x7d9)][_0x5f4541(0x8be)][_0x5f4541(0x51a)];let _0x361754=![];$gameSystem['isSideView']()?_0x361754=_0x1e3071[_0x5f4541(0x7a8)]:_0x361754=_0x1e3071[_0x5f4541(0x668)],this['forceSelect'](_0x361754?this['maxItems']()-0x1:0x0);},Window_BattleEnemy['prototype'][_0x5bbf40(0x9f7)]=function(){const _0x58d0db=_0x5bbf40;Window_Selectable[_0x58d0db(0x68c)][_0x58d0db(0x9f7)][_0x58d0db(0x86a)](this);if(!this['enemy']())return;if(this[_0x58d0db(0x7f8)]()[_0x58d0db(0x37d)]())this['_lastEnemy']=this['enemy']();if(this['enemy']()[_0x58d0db(0xa32)]())this[_0x58d0db(0xb15)]=this[_0x58d0db(0x7f8)]();},Window_BattleEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0x799)]=function(_0x52e94e){const _0x523695=_0x5bbf40;Window_Selectable[_0x523695(0x68c)]['select'][_0x523695(0x86a)](this,_0x52e94e),$gameTroop[_0x523695(0x799)](this[_0x523695(0x7f8)]()),$gameParty['select'](this[_0x523695(0x7f8)]());if(!this[_0x523695(0x7f8)]())return;if(this['meetsSelectFrontviewActorConditions']()){const _0x3573f2=SceneManager[_0x523695(0x2f2)][_0x523695(0x351)];this['enemy']()[_0x523695(0xa32)]()?_0x3573f2[_0x523695(0x799)](this[_0x523695(0x7f8)]()[_0x523695(0x705)]()):_0x3573f2[_0x523695(0x773)]();}},Window_BattleEnemy[_0x5bbf40(0x68c)]['meetsSelectFrontviewActorConditions']=function(){const _0x3439d0=_0x5bbf40;if(!this[_0x3439d0(0x74c)])return![];if($gameSystem['isSideView']())return![];const _0x86f42e=SceneManager[_0x3439d0(0x2f2)][_0x3439d0(0x6e0)](),_0x439987=[_0x3439d0(0x81f),_0x3439d0(0x62f),'xp',_0x3439d0(0x20a),_0x3439d0(0x7e8)];return _0x439987[_0x3439d0(0x608)](_0x86f42e);},Window_BattleEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0x795)]=function(){const _0x2066a=_0x5bbf40,_0x3054fd=SceneManager[_0x2066a(0x2f2)]['_actorWindow'];_0x3054fd[_0x2066a(0xab4)](),_0x3054fd[_0x2066a(0x701)](!![]),_0x3054fd['refresh'](),_0x3054fd['deselect']();const _0x281731=SceneManager['_scene'][_0x2066a(0x6e0)](),_0x30114c=['xp',_0x2066a(0x20a),'border'];if(_0x30114c[_0x2066a(0x608)](_0x281731)){const _0x284ce5=SceneManager['_scene'][_0x2066a(0x861)];_0x284ce5[_0x2066a(0x5f5)]['y']=0x0;}},Window_BattleEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0x5ec)]=function(){const _0x19bdda=_0x5bbf40,_0x5ede12=SceneManager[_0x19bdda(0x2f2)][_0x19bdda(0x351)];_0x5ede12[_0x19bdda(0x428)](),_0x5ede12['setEnemyWindowMode'](![]),_0x5ede12[_0x19bdda(0x773)]();const _0x464050=SceneManager[_0x19bdda(0x2f2)][_0x19bdda(0x861)];_0x464050[_0x19bdda(0x5f5)]['y']=0x1;},Window_BattleEnemy['prototype'][_0x5bbf40(0x3b6)]=function(){const _0x3fbee2=_0x5bbf40,_0x2d901a=BattleManager[_0x3fbee2(0x482)]();if(_0x2d901a)_0x2d901a[_0x3fbee2(0x262)](_0x3fbee2(0x8a2));this[_0x3fbee2(0xbdb)]();},Window_BattleEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0x7a7)]=function(){const _0x3c5111=_0x5bbf40,_0x15a905=BattleManager[_0x3c5111(0x482)]();if(_0x15a905)_0x15a905[_0x3c5111(0x262)]('all\x20actors');this[_0x3c5111(0xbdb)]();},Window_BattleEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0x85b)]=function(){const _0x19caae=_0x5bbf40;return this[_0x19caae(0x424)]();},Window_BattleEnemy[_0x5bbf40(0x68c)][_0x5bbf40(0x424)]=function(){const _0x50ac3e=_0x5bbf40,_0x1f5768=BattleManager[_0x50ac3e(0x482)]();if(!_0x1f5768)return!![];if(!_0x1f5768['item']())return!![];const _0x34cd09=this[_0x50ac3e(0x7f8)](),_0x522d1b=_0x1f5768[_0x50ac3e(0x92e)]()[_0x50ac3e(0x509)];if(_0x1f5768['isForNotUser']()){if(_0x34cd09===BattleManager['actor']())return![];}return!![];},Window_BattleItem['prototype'][_0x5bbf40(0x608)]=function(_0xd94a54){if(!_0xd94a54)return![];return _0xd94a54['occasion']===0x0||_0xd94a54['occasion']===0x1;};function Window_AutoBattleCancel(){const _0x5ba062=_0x5bbf40;this[_0x5ba062(0x3bb)](...arguments);}Window_AutoBattleCancel[_0x5bbf40(0x68c)]=Object['create'](Window_Base[_0x5bbf40(0x68c)]),Window_AutoBattleCancel[_0x5bbf40(0x68c)][_0x5bbf40(0xaad)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x5bbf40(0x68c)][_0x5bbf40(0x3bb)]=function(_0x5227cb){const _0x3fe239=_0x5bbf40;Window_Base[_0x3fe239(0x68c)]['initialize'][_0x3fe239(0x86a)](this,_0x5227cb),this[_0x3fe239(0x225)](this[_0x3fe239(0x55c)]()),this[_0x3fe239(0x82f)]();},Window_AutoBattleCancel['prototype'][_0x5bbf40(0x55c)]=function(){const _0x57cf41=_0x5bbf40;return VisuMZ[_0x57cf41(0x7d9)]['Settings']['AutoBattle']['AutoBattleBgType'];},Window_AutoBattleCancel['prototype']['refresh']=function(){const _0x4a3793=_0x5bbf40;this[_0x4a3793(0x340)][_0x4a3793(0x8cb)]();const _0x2c7716=VisuMZ['BattleCore'][_0x4a3793(0x8be)][_0x4a3793(0x51e)][_0x4a3793(0x1fe)],_0x4bdc7c=_0x2c7716[_0x4a3793(0x7c2)](this[_0x4a3793(0x545)](),this['cancelButtonText']()),_0x1d66a9=this[_0x4a3793(0x8de)](_0x4bdc7c)['width'],_0x2c6b40=Math[_0x4a3793(0x9d6)]((this[_0x4a3793(0xa2f)]-_0x1d66a9)/0x2);this['drawTextEx'](_0x4bdc7c,_0x2c6b40,0x0,_0x1d66a9);},Window_AutoBattleCancel[_0x5bbf40(0x68c)][_0x5bbf40(0x545)]=function(){const _0x5c74fa=_0x5bbf40;return Imported['VisuMZ_0_CoreEngine']?TextManager['getInputButtonString']('ok'):VisuMZ[_0x5c74fa(0x7d9)]['Settings'][_0x5c74fa(0x51e)][_0x5c74fa(0x36c)];},Window_AutoBattleCancel[_0x5bbf40(0x68c)][_0x5bbf40(0xafc)]=function(){const _0x3eeeed=_0x5bbf40;return Imported['VisuMZ_0_CoreEngine']?TextManager[_0x3eeeed(0x934)](_0x3eeeed(0x8bc)):VisuMZ[_0x3eeeed(0x7d9)]['Settings'][_0x3eeeed(0x51e)][_0x3eeeed(0x42a)];},Window_AutoBattleCancel[_0x5bbf40(0x68c)][_0x5bbf40(0x69a)]=function(){const _0x306582=_0x5bbf40;Window_Base[_0x306582(0x68c)][_0x306582(0x69a)][_0x306582(0x86a)](this),this[_0x306582(0x499)](),this[_0x306582(0x52a)]();},Window_AutoBattleCancel[_0x5bbf40(0x68c)][_0x5bbf40(0x499)]=function(){const _0x3f9a04=_0x5bbf40;this[_0x3f9a04(0x74c)]=BattleManager[_0x3f9a04(0x614)];},Window_AutoBattleCancel[_0x5bbf40(0x68c)][_0x5bbf40(0x52a)]=function(){const _0x5860c9=_0x5bbf40;if(!BattleManager[_0x5860c9(0x614)])return;(Input[_0x5860c9(0x7ea)]('ok')||Input['isTriggered'](_0x5860c9(0x8bc))||TouchInput[_0x5860c9(0x65c)]()||TouchInput['isCancelled']())&&(SoundManager['playCancel'](),BattleManager['_autoBattle']=![],Input[_0x5860c9(0x8cb)](),TouchInput['clear']());};function Window_EnemyName(){const _0x194853=_0x5bbf40;this[_0x194853(0x3bb)](...arguments);}Window_EnemyName[_0x5bbf40(0x68c)]=Object[_0x5bbf40(0x6c2)](Window_StatusBase['prototype']),Window_EnemyName['prototype'][_0x5bbf40(0xaad)]=Window_EnemyName,Window_EnemyName[_0x5bbf40(0x68c)]['initialize']=function(_0x4d089e){const _0x4da4c9=_0x5bbf40;this[_0x4da4c9(0x733)]=_0x4d089e,this[_0x4da4c9(0xb9e)]='';const _0x259d51=new Rectangle(0x0,0x0,Graphics['boxWidth'],this[_0x4da4c9(0xa15)]()*0x4);Window_StatusBase[_0x4da4c9(0x68c)][_0x4da4c9(0x3bb)][_0x4da4c9(0x86a)](this,_0x259d51),this['setBackgroundType'](0x2),this[_0x4da4c9(0x8f7)]=0x0;},Window_EnemyName[_0x5bbf40(0x68c)]['updatePadding']=function(){const _0x414cd4=_0x5bbf40;this[_0x414cd4(0x2ed)]=0x0;},Window_EnemyName[_0x5bbf40(0x68c)][_0x5bbf40(0x7f8)]=function(){const _0x5431bf=_0x5bbf40;return $gameTroop[_0x5431bf(0x319)]()[this[_0x5431bf(0x733)]];},Window_EnemyName[_0x5bbf40(0x68c)][_0x5bbf40(0x69a)]=function(){const _0x2891a5=_0x5bbf40;Window_StatusBase[_0x2891a5(0x68c)][_0x2891a5(0x69a)][_0x2891a5(0x86a)](this),this[_0x2891a5(0x7f8)]()&&this[_0x2891a5(0x7f8)]()[_0x2891a5(0x4e5)]()!==this['_text']&&(this[_0x2891a5(0xb9e)]=this['enemy']()[_0x2891a5(0x4e5)](),this['refresh']()),this[_0x2891a5(0x651)](),this[_0x2891a5(0x390)]();},Window_EnemyName[_0x5bbf40(0x68c)][_0x5bbf40(0x651)]=function(){const _0x4042f4=_0x5bbf40;if(!this['enemy']()){if(this[_0x4042f4(0x8f7)]>0x0)this['contentsOpacity']-=0x10;}else{if(this[_0x4042f4(0x7f8)]()[_0x4042f4(0x724)]()){if(this[_0x4042f4(0x8f7)]>0x0)this[_0x4042f4(0x8f7)]-=0x10;}else{if(SceneManager['_scene'][_0x4042f4(0xa7e)]&&SceneManager[_0x4042f4(0x2f2)][_0x4042f4(0xa7e)][_0x4042f4(0xb16)]&&SceneManager[_0x4042f4(0x2f2)][_0x4042f4(0xa7e)][_0x4042f4(0x8ce)][_0x4042f4(0x608)](this['enemy']())){if(this['contentsOpacity']<0xff)this[_0x4042f4(0x8f7)]+=0x10;}else this[_0x4042f4(0x8f7)]>0x0&&(this[_0x4042f4(0x8f7)]-=0x10);}}},Window_EnemyName[_0x5bbf40(0x68c)]['updatePosition']=function(){const _0xcfbaf6=_0x5bbf40;if(!this[_0xcfbaf6(0x7f8)]())return;SceneManager[_0xcfbaf6(0x5f7)]()?this['x']=Graphics['boxWidth']-this[_0xcfbaf6(0x7f8)]()['battler']()[_0xcfbaf6(0x72f)]:this['x']=this[_0xcfbaf6(0x7f8)]()[_0xcfbaf6(0xb3a)]()['_baseX'];this['x']-=Math[_0xcfbaf6(0x6ea)](this['width']/0x2),this['y']=this[_0xcfbaf6(0x7f8)]()['battler']()[_0xcfbaf6(0x4f3)]-Math[_0xcfbaf6(0x6ea)](this['lineHeight']()*1.5);const _0x21ad6b=VisuMZ['BattleCore'][_0xcfbaf6(0x8be)]['Enemy'];this['x']+=_0x21ad6b[_0xcfbaf6(0x92b)]||0x0,this['y']+=_0x21ad6b[_0xcfbaf6(0x555)]||0x0;},Window_EnemyName[_0x5bbf40(0x68c)]['resetFontSettings']=function(){const _0x1f3b6b=_0x5bbf40;Window_Base[_0x1f3b6b(0x68c)][_0x1f3b6b(0xbe7)][_0x1f3b6b(0x86a)](this),this['contents'][_0x1f3b6b(0x23a)]=VisuMZ[_0x1f3b6b(0x7d9)][_0x1f3b6b(0x8be)]['Enemy'][_0x1f3b6b(0x408)];},Window_EnemyName[_0x5bbf40(0x68c)][_0x5bbf40(0x82f)]=function(){const _0x5d6fb9=_0x5bbf40;Window_StatusBase[_0x5d6fb9(0x68c)]['refresh'][_0x5d6fb9(0x86a)](this),this[_0x5d6fb9(0x340)][_0x5d6fb9(0x8cb)]();if(!this['enemy']())return;this['drawEnemyName']();},Window_EnemyName[_0x5bbf40(0x68c)][_0x5bbf40(0x3e8)]=function(){const _0xec99e0=_0x5bbf40;this[_0xec99e0(0xb9e)]=this[_0xec99e0(0x7f8)]()['name']();const _0x3c6ef3=this['textSizeEx'](this[_0xec99e0(0xb9e)])[_0xec99e0(0x2fc)],_0xaea5c2=Math[_0xec99e0(0x6ea)]((this['innerWidth']-_0x3c6ef3)/0x2);this[_0xec99e0(0x8fa)](this[_0xec99e0(0xb9e)],_0xaea5c2,0x0,_0x3c6ef3+0x8);},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x4c7)]=function(){const _0x4be643=_0x5bbf40;return VisuMZ['BattleCore'][_0x4be643(0x8be)]['BattleLog'][_0x4be643(0x98d)];},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x73d)]=function(){const _0x582c39=_0x5bbf40;return VisuMZ[_0x582c39(0x7d9)][_0x582c39(0x8be)][_0x582c39(0x567)]['MessageWait'];},Window_BattleLog['prototype'][_0x5bbf40(0x594)]=function(){const _0x14ad3f=_0x5bbf40;return VisuMZ[_0x14ad3f(0x7d9)]['Settings'][_0x14ad3f(0x567)]['BackColor'];},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xa8b)]=function(){return![];},Window_BattleLog['prototype'][_0x5bbf40(0xb87)]=function(_0x46c155,_0x527084){const _0x4d39cd=_0x5bbf40;this[_0x4d39cd(0x6a9)]('actionSplicePoint'),BattleManager[_0x4d39cd(0x610)](_0x46c155,_0x527084),this[_0x4d39cd(0x6c0)]();},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x546)]=function(_0xee7749,_0x3908b1,_0xa80b49){const _0x4ee346=_0x5bbf40;this[_0x4ee346(0x6a9)](_0x4ee346(0xaca)),BattleManager[_0x4ee346(0x275)](_0xee7749,_0x3908b1,_0xa80b49),this['callNextMethod']();},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xaca)]=function(){const _0x330100=_0x5bbf40;this[_0x330100(0x6c0)]();},Window_BattleLog['prototype']['push']=function(_0x372b37){const _0x32dc92=_0x5bbf40,_0x5da458=Array[_0x32dc92(0x68c)][_0x32dc92(0xa30)][_0x32dc92(0x86a)](arguments,0x1),_0x924111={'name':_0x372b37,'params':_0x5da458},_0x2c8456=this['_methods'][_0x32dc92(0x6d6)](_0x294717=>_0x294717[_0x32dc92(0x4e5)])[_0x32dc92(0x5c9)](_0x32dc92(0xaca));_0x2c8456>=0x0?this[_0x32dc92(0x83a)][_0x32dc92(0xb3c)](_0x2c8456,0x0,_0x924111):this['_methods'][_0x32dc92(0x9cb)](_0x924111);},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x6a9)]=function(_0x58f3a8){const _0x1fe651=_0x5bbf40,_0x301f2f=Array[_0x1fe651(0x68c)]['slice'][_0x1fe651(0x86a)](arguments,0x1);this[_0x1fe651(0x83a)][_0x1fe651(0x6a9)]({'name':_0x58f3a8,'params':_0x301f2f});},Window_BattleLog['prototype'][_0x5bbf40(0x5b2)]=function(){const _0xf21d2=_0x5bbf40;if(!$gameTemp[_0xf21d2(0x999)]())return;console[_0xf21d2(0x97b)](this[_0xf21d2(0x83a)]['map'](_0x34d91f=>_0x34d91f[_0xf21d2(0x4e5)])['join']('\x0a'));},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x679)]=Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x82f)],Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x82f)]=function(){this['_requestRefresh']=!![];},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x579)]=Window_BattleLog[_0x5bbf40(0x68c)]['update'],Window_BattleLog[_0x5bbf40(0x68c)]['update']=function(){const _0x37b6ff=_0x5bbf40;VisuMZ[_0x37b6ff(0x7d9)]['Window_BattleLog_update']['call'](this);if(this[_0x37b6ff(0x469)])this['processRefresh']();},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x9a0)]=function(){const _0x529eb3=_0x5bbf40;this[_0x529eb3(0x469)]=![],VisuMZ[_0x529eb3(0x7d9)][_0x529eb3(0x679)][_0x529eb3(0x86a)](this);},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x94a)]=function(_0x39bee7){const _0x2dd938=_0x5bbf40;let _0x28670e=VisuMZ[_0x2dd938(0x7d9)][_0x2dd938(0x8be)][_0x2dd938(0x567)][_0x2dd938(0x5b3)][_0x2dd938(0x993)]()[_0x2dd938(0x86c)](),_0x284f4b=this['_lines'][_0x39bee7];if(_0x284f4b[_0x2dd938(0x24d)](/<LEFT>/i))_0x28670e=_0x2dd938(0x47d);else{if(_0x284f4b[_0x2dd938(0x24d)](/<CENTER>/i))_0x28670e=_0x2dd938(0x572);else _0x284f4b[_0x2dd938(0x24d)](/<RIGHT>/i)&&(_0x28670e=_0x2dd938(0x676));}_0x284f4b=_0x284f4b[_0x2dd938(0xbd9)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x284f4b=_0x284f4b[_0x2dd938(0xbd9)](/\\I\[0\]/gi,'');const _0x43c548=this[_0x2dd938(0x5d8)](_0x39bee7);this['contents']['clearRect'](_0x43c548['x'],_0x43c548['y'],_0x43c548[_0x2dd938(0x2fc)],_0x43c548[_0x2dd938(0x570)]);const _0x5dbdf2=this[_0x2dd938(0x8de)](_0x284f4b)[_0x2dd938(0x2fc)];let _0x1de5b5=_0x43c548['x'];if(_0x28670e===_0x2dd938(0x572))_0x1de5b5+=(_0x43c548[_0x2dd938(0x2fc)]-_0x5dbdf2)/0x2;else _0x28670e===_0x2dd938(0x676)&&(_0x1de5b5+=_0x43c548['width']-_0x5dbdf2);this[_0x2dd938(0x8fa)](_0x284f4b,_0x1de5b5,_0x43c548['y'],_0x5dbdf2+0x8);},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x770)]=function(_0x4be1e3){const _0x1b3897=_0x5bbf40;this[_0x1b3897(0xb0f)]['push'](_0x4be1e3),this[_0x1b3897(0x82f)](),this[_0x1b3897(0x6c0)]();},Window_BattleLog[_0x5bbf40(0x68c)]['updateWaitMode']=function(){const _0x2c3319=_0x5bbf40;let _0x58dcc2=![];switch(this[_0x2c3319(0x554)]){case _0x2c3319(0x3e6):_0x58dcc2=this['_spriteset'][_0x2c3319(0x329)]();break;case'movement':_0x58dcc2=this[_0x2c3319(0x3c3)]['isAnyoneMoving']();break;case'animation':_0x58dcc2=this[_0x2c3319(0x3c3)][_0x2c3319(0x2a5)]();break;case'float':_0x58dcc2=this[_0x2c3319(0x3c3)][_0x2c3319(0x33c)]();break;case _0x2c3319(0x7d7):_0x58dcc2=this[_0x2c3319(0x3c3)][_0x2c3319(0xb02)]();break;case _0x2c3319(0x5d3):_0x58dcc2=this['_spriteset'][_0x2c3319(0x278)]();break;}return!_0x58dcc2&&(this[_0x2c3319(0x554)]=''),_0x58dcc2;},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x9ed)]=function(){const _0x878f8e=_0x5bbf40;this[_0x878f8e(0x61b)]('animation');},Window_BattleLog[_0x5bbf40(0x68c)]['waitForFloat']=function(){const _0xddf648=_0x5bbf40;this[_0xddf648(0x61b)](_0xddf648(0xb3b));},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x544)]=function(){const _0x2da99f=_0x5bbf40;this[_0x2da99f(0x61b)]('jump');},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x707)]=function(){const _0x5b3d39=_0x5bbf40;this[_0x5b3d39(0x61b)](_0x5b3d39(0x5d3));},Window_BattleLog['prototype'][_0x5bbf40(0x57e)]=function(){const _0x400ef1=_0x5bbf40,_0x2a5e04=VisuMZ[_0x400ef1(0x7d9)][_0x400ef1(0x8be)][_0x400ef1(0x567)];if(!_0x2a5e04['StartTurnShow'])return;this[_0x400ef1(0x9cb)](_0x400ef1(0x770),_0x2a5e04[_0x400ef1(0x333)][_0x400ef1(0x7c2)]($gameTroop['turnCount']())),this[_0x400ef1(0x9cb)]('waitCount',_0x2a5e04[_0x400ef1(0x67d)]),this['push'](_0x400ef1(0x8cb));},Window_BattleLog[_0x5bbf40(0x68c)]['startAction']=function(_0x12d8a2,_0x35af5e,_0x4d0bd8){const _0x13122b=_0x5bbf40;this[_0x13122b(0x8a5)](_0x35af5e)?BattleManager[_0x13122b(0xa14)]():this[_0x13122b(0x801)](_0x12d8a2,_0x35af5e,_0x4d0bd8);},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x8a5)]=function(_0x49281a){const _0x5cf78d=_0x5bbf40;if(!SceneManager['isSceneBattle']())return![];if(!_0x49281a)return![];if(!_0x49281a['item']())return![];if(_0x49281a[_0x5cf78d(0x92e)]()[_0x5cf78d(0x509)][_0x5cf78d(0x24d)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x5cf78d(0x4cc)](_0x49281a['item']()))return!![];return![];},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x801)]=function(_0x57efe2,_0x46023d,_0x386cad){const _0x4b2833=_0x5bbf40;this[_0x4b2833(0xa9e)](_0x57efe2,_0x46023d,_0x386cad),this[_0x4b2833(0x223)](_0x57efe2,_0x46023d,_0x386cad),this[_0x4b2833(0xbae)](_0x57efe2,_0x46023d,_0x386cad);},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x798)]=function(_0x5d0f65,_0x4d45e8){const _0x325d38=_0x5bbf40,_0x48b18d=VisuMZ[_0x325d38(0x7d9)]['Settings'][_0x325d38(0x567)];_0x48b18d[_0x325d38(0x48c)]&&this['push'](_0x325d38(0x770),_0x325d38(0x97e)[_0x325d38(0x7c2)](DataManager[_0x325d38(0x235)](_0x4d45e8)));if(DataManager[_0x325d38(0x812)](_0x4d45e8)){if(_0x48b18d[_0x325d38(0x5da)])this[_0x325d38(0x221)](_0x4d45e8[_0x325d38(0x519)],_0x5d0f65,_0x4d45e8);if(_0x48b18d[_0x325d38(0x5fc)])this[_0x325d38(0x221)](_0x4d45e8['message2'],_0x5d0f65,_0x4d45e8);}else{if(_0x48b18d[_0x325d38(0x27f)])this[_0x325d38(0x221)](TextManager['useItem'],_0x5d0f65,_0x4d45e8);}},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xa9e)]=function(_0x318ae2,_0x46b68e,_0x468688){const _0x15c4a9=_0x5bbf40,_0x2821e7=_0x46b68e['item']();this['displayAction'](_0x318ae2,_0x2821e7),this[_0x15c4a9(0x9cb)](_0x15c4a9(0x642),_0x318ae2,_0x468688,!![]),this[_0x15c4a9(0x9cb)]('performActionStart',_0x318ae2,_0x46b68e),this[_0x15c4a9(0x9cb)](_0x15c4a9(0x37c)),this[_0x15c4a9(0x9cb)](_0x15c4a9(0x5b4),_0x318ae2,_0x46b68e),this['push'](_0x15c4a9(0x9ed));},Window_BattleLog[_0x5bbf40(0x68c)]['createEffectActionSet']=function(_0x5e8f61,_0x58a028,_0x361d0e){const _0x5d67f7=_0x5bbf40;if(this[_0x5d67f7(0x692)](_0x58a028))this[_0x5d67f7(0x3ef)](_0x5e8f61,_0x58a028,_0x361d0e);else{if(this[_0x5d67f7(0x4f1)](_0x58a028))this[_0x5d67f7(0x2cc)](_0x5e8f61,_0x58a028,_0x361d0e);else _0x58a028[_0x5d67f7(0xba1)]()?this[_0x5d67f7(0x804)](_0x5e8f61,_0x58a028,_0x361d0e):this['wholeActionSet'](_0x5e8f61,_0x58a028,_0x361d0e);}},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x293)]=function(_0x2aca2a,_0x5493ed,_0x3f020e,_0x173c2){const _0x587f14=_0x5bbf40;if(_0x5493ed){const _0x410077=_0x2aca2a[_0x587f14(0xb3a)]();this['push'](_0x587f14(0xbe9),[_0x2aca2a],_0x3f020e,_0x173c2),this[_0x587f14(0x9cb)](_0x587f14(0xc0f),_0x2aca2a,_0x410077[_0x587f14(0x8f6)],_0x410077[_0x587f14(0x54e)],_0x173c2,![],_0x587f14(0x54c)),this[_0x587f14(0x9cb)](_0x587f14(0x5e6),[_0x2aca2a],_0x587f14(0x201)),this[_0x587f14(0x9cb)]('waitForMovement'),this[_0x587f14(0x9cb)](_0x587f14(0x5e6),[_0x2aca2a],'walk');}},Window_BattleLog['prototype']['isMeleeSingleTargetAction']=function(_0x1b3825){const _0x46fe12=_0x5bbf40;if(!_0x1b3825[_0x46fe12(0x401)]())return![];if(!_0x1b3825[_0x46fe12(0x8fe)]())return![];if(!_0x1b3825[_0x46fe12(0x5df)]())return![];return VisuMZ[_0x46fe12(0x7d9)][_0x46fe12(0x8be)][_0x46fe12(0x410)]['AutoMeleeSolo'];},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x3ef)]=function(_0x320818,_0x559738,_0x11ec50){const _0x42a2f4=_0x5bbf40,_0x1ead5c=_0x320818['getAttackMotion']()[_0x42a2f4(0x769)]<0x2,_0x22ab1f=0x14,_0x479dac=0x30;let _0x5a3bbf=!![];_0x11ec50['length']>0x0&&_0x320818[_0x42a2f4(0xa32)]()===_0x11ec50[0x0][_0x42a2f4(0xa32)]()&&(_0x5a3bbf=![]);_0x1ead5c&&_0x5a3bbf&&(this['push'](_0x42a2f4(0xbe9),[_0x320818],_0x479dac,_0x22ab1f),this[_0x42a2f4(0x9cb)](_0x42a2f4(0x9f2),_0x320818,_0x11ec50,_0x42a2f4(0x9d0),_0x22ab1f,!![],_0x42a2f4(0x54c),!![]),this[_0x42a2f4(0x9cb)](_0x42a2f4(0x5e6),[_0x320818],_0x42a2f4(0x672)),this['push'](_0x42a2f4(0x37c)));let _0x18ac9e=_0x559738['isAttack']()?this[_0x42a2f4(0x4d9)](_0x320818):0x1;for(let _0x2071de=0x0;_0x2071de<_0x18ac9e;_0x2071de++){_0x559738['isAttack']()&&_0x320818[_0x42a2f4(0xa32)]()&&this[_0x42a2f4(0x9cb)](_0x42a2f4(0xb86),_0x320818,_0x2071de),_0x559738[_0x42a2f4(0x92e)]()['animationId']<0x0?this['targetActionSet'](_0x320818,_0x559738,_0x11ec50):this[_0x42a2f4(0x758)](_0x320818,_0x559738,_0x11ec50);}_0x559738[_0x42a2f4(0xa76)]()&&_0x320818[_0x42a2f4(0xa32)]()&&this[_0x42a2f4(0x9cb)](_0x42a2f4(0xa4e),_0x320818),this[_0x42a2f4(0x9cb)]('applyImmortal',_0x320818,_0x11ec50,![]),this['addMeleeReturnActionSet'](_0x320818,_0x1ead5c,_0x479dac,_0x22ab1f);},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x4f1)]=function(_0x54f147){const _0x505a79=_0x5bbf40;if(!_0x54f147[_0x505a79(0x401)]())return![];if(!_0x54f147[_0x505a79(0xa8c)]())return![];if(!_0x54f147['isForOpponent']())return![];return VisuMZ[_0x505a79(0x7d9)][_0x505a79(0x8be)][_0x505a79(0x410)][_0x505a79(0x46d)];},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x2cc)]=function(_0xe44315,_0x2f43b9,_0x119fbd){const _0xf970fa=_0x5bbf40,_0x252e4d=_0xe44315[_0xf970fa(0x7de)]()['type']<0x2,_0x4c3ebb=0x14,_0x35c641=0x30;if(_0x252e4d){this[_0xf970fa(0x9cb)](_0xf970fa(0xbe9),[_0xe44315],_0x35c641,_0x4c3ebb);const _0x14d1fa=_0x119fbd[_0xf970fa(0x348)]>0x1?_0xf970fa(0x8df):_0xf970fa(0x9d0);this[_0xf970fa(0x9cb)]('performMoveToTargets',_0xe44315,_0x119fbd,_0x14d1fa,_0x4c3ebb,!![],'Linear',!![]),this[_0xf970fa(0x9cb)](_0xf970fa(0x5e6),[_0xe44315],'walk'),this[_0xf970fa(0x9cb)](_0xf970fa(0x37c));}let _0x27615b=_0x2f43b9[_0xf970fa(0xa76)]()?this[_0xf970fa(0x4d9)](_0xe44315):0x1;for(let _0x3ebe09=0x0;_0x3ebe09<_0x27615b;_0x3ebe09++){_0x2f43b9[_0xf970fa(0xa76)]()&&_0xe44315[_0xf970fa(0xa32)]()&&this[_0xf970fa(0x9cb)](_0xf970fa(0xb86),_0xe44315,_0x3ebe09),this[_0xf970fa(0x758)](_0xe44315,_0x2f43b9,_0x119fbd);}_0x2f43b9[_0xf970fa(0xa76)]()&&_0xe44315['isActor']()&&this['push']('clearActiveWeaponSet',_0xe44315),this['push'](_0xf970fa(0x642),_0xe44315,_0x119fbd,![]),this['addMeleeReturnActionSet'](_0xe44315,_0x252e4d,_0x35c641,_0x4c3ebb);},Window_BattleLog['prototype']['targetActionSet']=function(_0x3b8942,_0xe08d4b,_0x15660e){const _0x79d514=_0x5bbf40,_0x20f0f0=_0xe08d4b[_0x79d514(0x92e)]();for(const _0x2bc078 of _0x15660e){if(!_0x2bc078)continue;this[_0x79d514(0x9cb)]('performAction',_0x3b8942,_0xe08d4b),this[_0x79d514(0x9cb)](_0x79d514(0x308),Sprite_Battler[_0x79d514(0x58f)]),this[_0x79d514(0x9cb)](_0x79d514(0xad2),_0x3b8942,[_0x2bc078],_0x20f0f0['animationId']),this[_0x79d514(0x9cb)](_0x79d514(0x308),0x18),this['push'](_0x79d514(0xb87),_0x3b8942,_0x2bc078);}},Window_BattleLog['prototype']['wholeActionSet']=function(_0x441d5c,_0xd6ea8e,_0x5e84f5){const _0x44612a=_0x5bbf40,_0x98ad52=_0xd6ea8e['item']();let _0x4ef861=_0xd6ea8e[_0x44612a(0xa76)]()?0x1+_0x441d5c[_0x44612a(0x760)]():0x1;while(_0x4ef861--){this[_0x44612a(0x9cb)](_0x44612a(0xa7a),_0x441d5c,_0xd6ea8e),this[_0x44612a(0x9cb)]('waitCount',Sprite_Battler[_0x44612a(0x58f)]),this[_0x44612a(0x9cb)](_0x44612a(0xad2),_0x441d5c,_0x5e84f5['clone'](),_0x98ad52[_0x44612a(0x471)]),this[_0x44612a(0x9cb)](_0x44612a(0x9ed));}for(const _0x376f2b of _0x5e84f5){if(!_0x376f2b)continue;this[_0x44612a(0x9cb)](_0x44612a(0xb87),_0x441d5c,_0x376f2b);}},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xbae)]=function(_0x121537,_0xec9adc,_0x538bfc){const _0x538081=_0x5bbf40,_0x47f441=_0xec9adc[_0x538081(0x92e)]();this[_0x538081(0x9cb)](_0x538081(0x642),_0x121537,_0x538bfc,![]),this[_0x538081(0x9cb)](_0x538081(0x793)),this[_0x538081(0x9cb)](_0x538081(0x2d9)),this[_0x538081(0x9cb)]('clear'),this[_0x538081(0x9cb)]('performActionEnd',_0x121537),this[_0x538081(0x9cb)]('waitForMovement');},Window_BattleLog[_0x5bbf40(0x68c)]['endAction']=function(_0x1a0c64){},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x3d9)]=Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xa3b)],Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xa3b)]=function(_0x2f1ae2){const _0x2dc8ac=_0x5bbf40;if(!VisuMZ[_0x2dc8ac(0x7d9)][_0x2dc8ac(0x8be)][_0x2dc8ac(0x567)][_0x2dc8ac(0xac0)])return;VisuMZ[_0x2dc8ac(0x7d9)][_0x2dc8ac(0x3d9)]['call'](this,_0x2f1ae2);},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xb80)]=function(_0x568911){const _0x53d156=_0x5bbf40;this[_0x53d156(0x9cb)](_0x53d156(0x411),_0x568911);VisuMZ['BattleCore'][_0x53d156(0x8be)]['ActionSequence']['CounterPlayback']&&this[_0x53d156(0x9cb)]('showAnimation',_0x568911,[BattleManager[_0x53d156(0xb88)]],-0x1);if(!VisuMZ['BattleCore']['Settings'][_0x53d156(0x567)]['ShowCounter'])return;this[_0x53d156(0x9cb)]('addText',TextManager[_0x53d156(0x2b5)][_0x53d156(0x7c2)](_0x568911[_0x53d156(0x4e5)]()));},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x28a)]=function(_0x2af06d){const _0xb059c0=_0x5bbf40;this[_0xb059c0(0x9cb)](_0xb059c0(0x6b4),_0x2af06d);if(!VisuMZ[_0xb059c0(0x7d9)][_0xb059c0(0x8be)]['BattleLog'][_0xb059c0(0x46b)])return;this[_0xb059c0(0x9cb)](_0xb059c0(0x770),TextManager['magicReflection'][_0xb059c0(0x7c2)](_0x2af06d[_0xb059c0(0x4e5)]()));},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x393)]=function(_0x49c635,_0xf099d0){const _0x448b73=_0x5bbf40;if(VisuMZ[_0x448b73(0x7d9)]['Settings']['ActionSequence'][_0x448b73(0x9b4)]){const _0x270b80=_0xf099d0[_0x448b73(0x92e)]();this[_0x448b73(0x9cb)](_0x448b73(0xad2),_0x49c635,[_0x49c635],_0x270b80[_0x448b73(0x471)]);}},Window_BattleLog['prototype']['displaySubstitute']=function(_0x174eb2,_0x491e6a){const _0x17b92c=_0x5bbf40;this[_0x17b92c(0x9cb)](_0x17b92c(0x91a),_0x174eb2,_0x491e6a);if(!VisuMZ[_0x17b92c(0x7d9)][_0x17b92c(0x8be)][_0x17b92c(0x567)][_0x17b92c(0x667)])return;const _0x2d240c=_0x174eb2[_0x17b92c(0x4e5)](),_0x2ae5fa=TextManager['substitute'][_0x17b92c(0x7c2)](_0x2d240c,_0x491e6a[_0x17b92c(0x4e5)]());this[_0x17b92c(0x9cb)](_0x17b92c(0x770),_0x2ae5fa);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x586)]=Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x87d)],Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x87d)]=function(_0x4e4294,_0x2a24f6){const _0x47b9e4=_0x5bbf40;VisuMZ[_0x47b9e4(0x7d9)][_0x47b9e4(0x586)][_0x47b9e4(0x86a)](this,_0x4e4294,_0x2a24f6);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x20d)]=Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xbe8)],Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xbe8)]=function(_0x33ecac){const _0x1ba566=_0x5bbf40;if(!VisuMZ[_0x1ba566(0x7d9)][_0x1ba566(0x8be)][_0x1ba566(0x567)][_0x1ba566(0x470)])return;VisuMZ['BattleCore'][_0x1ba566(0x20d)][_0x1ba566(0x86a)](this,_0x33ecac);},VisuMZ[_0x5bbf40(0x7d9)]['Window_BattleLog_displayCritical']=Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xa0e)],Window_BattleLog[_0x5bbf40(0x68c)]['displayCritical']=function(_0x23694a){const _0xb42113=_0x5bbf40;if(!VisuMZ[_0xb42113(0x7d9)][_0xb42113(0x8be)][_0xb42113(0x567)]['ShowCritical'])return;VisuMZ[_0xb42113(0x7d9)][_0xb42113(0xb92)][_0xb42113(0x86a)](this,_0x23694a);},VisuMZ['BattleCore'][_0x5bbf40(0x268)]=Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xa08)],Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xa08)]=function(_0x30f570){const _0x37b5d7=_0x5bbf40;!VisuMZ['BattleCore'][_0x37b5d7(0x8be)][_0x37b5d7(0x567)][_0x37b5d7(0x884)]?this[_0x37b5d7(0x9cb)](_0x37b5d7(0x50c),_0x30f570):VisuMZ[_0x37b5d7(0x7d9)][_0x37b5d7(0x268)][_0x37b5d7(0x86a)](this,_0x30f570);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x3af)]=Window_BattleLog['prototype'][_0x5bbf40(0x84e)],Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x84e)]=function(_0x3d40c1){const _0x30e6aa=_0x5bbf40;!VisuMZ[_0x30e6aa(0x7d9)][_0x30e6aa(0x8be)][_0x30e6aa(0x567)][_0x30e6aa(0x884)]?_0x3d40c1[_0x30e6aa(0xb82)]()[_0x30e6aa(0x7ff)]?this[_0x30e6aa(0x9cb)]('performEvasion',_0x3d40c1):this[_0x30e6aa(0x9cb)](_0x30e6aa(0x45a),_0x3d40c1):VisuMZ[_0x30e6aa(0x7d9)][_0x30e6aa(0x3af)][_0x30e6aa(0x86a)](this,_0x3d40c1);},Window_BattleLog['prototype'][_0x5bbf40(0x786)]=function(_0x12f7cd){const _0xf99d91=_0x5bbf40;_0x12f7cd['result']()['hpAffected']&&(_0x12f7cd[_0xf99d91(0x281)]=0x0,_0x12f7cd['result']()[_0xf99d91(0xb65)]>0x0&&!_0x12f7cd[_0xf99d91(0xb82)]()[_0xf99d91(0x395)]&&(_0x12f7cd[_0xf99d91(0x281)]=_0x12f7cd[_0xf99d91(0xb82)]()[_0xf99d91(0xb65)],this['push']('performDamage',_0x12f7cd)),_0x12f7cd[_0xf99d91(0xb82)]()[_0xf99d91(0xb65)]<0x0&&this['push'](_0xf99d91(0x3b3),_0x12f7cd),VisuMZ[_0xf99d91(0x7d9)][_0xf99d91(0x8be)][_0xf99d91(0x567)][_0xf99d91(0x4ab)]&&this['push'](_0xf99d91(0x770),this[_0xf99d91(0x4d4)](_0x12f7cd)));},VisuMZ[_0x5bbf40(0x7d9)]['Window_BattleLog_displayMpDamage']=Window_BattleLog['prototype'][_0x5bbf40(0x7b4)],Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x7b4)]=function(_0x31ff8b){const _0x168a48=_0x5bbf40;if(!VisuMZ[_0x168a48(0x7d9)][_0x168a48(0x8be)][_0x168a48(0x567)][_0x168a48(0x952)])return;VisuMZ[_0x168a48(0x7d9)]['Window_BattleLog_displayMpDamage'][_0x168a48(0x86a)](this,_0x31ff8b);},VisuMZ['BattleCore'][_0x5bbf40(0x842)]=Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x5ac)],Window_BattleLog['prototype'][_0x5bbf40(0x5ac)]=function(_0x55d753){const _0x2863d6=_0x5bbf40;if(!VisuMZ[_0x2863d6(0x7d9)][_0x2863d6(0x8be)][_0x2863d6(0x567)][_0x2863d6(0x4f5)])return;VisuMZ[_0x2863d6(0x7d9)][_0x2863d6(0x842)][_0x2863d6(0x86a)](this,_0x55d753);},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x6a2)]=function(_0x595e56){const _0x1ca74b=_0x5bbf40;_0x595e56[_0x1ca74b(0xb82)]()[_0x1ca74b(0x6e5)]()&&(this['push']('pushBaseLine'),this[_0x1ca74b(0x93d)](_0x595e56),this[_0x1ca74b(0x65d)](_0x595e56),this[_0x1ca74b(0x9cb)](_0x1ca74b(0x793)));},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x3b7)]=function(_0x4c6ce1){const _0x19ece6=_0x5bbf40,_0x23a1d8=_0x4c6ce1['result'](),_0x1b8ec1=_0x23a1d8[_0x19ece6(0x880)]();for(const _0x5d0cc6 of _0x1b8ec1){const _0xbaeda7=_0x4c6ce1[_0x19ece6(0xa32)]()?_0x5d0cc6[_0x19ece6(0x519)]:_0x5d0cc6[_0x19ece6(0x6ad)];_0xbaeda7&&VisuMZ[_0x19ece6(0x7d9)][_0x19ece6(0x8be)][_0x19ece6(0x567)][_0x19ece6(0x54d)]&&(this[_0x19ece6(0x9cb)](_0x19ece6(0x990)),this[_0x19ece6(0x9cb)]('popBaseLine'),this['push'](_0x19ece6(0xa45)),this[_0x19ece6(0x9cb)](_0x19ece6(0x770),_0xbaeda7[_0x19ece6(0x7c2)](_0x4c6ce1[_0x19ece6(0x4e5)]())),this[_0x19ece6(0x9cb)](_0x19ece6(0x7f0))),_0x5d0cc6['id']===_0x4c6ce1[_0x19ece6(0x646)]()&&this[_0x19ece6(0x9cb)]('performCollapse',_0x4c6ce1);}},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x990)]=function(){},Window_BattleLog['prototype'][_0x5bbf40(0xa8d)]=function(_0x1bacc0){const _0x17b38d=_0x5bbf40;if(!VisuMZ[_0x17b38d(0x7d9)]['Settings'][_0x17b38d(0x567)][_0x17b38d(0xc12)])return;const _0x186a1d=_0x1bacc0[_0x17b38d(0xb82)](),_0x28899a=_0x186a1d[_0x17b38d(0x425)]();for(const _0x4d84ec of _0x28899a){_0x4d84ec['message4']&&(this[_0x17b38d(0x9cb)](_0x17b38d(0xa34)),this[_0x17b38d(0x9cb)](_0x17b38d(0x480)),this['push'](_0x17b38d(0xa45)),this[_0x17b38d(0x9cb)](_0x17b38d(0x770),_0x4d84ec['message4']['format'](_0x1bacc0[_0x17b38d(0x4e5)]())),this[_0x17b38d(0x9cb)](_0x17b38d(0x7f0)));}},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xa34)]=function(){},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x65d)]=function(_0x74f4c2){const _0x3336a6=_0x5bbf40,_0x27a886=VisuMZ[_0x3336a6(0x7d9)]['Settings']['BattleLog'],_0x4e1ea4=_0x74f4c2[_0x3336a6(0xb82)]();if(_0x27a886[_0x3336a6(0x210)])this[_0x3336a6(0x31d)](_0x74f4c2,_0x4e1ea4[_0x3336a6(0x768)],TextManager[_0x3336a6(0x561)]);if(_0x27a886[_0x3336a6(0x31e)])this[_0x3336a6(0x31d)](_0x74f4c2,_0x4e1ea4[_0x3336a6(0x8dc)],TextManager[_0x3336a6(0xa5d)]);if(_0x27a886['ShowRemovedBuff'])this[_0x3336a6(0x31d)](_0x74f4c2,_0x4e1ea4[_0x3336a6(0x280)],TextManager['buffRemove']);},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x31d)]=function(_0x293f37,_0x5b4a9d,_0x7ae783){const _0x5b0308=_0x5bbf40;for(const _0x4d3456 of _0x5b4a9d){const _0x15b757=_0x7ae783[_0x5b0308(0x7c2)](_0x293f37[_0x5b0308(0x4e5)](),TextManager['param'](_0x4d3456));this[_0x5b0308(0x9cb)](_0x5b0308(0x480)),this[_0x5b0308(0x9cb)](_0x5b0308(0xa45)),this[_0x5b0308(0x9cb)](_0x5b0308(0x770),_0x15b757),this[_0x5b0308(0x9cb)]('wait');}},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x814)]=Window_BattleLog[_0x5bbf40(0x68c)]['clear'],Window_BattleLog[_0x5bbf40(0x68c)]['clear']=function(){const _0x359db1=_0x5bbf40;VisuMZ['BattleCore'][_0x359db1(0x814)]['call'](this),this[_0x359db1(0x6c0)]();},VisuMZ['BattleCore'][_0x5bbf40(0xb20)]=Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xa45)],Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xa45)]=function(){const _0x912c18=_0x5bbf40;VisuMZ[_0x912c18(0x7d9)][_0x912c18(0xb20)][_0x912c18(0x86a)](this),this['callNextMethod']();},VisuMZ[_0x5bbf40(0x7d9)]['Window_BattleLog_popBaseLine']=Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x480)],Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x480)]=function(){const _0x443081=_0x5bbf40;VisuMZ[_0x443081(0x7d9)][_0x443081(0x4dd)][_0x443081(0x86a)](this),this[_0x443081(0x9a0)](),this[_0x443081(0x6c0)]();},VisuMZ[_0x5bbf40(0x7d9)]['Window_BattleLog_popupDamage']=Window_BattleLog[_0x5bbf40(0x68c)]['popupDamage'],Window_BattleLog['prototype'][_0x5bbf40(0x8eb)]=function(_0x540a59){const _0x4b9820=_0x5bbf40;VisuMZ['BattleCore'][_0x4b9820(0x978)][_0x4b9820(0x86a)](this,_0x540a59),this[_0x4b9820(0x6c0)]();},Window_BattleLog[_0x5bbf40(0x68c)]['waitForNewLine']=function(){const _0x59f43d=_0x5bbf40;let _0x7122c1=0x0;this[_0x59f43d(0x2ef)][_0x59f43d(0x348)]>0x0&&(_0x7122c1=this[_0x59f43d(0x2ef)][this[_0x59f43d(0x2ef)][_0x59f43d(0x348)]-0x1]),this[_0x59f43d(0xb0f)]['length']>_0x7122c1?this[_0x59f43d(0x7f0)]():this[_0x59f43d(0x6c0)]();},VisuMZ['BattleCore'][_0x5bbf40(0x67f)]=Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x7c0)],Window_BattleLog['prototype']['performActionStart']=function(_0x54b6be,_0x4d7bb8){const _0x5bfce5=_0x5bbf40;VisuMZ[_0x5bfce5(0x7d9)][_0x5bfce5(0x67f)]['call'](this,_0x54b6be,_0x4d7bb8),this['callNextMethod']();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0xc11)]=Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xa7a)],Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xa7a)]=function(_0x5e48be,_0x5d52a8){const _0x4943eb=_0x5bbf40;VisuMZ[_0x4943eb(0x7d9)][_0x4943eb(0xc11)][_0x4943eb(0x86a)](this,_0x5e48be,_0x5d52a8),this[_0x4943eb(0x6c0)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x87f)]=Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x591)],Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x591)]=function(_0xa164ee){const _0x62516e=_0x5bbf40;VisuMZ[_0x62516e(0x7d9)][_0x62516e(0x87f)][_0x62516e(0x86a)](this,_0xa164ee);for(const _0x16f617 of BattleManager[_0x62516e(0x4fd)]()){if(!_0x16f617)continue;if(_0x16f617[_0x62516e(0x724)]())continue;_0x16f617['performActionEndMembers']();}this[_0x62516e(0x6c0)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x82d)]=Window_BattleLog[_0x5bbf40(0x68c)]['performDamage'],Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x819)]=function(_0x248509){const _0x59c2b6=_0x5bbf40;VisuMZ[_0x59c2b6(0x7d9)][_0x59c2b6(0x82d)][_0x59c2b6(0x86a)](this,_0x248509),this[_0x59c2b6(0x6c0)]();},VisuMZ[_0x5bbf40(0x7d9)]['Window_BattleLog_performMiss']=Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x50c)],Window_BattleLog['prototype']['performMiss']=function(_0x3a8fb1){const _0x1287d7=_0x5bbf40;VisuMZ[_0x1287d7(0x7d9)]['Window_BattleLog_performMiss'][_0x1287d7(0x86a)](this,_0x3a8fb1),this[_0x1287d7(0x6c0)]();},VisuMZ[_0x5bbf40(0x7d9)]['Window_BattleLog_performRecovery']=Window_BattleLog['prototype'][_0x5bbf40(0x3b3)],Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x3b3)]=function(_0x386a01){const _0x1e3f78=_0x5bbf40;VisuMZ['BattleCore'][_0x1e3f78(0x493)][_0x1e3f78(0x86a)](this,_0x386a01),this['callNextMethod']();},VisuMZ[_0x5bbf40(0x7d9)]['Window_BattleLog_performEvasion']=Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x4ee)],Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x4ee)]=function(_0x48f03c){const _0x3ad47c=_0x5bbf40;VisuMZ[_0x3ad47c(0x7d9)][_0x3ad47c(0x2a1)][_0x3ad47c(0x86a)](this,_0x48f03c),this[_0x3ad47c(0x6c0)]();},VisuMZ[_0x5bbf40(0x7d9)]['Window_BattleLog_performMagicEvasion']=Window_BattleLog['prototype'][_0x5bbf40(0x45a)],Window_BattleLog[_0x5bbf40(0x68c)]['performMagicEvasion']=function(_0x389522){const _0x337159=_0x5bbf40;VisuMZ[_0x337159(0x7d9)]['Window_BattleLog_performMagicEvasion'][_0x337159(0x86a)](this,_0x389522),this[_0x337159(0x6c0)]();},VisuMZ[_0x5bbf40(0x7d9)]['Window_BattleLog_performCounter']=Window_BattleLog[_0x5bbf40(0x68c)]['performCounter'],Window_BattleLog['prototype'][_0x5bbf40(0x411)]=function(_0x301d28){const _0x34f18d=_0x5bbf40;VisuMZ[_0x34f18d(0x7d9)][_0x34f18d(0x3fe)][_0x34f18d(0x86a)](this,_0x301d28),this[_0x34f18d(0x6c0)]();},VisuMZ['BattleCore']['Window_BattleLog_performReflection']=Window_BattleLog['prototype']['performReflection'],Window_BattleLog[_0x5bbf40(0x68c)]['performReflection']=function(_0xdd26a3){const _0x20d660=_0x5bbf40;VisuMZ['BattleCore'][_0x20d660(0x5dd)][_0x20d660(0x86a)](this,_0xdd26a3),this['callNextMethod']();},VisuMZ['BattleCore']['Window_BattleLog_performSubstitute']=Window_BattleLog[_0x5bbf40(0x68c)]['performSubstitute'],Window_BattleLog['prototype'][_0x5bbf40(0x91a)]=function(_0x5f2f09,_0x25a979){const _0x139df9=_0x5bbf40;VisuMZ[_0x139df9(0x7d9)][_0x139df9(0x7f5)][_0x139df9(0x86a)](this,_0x5f2f09,_0x25a979),this[_0x139df9(0x6c0)]();},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x548)]=Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x346)],Window_BattleLog['prototype'][_0x5bbf40(0x346)]=function(_0x1b3b28){const _0x28cd88=_0x5bbf40;VisuMZ[_0x28cd88(0x7d9)][_0x28cd88(0x548)][_0x28cd88(0x86a)](this,_0x1b3b28),this[_0x28cd88(0x6c0)]();},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x5b4)]=function(_0x315036,_0x5dcc0b){const _0x11c37e=_0x5bbf40;_0x315036[_0x11c37e(0x5b4)](_0x5dcc0b),this[_0x11c37e(0x6c0)]();},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x823)]=function(_0x3bdd72,_0x286962){const _0x28ca97=_0x5bbf40,_0x1a5117=_0x3bdd72[_0x28ca97(0x352)]();_0x1a5117<=0x0?SoundManager['playEnemyAttack']():this[_0x28ca97(0x8b7)](_0x286962,_0x1a5117);},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x642)]=function(_0x599f01,_0x7c9275,_0xae2961){const _0xab1de4=_0x5bbf40,_0x4c3d14=[_0x599f01][_0xab1de4(0xa80)](_0x7c9275);for(const _0x316d73 of _0x4c3d14){if(!_0x316d73)continue;_0x316d73[_0xab1de4(0xc19)](_0xae2961);}this[_0xab1de4(0x6c0)]();},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x308)]=function(_0x467811){const _0x53e8b5=_0x5bbf40;this[_0x53e8b5(0x4cf)]=_0x467811;},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x5e6)]=function(_0x8e43c6,_0x5f2232){const _0x19de87=_0x5bbf40;for(const _0x29ed59 of _0x8e43c6){if(!_0x29ed59)continue;_0x29ed59[_0x19de87(0x5e6)](_0x5f2232);}this[_0x19de87(0x6c0)]();},Window_BattleLog['prototype'][_0x5bbf40(0xc0f)]=function(_0x4c9e96,_0x57701a,_0x2d86d8,_0x527d6e,_0x1f2cfe,_0x136d83){const _0x232864=_0x5bbf40;_0x4c9e96[_0x232864(0xb0c)](_0x57701a,_0x2d86d8,_0x527d6e,_0x1f2cfe,_0x136d83,-0x1),this[_0x232864(0x6c0)]();},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0x9f2)]=function(_0x2e223d,_0x1bb396,_0x1476d5,_0xcab787,_0x319156,_0x7192b2,_0x29e146){const _0x468378=_0x5bbf40,_0x2afda4=Math[_0x468378(0xaf8)](..._0x1bb396['map'](_0x502cff=>_0x502cff['battler']()[_0x468378(0x72f)]-_0x502cff[_0x468378(0xb3a)]()['mainSpriteWidth']()/0x2)),_0x146ee2=Math['max'](..._0x1bb396[_0x468378(0x6d6)](_0x153ec3=>_0x153ec3['battler']()['_baseX']+_0x153ec3[_0x468378(0xb3a)]()['mainSpriteWidth']()/0x2)),_0x4f2637=Math[_0x468378(0xaf8)](..._0x1bb396['map'](_0x34a175=>_0x34a175['battler']()['_baseY']-_0x34a175[_0x468378(0xb3a)]()[_0x468378(0x3db)]())),_0x49aea5=Math[_0x468378(0xb10)](..._0x1bb396[_0x468378(0x6d6)](_0x392a0e=>_0x392a0e[_0x468378(0xb3a)]()['_baseY'])),_0x2f0bbc=_0x1bb396[_0x468378(0xafb)](_0x5756be=>_0x5756be[_0x468378(0xa32)]())[_0x468378(0x348)],_0x29d06c=_0x1bb396[_0x468378(0xafb)](_0x164ae3=>_0x164ae3[_0x468378(0x37d)]())[_0x468378(0x348)];let _0x47ad37=0x0,_0x562d5e=0x0;if(_0x1476d5[_0x468378(0x24d)](/front/i))_0x47ad37=_0x2f0bbc>=_0x29d06c?_0x2afda4:_0x146ee2;else{if(_0x1476d5[_0x468378(0x24d)](/middle/i))_0x47ad37=(_0x2afda4+_0x146ee2)/0x2,_0x29e146=-0x1;else _0x1476d5[_0x468378(0x24d)](/back/i)&&(_0x47ad37=_0x2f0bbc>=_0x29d06c?_0x146ee2:_0x2afda4);}if(_0x1476d5[_0x468378(0x24d)](/head/i))_0x562d5e=_0x4f2637;else{if(_0x1476d5[_0x468378(0x24d)](/center/i)){_0x562d5e=(_0x4f2637+_0x49aea5)/0x2;if(_0x2e223d[_0x468378(0xb3a)]())_0x562d5e+=_0x2e223d[_0x468378(0xb3a)]()['height']/0x2;}else _0x1476d5[_0x468378(0x24d)](/base/i)&&(_0x562d5e=_0x49aea5);}_0x2e223d[_0x468378(0xb0c)](_0x47ad37,_0x562d5e,_0xcab787,_0x319156,_0x7192b2,_0x29e146),this['callNextMethod']();},Window_BattleLog[_0x5bbf40(0x68c)][_0x5bbf40(0xbe9)]=function(_0x202969,_0x12eebf,_0x4e2d94){const _0x11250e=_0x5bbf40;for(const _0x263b7b of _0x202969){if(!_0x263b7b)continue;_0x263b7b[_0x11250e(0x4ca)](_0x12eebf,_0x4e2d94);}this[_0x11250e(0x6c0)]();};function Window_BattleMultiTarget(){const _0x3ba073=_0x5bbf40;this[_0x3ba073(0x3bb)](...arguments);}Window_BattleMultiTarget['prototype']=Object[_0x5bbf40(0x6c2)](Window_Command['prototype']),Window_BattleMultiTarget[_0x5bbf40(0x68c)][_0x5bbf40(0xaad)]=Window_BattleMultiTarget,VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8be)]['MultiTarget']=VisuMZ['BattleCore'][_0x5bbf40(0x8be)][_0x5bbf40(0x434)]||{},Window_BattleMultiTarget[_0x5bbf40(0x9e5)]=VisuMZ['BattleCore'][_0x5bbf40(0x8be)][_0x5bbf40(0x434)]['WindowWidth']??0x118,Window_BattleMultiTarget[_0x5bbf40(0x833)]=VisuMZ[_0x5bbf40(0x7d9)]['Settings'][_0x5bbf40(0x434)]['BgType']??0x2,Window_BattleMultiTarget[_0x5bbf40(0x4ec)]=VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8be)][_0x5bbf40(0x434)][_0x5bbf40(0xb63)]??!![],Window_BattleMultiTarget[_0x5bbf40(0x714)]=VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8be)][_0x5bbf40(0x434)]['AllActorsText']??'All\x20Allies',Window_BattleMultiTarget[_0x5bbf40(0x699)]=VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8be)]['MultiTarget']['AllEnemiesText']??'All\x20Enemies',Window_BattleMultiTarget[_0x5bbf40(0x6f8)]=VisuMZ[_0x5bbf40(0x7d9)]['Settings']['MultiTarget'][_0x5bbf40(0x322)]??0x0,Window_BattleMultiTarget[_0x5bbf40(0x207)]=VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8be)][_0x5bbf40(0x434)][_0x5bbf40(0x73f)]??0x0,Window_BattleMultiTarget[_0x5bbf40(0x97c)]=VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8be)][_0x5bbf40(0x434)]['EnemyOffsetX']??0x0,Window_BattleMultiTarget[_0x5bbf40(0xb08)]=VisuMZ[_0x5bbf40(0x7d9)]['Settings']['MultiTarget'][_0x5bbf40(0x52d)]??0x0,Window_BattleMultiTarget[_0x5bbf40(0x68c)][_0x5bbf40(0x3bb)]=function(_0x8e4509,_0x17ecd5){const _0xe8b5e6=_0x5bbf40;this['_forActor']=_0x17ecd5,Window_Command['prototype'][_0xe8b5e6(0x3bb)]['call'](this,_0x8e4509),this['setBackgroundType'](Window_BattleMultiTarget[_0xe8b5e6(0x833)]),this[_0xe8b5e6(0xba4)](),this['hide'](),this['deselect']();},Window_BattleMultiTarget[_0x5bbf40(0x68c)]['forActor']=function(){const _0x2cb1b7=_0x5bbf40;return this[_0x2cb1b7(0x7c1)];},Window_BattleMultiTarget['prototype'][_0x5bbf40(0x296)]=function(){const _0x13b759=_0x5bbf40;let _0x5e800e=this[_0x13b759(0xb5f)]()?Window_BattleMultiTarget[_0x13b759(0x714)]:Window_BattleMultiTarget[_0x13b759(0x699)];if(Imported[_0x13b759(0x25a)]&&Window_BattleMultiTarget[_0x13b759(0x4ec)]){this[_0x13b759(0x1ff)]=this[_0x13b759(0xb5f)]()?'pagedown':_0x13b759(0xa57),this[_0x13b759(0xa74)]=TextManager['getInputButtonString'](this['_buttonKey']);const _0xb9caf1=VisuMZ[_0x13b759(0x25b)]['Settings']['ButtonAssist']['TextFmt'];_0x5e800e=_0xb9caf1[_0x13b759(0x7c2)](this[_0x13b759(0xa74)],_0x5e800e);}this['addCommand'](_0x5e800e,_0x13b759(0x48a));},Window_BattleMultiTarget[_0x5bbf40(0x68c)][_0x5bbf40(0xbfb)]=function(_0x39016e){const _0x2b724d=_0x5bbf40,_0x3fa0f1=this[_0x2b724d(0x8c7)](_0x39016e);this[_0x2b724d(0x5de)](),this['changePaintOpacity'](this[_0x2b724d(0x8a7)](_0x39016e));const _0x484825=this[_0x2b724d(0x62a)](_0x39016e),_0x483fc6=this[_0x2b724d(0x8de)](_0x484825)[_0x2b724d(0x2fc)],_0x56c7d7=_0x3fa0f1['x']+Math[_0x2b724d(0x9d6)]((_0x3fa0f1[_0x2b724d(0x2fc)]-_0x483fc6)/0x2);this[_0x2b724d(0x8fa)](_0x484825,_0x56c7d7,_0x3fa0f1['y'],_0x3fa0f1[_0x2b724d(0x2fc)]);},Window_BattleMultiTarget[_0x5bbf40(0x68c)][_0x5bbf40(0x69a)]=function(){const _0x506045=_0x5bbf40;Window_Command['prototype'][_0x506045(0x69a)]['call'](this),this[_0x506045(0x499)](),this[_0x506045(0xbba)]();},Window_BattleMultiTarget['prototype']['updateVisibility']=function(){const _0x5231a4=_0x5bbf40;this[_0x5231a4(0x74c)]=this[_0x5231a4(0xbad)]();},Window_BattleMultiTarget[_0x5bbf40(0x68c)][_0x5bbf40(0xbad)]=function(){const _0xc9e828=_0x5bbf40,_0x49ad80=BattleManager[_0xc9e828(0x482)](),_0x38d53f=_0x49ad80&&_0x49ad80[_0xc9e828(0x751)]();if(!_0x38d53f)return![];const _0x2050f=SceneManager[_0xc9e828(0x2f2)];if(this[_0xc9e828(0xb5f)]()){if(_0x2050f[_0xc9e828(0x351)]['active']&&_0x2050f[_0xc9e828(0x351)][_0xc9e828(0x619)][_0xc9e828(0x8c6)])return!![];if(_0x2050f[_0xc9e828(0xa7e)]['active']&&_0x2050f[_0xc9e828(0xa7e)][_0xc9e828(0x619)][_0xc9e828(0x8c6)])return!![];}else{if(_0x2050f[_0xc9e828(0xa7e)][_0xc9e828(0xb16)]&&_0x2050f['_enemyWindow'][_0xc9e828(0x619)][_0xc9e828(0xa57)])return!![];}return![];},Window_BattleMultiTarget[_0x5bbf40(0x68c)][_0x5bbf40(0xbba)]=function(){const _0x4cb1d2=_0x5bbf40;if(!Imported[_0x4cb1d2(0x25a)])return;this[_0x4cb1d2(0xa74)]!==TextManager[_0x4cb1d2(0x934)](this['_buttonKey'])&&this[_0x4cb1d2(0x82f)]();},Window_BattleMultiTarget[_0x5bbf40(0x68c)][_0x5bbf40(0x907)]=function(){const _0x207b2d=_0x5bbf40;if(this['visible']&&TouchInput['isClicked']()){const _0x1d24fb=this[_0x207b2d(0x488)]();if(_0x1d24fb>=0x0){const _0x5331b3=this[_0x207b2d(0xb5f)]()?_0x207b2d(0x8c6):_0x207b2d(0xa57);Input[_0x207b2d(0x9ab)](_0x5331b3);}}};function Window_DamageCounter(){const _0x787f52=_0x5bbf40;this[_0x787f52(0x3bb)](...arguments);}Window_DamageCounter['prototype']=Object[_0x5bbf40(0x6c2)](Window_Base[_0x5bbf40(0x68c)]),Window_DamageCounter['prototype'][_0x5bbf40(0xaad)]=Window_DamageCounter,Window_DamageCounter[_0x5bbf40(0x205)]={'enabled':VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8be)][_0x5bbf40(0x590)][_0x5bbf40(0x5a3)]??!![],'customFontFace':VisuMZ[_0x5bbf40(0x7d9)]['Settings'][_0x5bbf40(0x590)][_0x5bbf40(0x447)]??'','textAlign':VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8be)][_0x5bbf40(0x590)]['TextAlign']??_0x5bbf40(0x47d),'hitsDmgFmt':VisuMZ[_0x5bbf40(0x7d9)]['Settings'][_0x5bbf40(0x590)][_0x5bbf40(0xbd4)]??_0x5bbf40(0xadc),'hitsHealFmt':VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8be)][_0x5bbf40(0x590)][_0x5bbf40(0x736)]??_0x5bbf40(0x1f1),'totalDmgFmt':VisuMZ['BattleCore'][_0x5bbf40(0x8be)]['ComboWindow']['totalDmgFmt']??_0x5bbf40(0xa68),'totalHealFmt':VisuMZ['BattleCore'][_0x5bbf40(0x8be)][_0x5bbf40(0x590)]['totalHealFmt']??_0x5bbf40(0xbec),'fadeShiftX':VisuMZ[_0x5bbf40(0x7d9)]['Settings'][_0x5bbf40(0x590)]['fadeShiftX']??-0x2,'fadeShiftY':VisuMZ['BattleCore'][_0x5bbf40(0x8be)][_0x5bbf40(0x590)][_0x5bbf40(0x7f6)]??0x0,'positionOffsetX':VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8be)][_0x5bbf40(0x590)][_0x5bbf40(0x9c6)]??0x0,'positionOffsetY':VisuMZ[_0x5bbf40(0x7d9)]['Settings'][_0x5bbf40(0x590)]['PosOffsetY']??0x0,'updateDuration':VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8be)][_0x5bbf40(0x590)][_0x5bbf40(0xc13)]??0x14,'minimumStayDuration':VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8be)][_0x5bbf40(0x590)][_0x5bbf40(0x2b7)]??0x28,'minimumHits':VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x8be)][_0x5bbf40(0x590)]['minimumHits']??0x1,'opacitySpeed':VisuMZ[_0x5bbf40(0x7d9)]['Settings'][_0x5bbf40(0x590)][_0x5bbf40(0x6be)]??0x10},Window_DamageCounter[_0x5bbf40(0x68c)][_0x5bbf40(0x3bb)]=function(_0x2f7872){const _0x3a2e13=_0x5bbf40;this['_visibleDuration']=0x0,Window_Base['prototype'][_0x3a2e13(0x3bb)]['call'](this,_0x2f7872),this[_0x3a2e13(0x336)]=_0x2f7872['x'],this[_0x3a2e13(0x971)]=_0x2f7872['y'],this[_0x3a2e13(0x356)](),this[_0x3a2e13(0x225)](0x2);},Window_DamageCounter[_0x5bbf40(0x68c)][_0x5bbf40(0x356)]=function(){const _0x27e83c=_0x5bbf40;this['_updateDuration']=0x0,this[_0x27e83c(0x5a0)]=0x0,this[_0x27e83c(0x3e1)]=0x0,this['_targetHits']=0x0,this[_0x27e83c(0xa17)]=0x0;},Window_DamageCounter[_0x5bbf40(0x68c)][_0x5bbf40(0xbe7)]=function(){const _0x5d9728=_0x5bbf40;Window_Base[_0x5d9728(0x68c)][_0x5d9728(0xbe7)][_0x5d9728(0x86a)](this);const _0x526563=Window_DamageCounter[_0x5d9728(0x205)];_0x526563[_0x5d9728(0xb35)]?this['contents'][_0x5d9728(0x27a)]=_0x526563[_0x5d9728(0xb35)]:this[_0x5d9728(0x340)][_0x5d9728(0x27a)]=$gameSystem[_0x5d9728(0xb38)]();};var $comboWindowReset=function(){const _0xe132d2=_0x5bbf40;if(!SceneManager[_0xe132d2(0x277)]())return;const _0x575493=SceneManager[_0xe132d2(0x2f2)]['_damageCounterWindow'];if(_0x575493)_0x575493[_0xe132d2(0x356)]();};Window_DamageCounter['prototype'][_0x5bbf40(0x7b6)]=function(_0x1c176c){const _0x552ab9=_0x5bbf40;this[_0x552ab9(0x72a)]+=Math[_0x552ab9(0x6ea)](_0x1c176c);const _0x5ac573=Window_DamageCounter[_0x552ab9(0x205)];this[_0x552ab9(0x573)]=_0x5ac573[_0x552ab9(0xc13)],this[_0x552ab9(0x72a)]>=_0x5ac573[_0x552ab9(0xbd8)]&&(this['_visibleDuration']=_0x5ac573[_0x552ab9(0x2b7)]);};var $comboWindowIncreaseHits=function(_0x5d4cef){const _0x29d4cd=_0x5bbf40;if(!SceneManager[_0x29d4cd(0x277)]())return;const _0x1aa6af=SceneManager[_0x29d4cd(0x2f2)][_0x29d4cd(0x7f2)];if(_0x1aa6af)_0x1aa6af[_0x29d4cd(0x7b6)](_0x5d4cef);};Window_DamageCounter[_0x5bbf40(0x68c)][_0x5bbf40(0xbbd)]=function(_0x435768){const _0x48349d=_0x5bbf40;this['_targetDamage']+=Math[_0x48349d(0x6ea)](_0x435768);const _0x4894e4=Window_DamageCounter[_0x48349d(0x205)];this['_updateDuration']=_0x4894e4['updateDuration'],this[_0x48349d(0x72a)]>=_0x4894e4[_0x48349d(0xbd8)]&&(this['_visibleDuration']=_0x4894e4[_0x48349d(0x2b7)]);};var $comboWindowIncreaseDamage=function(_0x4e5991){const _0x298a60=_0x5bbf40;if(!SceneManager['isSceneBattle']())return;const _0x3b3f45=SceneManager['_scene'][_0x298a60(0x7f2)];if(_0x3b3f45)_0x3b3f45['increaseTotal'](_0x4e5991);},$comboWindowIncreaseHealing=function(_0x333b0a){const _0x4fd8ac=_0x5bbf40;if(!SceneManager[_0x4fd8ac(0x277)]())return;const _0x2f5e4a=SceneManager[_0x4fd8ac(0x2f2)][_0x4fd8ac(0x7f2)];if(_0x2f5e4a)_0x2f5e4a[_0x4fd8ac(0xbbd)](-_0x333b0a);};VisuMZ['BattleCore']['Scene_Battle_createAllWindows_ComboWindow']=Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0x835)],Scene_Battle[_0x5bbf40(0x68c)]['createAllWindows']=function(){const _0x445fb7=_0x5bbf40;this[_0x445fb7(0xb2b)](),VisuMZ['BattleCore'][_0x445fb7(0x8f9)][_0x445fb7(0x86a)](this);},Scene_Battle[_0x5bbf40(0x68c)][_0x5bbf40(0xb2b)]=function(){const _0x323387=_0x5bbf40;if(!Window_DamageCounter[_0x323387(0x205)]['enabled'])return;const _0x419c64=this['damageCounterWindowRect'](),_0x1b6b4f=new Window_DamageCounter(_0x419c64);this['addWindow'](_0x1b6b4f),this[_0x323387(0x7f2)]=_0x1b6b4f;},Scene_Battle['prototype']['damageCounterWindowRect']=function(){const _0x9c0fba=_0x5bbf40;if(VisuMZ[_0x9c0fba(0x7d9)]['Settings'][_0x9c0fba(0x590)][_0x9c0fba(0x4ff)])return VisuMZ[_0x9c0fba(0x7d9)][_0x9c0fba(0x8be)][_0x9c0fba(0x590)]['ComboWindow_RectJS']['call'](this);const _0x48a9d4=Math[_0x9c0fba(0x95e)](Graphics[_0x9c0fba(0x2fc)]/0x4),_0x313386=this['calcWindowHeight'](0x2,!![]),_0x34537e=0x0+this[_0x9c0fba(0x904)](),_0x7bb52d=Math[_0x9c0fba(0x6ea)](Graphics[_0x9c0fba(0xa4b)]*0x1/0x3)+this[_0x9c0fba(0x7ab)]();return new Rectangle(_0x34537e,_0x7bb52d,_0x48a9d4,_0x313386);},Scene_Battle['prototype']['comboWindowOffsetX']=function(){const _0x366bd4=_0x5bbf40;return Window_DamageCounter['SETTINGS'][_0x366bd4(0xbb6)];},Scene_Battle['prototype'][_0x5bbf40(0x7ab)]=function(){const _0x3790ab=_0x5bbf40;return Window_DamageCounter['SETTINGS'][_0x3790ab(0x20c)];},Window_DamageCounter[_0x5bbf40(0x68c)][_0x5bbf40(0x69a)]=function(){const _0x239a26=_0x5bbf40;Window_Base[_0x239a26(0x68c)][_0x239a26(0x69a)][_0x239a26(0x86a)](this),this[_0x239a26(0xa92)](),this[_0x239a26(0x651)]();},Window_DamageCounter['prototype'][_0x5bbf40(0xa92)]=function(){const _0x26ed61=_0x5bbf40;if(this[_0x26ed61(0x573)]<=0x0)return;const _0x12e3d3=this[_0x26ed61(0x573)];this['_totalHits']=this['_targetHits'],this[_0x26ed61(0x3e1)]=(this[_0x26ed61(0x3e1)]*(_0x12e3d3-0x1)+this[_0x26ed61(0xa17)])/_0x12e3d3,this[_0x26ed61(0x573)]--,this[_0x26ed61(0x573)]<=0x0&&(this['_totalHits']=this[_0x26ed61(0x72a)],this[_0x26ed61(0x3e1)]=this[_0x26ed61(0xa17)]),this[_0x26ed61(0x82f)]();},Window_DamageCounter['prototype'][_0x5bbf40(0x651)]=function(){const _0x4c96c4=_0x5bbf40,_0x3d4e81=Window_DamageCounter[_0x4c96c4(0x205)],_0x184991=this[_0x4c96c4(0xbad)](),_0xce759f=_0x3d4e81[_0x4c96c4(0x6be)]||0x1;if(_0x184991&&this['contentsOpacity']<0xff)this['contentsOpacity']+=_0xce759f;else!_0x184991&&this[_0x4c96c4(0x8f7)]>0x0&&(this[_0x4c96c4(0x8f7)]-=_0xce759f,this['x']+=_0x3d4e81[_0x4c96c4(0x6ba)]||0x0,this['y']+=_0x3d4e81[_0x4c96c4(0x7f6)]||0x0);},Window_DamageCounter['prototype'][_0x5bbf40(0xbad)]=function(){const _0x1aec05=_0x5bbf40,_0x604496=Window_DamageCounter[_0x1aec05(0x205)];if(this[_0x1aec05(0x72a)]>=_0x604496[_0x1aec05(0xbd8)])return!![];if(this[_0x1aec05(0x2ec)]-->0x0)return!![];return![];},VisuMZ['BattleCore']['Game_Action_executeHpDamage_ComboWindow']=Game_Action[_0x5bbf40(0x68c)]['executeHpDamage'],Game_Action[_0x5bbf40(0x68c)]['executeHpDamage']=function(_0x1e99cf,_0x46a4ff){const _0x438a55=_0x5bbf40;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0x46a4ff),VisuMZ['BattleCore'][_0x438a55(0x79c)][_0x438a55(0x86a)](this,_0x1e99cf,_0x46a4ff);},VisuMZ[_0x5bbf40(0x7d9)][_0x5bbf40(0x2ae)]=BattleManager['endAction'],BattleManager['endAction']=function(){const _0xbc593e=_0x5bbf40;$comboWindowReset(),VisuMZ[_0xbc593e(0x7d9)][_0xbc593e(0x2ae)][_0xbc593e(0x86a)](this);},Window_DamageCounter[_0x5bbf40(0x68c)][_0x5bbf40(0x82f)]=function(){const _0x15a479=_0x5bbf40;this[_0x15a479(0x340)]['clear'](),this[_0x15a479(0x46e)](),this['x']=this[_0x15a479(0x336)],this['y']=this[_0x15a479(0x971)];},Window_DamageCounter[_0x5bbf40(0x68c)][_0x5bbf40(0x5be)]=function(){const _0x550cbf=_0x5bbf40,_0x2cb13b=Window_DamageCounter[_0x550cbf(0x205)];return _0x2cb13b['textAlign']||_0x550cbf(0x47d);},Window_DamageCounter[_0x5bbf40(0x68c)][_0x5bbf40(0xa64)]=function(){const _0x344b0f=_0x5bbf40,_0x503ff9=Window_DamageCounter['SETTINGS'];let _0x44f06d=this[_0x344b0f(0x3e1)]>=0x0?_0x503ff9[_0x344b0f(0xbd4)]:_0x503ff9[_0x344b0f(0x736)];return _0x44f06d[_0x344b0f(0x7c2)](Math['abs'](Math[_0x344b0f(0x95e)](this[_0x344b0f(0x5a0)])));},Window_DamageCounter[_0x5bbf40(0x68c)][_0x5bbf40(0x749)]=function(){const _0x5cbe1a=_0x5bbf40,_0x2955c9=Window_DamageCounter['SETTINGS'];let _0x4da641=this[_0x5cbe1a(0x3e1)]>=0x0?_0x2955c9[_0x5cbe1a(0x871)]:_0x2955c9['totalHealFmt'];return _0x4da641[_0x5cbe1a(0x7c2)](Math[_0x5cbe1a(0x2c8)](Math[_0x5cbe1a(0x6ea)](this['_totalDamage'])));},Window_DamageCounter[_0x5bbf40(0x68c)]['drawComboText']=function(){const _0x123460=_0x5bbf40;if(VisuMZ[_0x123460(0x7d9)][_0x123460(0x8be)][_0x123460(0x590)][_0x123460(0x794)])return VisuMZ[_0x123460(0x7d9)][_0x123460(0x8be)][_0x123460(0x590)][_0x123460(0x794)][_0x123460(0x86a)](this);let _0x30ea9d=0x0,_0x53c93b=0x0;const _0x35689c=this['hitText'](),_0x520ae3=this[_0x123460(0x8de)](_0x35689c);if(this['textAlignment']()===_0x123460(0x676))_0x30ea9d=this[_0x123460(0xa2f)]-this['itemPadding']()-_0x520ae3[_0x123460(0x2fc)];else this[_0x123460(0x5be)]()===_0x123460(0x572)?_0x30ea9d=Math['floor']((this['innerWidth']-_0x520ae3['width'])/0x2):_0x30ea9d=this[_0x123460(0x4e7)]();this[_0x123460(0x8fa)](_0x35689c,_0x30ea9d,_0x53c93b),_0x53c93b+=Math['ceil'](this[_0x123460(0xa15)]()*0x2/0x3);const _0x1b2b89=this[_0x123460(0x749)](),_0x4ae0f2=this['textSizeEx'](_0x1b2b89);if(this[_0x123460(0x5be)]()==='right')_0x30ea9d=this[_0x123460(0xa2f)]-this[_0x123460(0x4e7)]()-_0x4ae0f2['width'];else this['textAlignment']()==='center'?_0x30ea9d=Math[_0x123460(0x9d6)]((this[_0x123460(0xa2f)]-_0x4ae0f2[_0x123460(0x2fc)])/0x2):_0x30ea9d=this[_0x123460(0x4e7)]();this[_0x123460(0x8fa)](_0x1b2b89,_0x30ea9d,_0x53c93b);};